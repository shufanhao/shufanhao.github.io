<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>大数据入门之Presto/Trino</title>
    <url>/posts/83d3434a/</url>
    <content><![CDATA[<p>Presto/Trino：是用来高速，实时，跨源的数据查询。</p>
<a id="more"></a>

        <h3 id="What-is-Presto"   >
          <a href="#What-is-Presto" class="heading-link"><i class="fas fa-link"></i></a>What is Presto ?</h3>
      <p><img src="https://img-blog.csdnimg.cn/0155791dc5764a528655f0b96885b97a.png" alt="在这里插入图片描述"></p>
<ul>
<li>Presto是由Facebook开发的分布式sql查询引擎，用来进行高速、实时的数据查询</li>
<li>Presto的产生是为了解决Hive的MapReduce模型太慢且不能通过BI等工具展现HDFS的问题</li>
<li>Presto是一个计算引擎，它不存储数据，通过丰富的connector获取第三方服务的数据，并支持扩展。可以通过连接Hive，来实现快速query hive table</li>
<li>可以跨数据源进行联合查询</li>
</ul>
<p>查询例子:</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># 联合查询hive的表和mysql的表</span><br><span class="line">select * from hive.testdb.tableA a join mysql.testdb.tableB b</span><br><span class="line">where a.id &#x3D; b.id</span><br><span class="line"></span><br><span class="line">show catalogs</span><br><span class="line">show schemas</span><br></pre></td></tr></table></div></figure>
<p>Presto 数据模型:</p>
<ul>
<li>Catalog: 即数据源，Hive, Mysql都是数据源，Presto可以连接多个Hive,Mysql</li>
<li>Schema: 类比于database,一个catalog下有多个schema</li>
<li>table: 数据表，一个schema下有多个数据表</li>
</ul>

        <h3 id="Presto-和Trino的关系"   >
          <a href="#Presto-和Trino的关系" class="heading-link"><i class="fas fa-link"></i></a>Presto 和Trino的关系</h3>
      <p>2020年12月PrestoSQL 更名为 Trino，所以Trino实际上是Prestode rebrand，至于为什么？ <span class="exturl"><a class="exturl__link"   href="https://trino.io/blog/2020/12/27/announcing-trino.html" >参考</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>说到底是Presto在Facebook的几个核心创始人员和公司闹掰了，然后出去后创立了新的公司为了Presto/Trino的发展。但是Facebook已经注册了Presto的商标权，所以不得已只能改名字了。</p>

        <h3 id="Presto架构"   >
          <a href="#Presto架构" class="heading-link"><i class="fas fa-link"></i></a>Presto架构</h3>
      <img src=https://img-blog.csdnimg.cn/b21d62c4fa184d1dad4b1471104d362d.png width=60% />

<ul>
<li>Presto从Hive Metastore获取元数据信息;</li>
<li>获取元数据信息后，从HDFS访问数据;</li>
<li>最终讲结果返回给client。</li>
</ul>
<img src=https://img-blog.csdnimg.cn/b51ddde020614a8ea937ac684916755c.png width=60% />

<ul>
<li>Coordinator负责解析SQL语句，生成查询计划并访问Hive metastore，分发执行任务</li>
<li>Discovery Server负责维护Coordinator和worker的关系，通常内嵌于Coordinator节点</li>
<li>Worker负责执行查询任务以及于HDFS进行交互读取数据。</li>
</ul>

        <h3 id="Presto-VS-Spark"   >
          <a href="#Presto-VS-Spark" class="heading-link"><i class="fas fa-link"></i></a>Presto VS Spark</h3>
      <p><img src="https://img-blog.csdnimg.cn/a6f885e38ffc4dfebc8c386991581455.png" alt="在这里插入图片描述"></p>

        <h3 id="pyhive访问presto"   >
          <a href="#pyhive访问presto" class="heading-link"><i class="fas fa-link"></i></a>pyhive访问presto</h3>
      <ul>
<li>pip package: presto</li>
<li>或者用sqlalchemy</li>
</ul>
]]></content>
      <categories>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>BigData</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据入门之Sqoop</title>
    <url>/posts/2c84cdcc/</url>
    <content><![CDATA[<p>Sqoop：解决的问题是提供了传统数据库和Hadoop之间转换的方案。</p>
<a id="more"></a>

        <h2 id="什么是Sqoop"   >
          <a href="#什么是Sqoop" class="heading-link"><i class="fas fa-link"></i></a>什么是Sqoop</h2>
      <ul>
<li>用于在Hadoop和传统的数据库(Mysql, Postgresql)进行数据的传递。</li>
<li>可以通过Hadoop的MapReduce把数据从关系型数据库中导入到Hadoop集群。</li>
<li>传输大量结构化或半结构化数据的过程完全是自动化的。</li>
<li>sqoop的导入进程是一个自动生成出来的java class，因此它的很多组件都可以自定义，比如导入的格式、文本的格式、到出的格式等等。</li>
</ul>
<p>如下图所示：<br><img src=https://img-blog.csdnimg.cn/30c87a89b2824dbfbc08e026970f3f66.png width=80% /></p>

        <h2 id="怎么用Sqoop"   >
          <a href="#怎么用Sqoop" class="heading-link"><i class="fas fa-link"></i></a>怎么用Sqoop</h2>
      
        <h3 id="Sqoop-与-Mysql"   >
          <a href="#Sqoop-与-Mysql" class="heading-link"><i class="fas fa-link"></i></a>Sqoop 与 Mysql</h3>
      <ol>
<li>连通测试</li>
</ol>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">sqoop list-databases \</span><br><span class="line">--connect jdbc:mysql://hadoop001:3306/ \</span><br><span class="line">--username root \</span><br><span class="line">--password root</span><br></pre></td></tr></table></div></figure>

<ol start="2">
<li>查询指定数据库中所有数据表</li>
</ol>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">sqoop list-tables \</span><br><span class="line">--connect jdbc:mysql://hadoop001:3306/mysql \</span><br><span class="line">--username root \</span><br><span class="line">--password root</span><br></pre></td></tr></table></div></figure>

        <h3 id="Sqoop与Hive"   >
          <a href="#Sqoop与Hive" class="heading-link"><i class="fas fa-link"></i></a>Sqoop与Hive</h3>
      
        <h4 id="Mysql数据导入到Hive"   >
          <a href="#Mysql数据导入到Hive" class="heading-link"><i class="fas fa-link"></i></a>Mysql数据导入到Hive</h4>
      <p>Sqoop 导入数据到 Hive 是先将数据导入到 HDFS 上的临时目录，然后再将数据从 HDFS 上 Load 到 Hive 中，最后将临时目录删除。可以使用 target-dir 来指定临时目录。</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">sqoop import \</span><br><span class="line">  --connect jdbc:mysql://hadoop001:3306/mysql \</span><br><span class="line">  --username root \</span><br><span class="line">  --password root \</span><br><span class="line">  --table help_keyword \        <span class="comment"># 待导入的表     </span></span><br><span class="line">  --delete-target-dir \         <span class="comment"># 如果临时目录存在删除</span></span><br><span class="line">  --target-dir /sqoop_hive  \   <span class="comment"># 临时目录位置</span></span><br><span class="line">  --hive-database sqoop_test \  <span class="comment"># 导入到 Hive 的 sqoop_test 数据库，数据库需要预先创建。不指定则默认为 default 库</span></span><br><span class="line">  --hive-import \               <span class="comment"># 导入到 Hive</span></span><br><span class="line">  --hive-overwrite \            <span class="comment"># 如果 Hive 表中有数据则覆盖，这会清除表中原有的数据，然后再写入</span></span><br><span class="line">  -m 3                          <span class="comment"># 并行度</span></span><br></pre></td></tr></table></div></figure>
<p>导入到 Hive 中的 sqoop_test 数据库需要预先创建，不指定则默认使用 Hive 中的 default 库。</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 hive 中的所有数据库</span></span><br><span class="line">hive&gt;  SHOW DATABASES;</span><br><span class="line"><span class="comment"># 创建 sqoop_test 数据库</span></span><br><span class="line">hive&gt;  CREATE DATABASE sqoop_test;</span><br></pre></td></tr></table></div></figure>
<p>验证：</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 sqoop_test 数据库的所有表</span></span><br><span class="line"> hive&gt;  SHOW  TABLES  IN  sqoop_test;</span><br><span class="line"><span class="comment"># 查看表中数据</span></span><br><span class="line"> hive&gt; SELECT * FROM sqoop_test.help_keyword;</span><br></pre></td></tr></table></div></figure>

        <h4 id="Hive-数据导到MySQL"   >
          <a href="#Hive-数据导到MySQL" class="heading-link"><i class="fas fa-link"></i></a>Hive 数据导到MySQL</h4>
      <p>由于 Hive 的数据是存储在 HDFS 上的，所以 Hive 导入数据到 MySQL，实际上就是 HDFS 导入数据到 MySQL。</p>
<ol>
<li><p>查看Hive表在HDFS的存储位置</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入对应的数据库</span></span><br><span class="line">hive&gt; use sqoop_test;</span><br><span class="line"><span class="comment"># 查看表信息</span></span><br><span class="line">hive&gt; desc formatted help_keyword; <span class="comment"># Location: 可以知道对应的数据库存放在哪个位置</span></span><br></pre></td></tr></table></div></figure>
</li>
<li><p>导出命令</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">sqoop <span class="built_in">export</span>  \</span><br><span class="line">    --connect jdbc:mysql://hadoop001:3306/mysql \</span><br><span class="line">    --username root \</span><br><span class="line">    --password root \</span><br><span class="line">    --table help_keyword_from_hive \</span><br><span class="line">    --<span class="built_in">export</span>-dir /user/hive/warehouse/sqoop_test.db/help_keyword  \</span><br><span class="line">    -input-fields-terminated-by <span class="string">&#x27;\001&#x27;</span> \             <span class="comment"># 需要注意的是 hive 中默认的分隔符为 \001</span></span><br><span class="line">    --m 3 </span><br></pre></td></tr></table></div></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>BigData</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据入门之 Hadoop,HDFS,Hbase,Hive</title>
    <url>/posts/1c5fdd96/</url>
    <content><![CDATA[<p>经常听到这些大数据的名词, Hadoop,HDFS,Hbase,Hive等，这次就一探究竟。</p>
<ul>
<li>Hadoop：是泛指大数据生态，实际上基本包括 存储(HDFS) + 计算(MapReduce);</li>
<li>HDFS: Hadoop分布式文件系统，主要是解决存储的问题;</li>
<li>Hbase: 基于Hadoop的高性能nosql数据库;</li>
<li>Hive: 最常用的数据仓库;<a id="more"></a>

</li>
</ul>

        <h2 id="What-is-大数据"   >
          <a href="#What-is-大数据" class="heading-link"><i class="fas fa-link"></i></a>What is 大数据 ?</h2>
      <p>大数据是以Hadoop为代表的大数据平台框架上进行各种数据采集，数据整理，数据分析的技术，Hadoop只是一个框架。</p>

        <h2 id="What-is-Hadoop"   >
          <a href="#What-is-Hadoop" class="heading-link"><i class="fas fa-link"></i></a>What is Hadoop ?</h2>
      <p>Hadoop 生态图：<br><img src="https://img-blog.csdnimg.cn/0d34abac871b451d896e6bbf2fcb4dcd.png" alt="在这里插入图片描述"></p>
<ul>
<li>是一个开源的大数据框架，它是一个生态，是分布式计算的解决方案</li>
<li>一般认为的Hadoop = HDFS(分布式文件系统，存储) + MapReduce(分布式计算，计算)</li>
</ul>

        <h3 id="HDFS-基础架构"   >
          <a href="#HDFS-基础架构" class="heading-link"><i class="fas fa-link"></i></a>HDFS 基础架构</h3>
      <img src=https://img-blog.csdnimg.cn/857dc270de074a08906a302480b4be11.png width=80% />

<ul>
<li>文件是按照数据块存储，而非整个文件作为存储单元。每个文件分成多个固定大小的存储块，存储在不同的节点上。</li>
<li>NameNode，管理文件系统的命名空间，存放文件元数据，维护文件系统所有文件和目录，文件与数据块的映射。</li>
<li>DataNode：存储并检索数据块，向name node 更新检索信息，是真正存数据的node。</li>
</ul>

        <h4 id="HDFS写流程"   >
          <a href="#HDFS写流程" class="heading-link"><i class="fas fa-link"></i></a>HDFS写流程</h4>
      <img src=https://img-blog.csdnimg.cn/3650c24be2284534af6a70f0fe4a501b.png width=70% />

<ol>
<li>client向NameNode发起写数据请求</li>
<li>Namenode分块写入DataNode，DataNode自动完成3副本备份。</li>
<li>DataNode向NameNode汇报存储完成。</li>
<li>Namenode通知client.</li>
</ol>

        <h4 id="HDFS读流程"   >
          <a href="#HDFS读流程" class="heading-link"><i class="fas fa-link"></i></a>HDFS读流程</h4>
      <img src=https://img-blog.csdnimg.cn/06a804af75454da0b74e10fd3a4d5397.png width=70% />

<ol>
<li>Client向NameNode发起读数据请求。</li>
<li>NameNode找出距离最近的DataNode节点信息，并将信息发送给Client。</li>
<li>Client从DataNode分块下载文件。</li>
</ol>

        <h4 id="实战HDFS操作"   >
          <a href="#实战HDFS操作" class="heading-link"><i class="fas fa-link"></i></a>实战HDFS操作</h4>
      <p>可以通过shell或者pytohn操作HDFS，进行文件的存储到HDFS，并下载。</p>

        <h3 id="MapReduce计算"   >
          <a href="#MapReduce计算" class="heading-link"><i class="fas fa-link"></i></a>MapReduce计算</h3>
      <p><img src="https://img-blog.csdnimg.cn/d26eab3837a344b2bc0ce936f535d1d2.png" alt="在这里插入图片描述"></p>
<p>Hadoop提供最基本的MapReduce计算模型。</p>
<ul>
<li>Map: 输入一个大文件，通过split，分成多个分片，到单独的机器去处理，Map任务完成后，会生成一些中间文件，这些中间文件将会作为Reduce的输入数据。</li>
<li>Reduce: 把各个机器Map的输出结果进行汇总并得到最终的结果。</li>
</ul>
<p>所以，<strong>Hadoop其实是一个生态，最主要的是存储HDFS+计算MapReduce，Hadoop本身的计算比较鸡肋，所以有了Spark计算引擎</strong>。</p>

        <h2 id="What-is-Hbase-？"   >
          <a href="#What-is-Hbase-？" class="heading-link"><i class="fas fa-link"></i></a>What is Hbase ？</h2>
      <ul>
<li>来源于Google的BigTable。</li>
<li>高可靠，高性能，面向列，可伸缩，<strong>实时读写</strong>的分布式数据库。</li>
<li>利用HDFS作为文件存储系统，支持MapReduce。</li>
<li>存储非结构化和半结构化数据。</li>
<li>基于Hadoop的数据库</li>
</ul>

        <h2 id="Hive"   >
          <a href="#Hive" class="heading-link"><i class="fas fa-link"></i></a>Hive ?</h2>
      
        <h3 id="what-is-数据仓库"   >
          <a href="#what-is-数据仓库" class="heading-link"><i class="fas fa-link"></i></a>what is 数据仓库 ?</h3>
      <p>数据仓库是将<strong>多个数据源</strong>的数据经过ETL处理后，按照一定的主题集成起来提供决策支持和联动分析应用的结构化数据环境。</p>
<p>ETL: Extract + Tranform + Load</p>

        <h3 id="什么是Hive"   >
          <a href="#什么是Hive" class="heading-link"><i class="fas fa-link"></i></a>什么是Hive</h3>
      <ul>
<li>是第一个基于Hadoop的sql处理引擎，是当前基于Hadoop构建数据仓的最常用方案，是对存储在HDFS的文件进行查询。</li>
<li>Hive是将文件数据映射成DB和table，库和表的元数据信息一般存在关系型数据库。</li>
<li>以MapReduce作为计算引擎，HDFS作为存储系统，提供超大数据的计算扩展能力。</li>
<li>Hive数据存储：Hive的数据是存储在HDFS上的，Hive的库和表是对HDFS上数据的映射。</li>
<li>Hive元数据存储:元数据存储是在外部关系库MySql</li>
<li>Hive SQL的执行过程：将HQL转成MapReduce任务，所以比较慢。而如今，Apache Hive还能够将查询转换Spark作业，提供运行速度。</li>
</ul>

        <h3 id="安装Hive"   >
          <a href="#安装Hive" class="heading-link"><i class="fas fa-link"></i></a>安装Hive</h3>
      <ol>
<li>下载hive</li>
<li>修改conf配置，指定数据存放的HDFS目录</li>
<li>下载mysql java</li>
<li>创建metastore schema</li>
<li>启动meatastore，show databases 可以看到default DB.</li>
</ol>

        <h3 id="Hive操作"   >
          <a href="#Hive操作" class="heading-link"><i class="fas fa-link"></i></a>Hive操作</h3>
      
        <h4 id="内表"   >
          <a href="#内表" class="heading-link"><i class="fas fa-link"></i></a>内表</h4>
      <p>导入数据时，将数据移动到hive指定的目录文件中，删除表时，数据也会删除；</p>
<p>建表：</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table1 (</span><br><span class="line">  id int,</span><br><span class="line">  name string,</span><br><span class="line">  interest array&lt;string&gt;,</span><br><span class="line">  score map&lt;string,string&gt;</span><br><span class="line"> )</span><br><span class="line">row format delimited fields terminated by &#39;,&#39;  --列分割</span><br><span class="line">collection items terminated by &#39;-&#39;             --array分割</span><br><span class="line">map keys terminated by &#39;:&#39;                     --map分割</span><br><span class="line">stored AS textfile;                            --保存</span><br></pre></td></tr></table></div></figure>
<p>import data:</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">load data local inpath &#39;&#x2F;opt&#x2F;data&#x2F;test&#39; overwrite into table table1;</span><br></pre></td></tr></table></div></figure>


        <h4 id="外表"   >
          <a href="#外表" class="heading-link"><i class="fas fa-link"></i></a>外表</h4>
      <p>建表时添加关键字external，并指定位置，删除表时不会删除源数据</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">create external table table2(</span><br><span class="line">id int,name string,interest array&lt;string&gt;,</span><br><span class="line">score map&lt;string,string&gt;)</span><br><span class="line">row format delimited fields terminated by &#39;,&#39;</span><br><span class="line">collection items terminated by &#39;-&#39;</span><br><span class="line">map keys terminated by &#39;:&#39; location &#39;&#x2F;testtable&#39;;</span><br><span class="line"></span><br><span class="line">desc formatted table2;</span><br></pre></td></tr></table></div></figure>

<p>Hive可以通过partition,bucket对海量数据进行区分。</p>

        <h3 id="列存储VS行存储"   >
          <a href="#列存储VS行存储" class="heading-link"><i class="fas fa-link"></i></a>列存储VS行存储</h3>
      <ul>
<li>行存储：是按照行来把数据存储到disk上，一般的用于app的元数据存储，因为要获取某一行的所有数据，这样如果有索引的话，可以通过索引直接知道对应的某一行在disk上的位置。</li>
<li>列存储，对于大数据而言，往往要进行数据分析，所以不太需要某一行的数据，更多的是某一列，比如：取分数前10名等。所以列存储，对于这种场景下，效率更高。</li>
</ul>

        <h2 id="Hbase-VS-Hive"   >
          <a href="#Hbase-VS-Hive" class="heading-link"><i class="fas fa-link"></i></a>Hbase VS Hive</h2>
      <p>名字看上去是很相似的，其实他们本质上是不一样的，一个是数据仓库，一个是数据库。</p>

        <h3 id="区别"   >
          <a href="#区别" class="heading-link"><i class="fas fa-link"></i></a>区别</h3>
      <ul>
<li>Hive，Hive是基于Hadoop的一个数据仓库工具，本身并不存储和计算数据，只是把sql转成MapReduce程序运行。</li>
<li>Hbase，是Hadoop的数据库，一个分布式、可扩展、大数据的存储。</li>
</ul>

        <h3 id="联系"   >
          <a href="#联系" class="heading-link"><i class="fas fa-link"></i></a>联系</h3>
      <p>Hbase和Hive在大数据架构中处在不同位置，Hbase主要解决实时数据查询问题，Hive主要解决数据处理和计算问题，一般是配合使用。</p>
<p>在大数据架构中，Hive和HBase是协作关系，数据流一般：</p>
<ol>
<li>通过ETL工具将数据源抽取到HDFS存储；</li>
<li>通过Hive清洗、处理和计算原始数据；</li>
<li>Hive清洗处理后的结果，如果是面向海量数据随机查询场景的可存入Hbasei，数据应用从HBase查询数据；</li>
<li>如果不是随机查询场景，可以直接从Hive中获取数据。</li>
</ol>

        <h2 id="参考"   >
          <a href="#参考" class="heading-link"><i class="fas fa-link"></i></a>参考</h2>
      <ul>
<li><span class="exturl"><a class="exturl__link"   href="https://www.imooc.com/video/16286" >https://www.imooc.com/video/16286</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://www.imooc.com/video/19271" >https://www.imooc.com/video/19271</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/333682189" >https://zhuanlan.zhihu.com/p/333682189</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
]]></content>
      <categories>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>BigData</tag>
      </tags>
  </entry>
  <entry>
    <title>编写可读代码的艺术--读书笔记</title>
    <url>/posts/6dbdfda/</url>
    <content><![CDATA[<blockquote>
<p>本书作者重点强调了代码的可读性对于软件开发的重要性，并提供了许多实用的建议和技巧，以帮助读者编写更加易于理解和维护的代码。此外，作者还提供了一些常见的代码陷阱和错误，并指出如何避免这些问题。</p>
</blockquote>
<a id="more"></a>

<p>摘抄部分经典的建议和句子:</p>
<ul>
<li>程序员之间的互相尊重体现在所写的代码中。写出的代码能让人快速理解、轻松维护才是专业的程序员。</li>
<li><strong>可读性</strong>基本原理：代码要写的<strong>容易理解</strong></li>
<li><strong>将信息装到名字</strong>中，变量、函数等的取名，要用表现力更好的word。多花点时间命名。</li>
<li><strong>审美</strong><ul>
<li>使用一致的布局</li>
<li>让相似的代码看上去相似。</li>
<li>让相关的代码分组，形成代码块。</li>
</ul>
</li>
<li><strong>写有意义的注释</strong>，写为什么，怎么做，做什么，用例子来说明。</li>
<li>简化循环和逻辑</li>
<li>变量<ul>
<li>减少非必要的变量</li>
<li>减少每个变量的作用域</li>
<li>只写一次的变量更好</li>
</ul>
</li>
<li><strong>一次/一个函数</strong>只做一件事</li>
<li>把想法变成代码<ul>
<li>爱因斯坦说过，<strong>如果你不能把一件事情解释给你祖母挺的话说明你还没有真正理解</strong>。</li>
</ul>
</li>
<li>让代码越少越好。<ul>
<li>测试应当具有可读性，以便其他程序员可以舒服的增加或改变测试。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>book</tag>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言精进之路--读书笔记</title>
    <url>/posts/acfd0598/</url>
    <content><![CDATA[<blockquote>
<p>主要是摘取书中，个人感觉比较重要的内容。</p>
</blockquote>

        <h2 id="第一部分-熟知Go的一切"   >
          <a href="#第一部分-熟知Go的一切" class="heading-link"><i class="fas fa-link"></i></a>第一部分 熟知Go的一切</h2>
      
        <h3 id="理解Go的设计哲学"   >
          <a href="#理解Go的设计哲学" class="heading-link"><i class="fas fa-link"></i></a>理解Go的设计哲学</h3>
      <ol>
<li><strong>追去简单，少就是多</strong>。Go设计者推崇最简单方式思维，事情仅有一种或者尽可能少的方式去完成。Go的复杂性被go设计者所隐藏。比方：通过大小写来说明是不是要暴露接口。</li>
<li><strong>水平和垂直组合</strong>。接口与实现之间隐士关联，包之间是相互独立的，没有子包概念。通过类型嵌入，快速让一个新类型复用其他类型已经实现的能力，实现功能<strong>垂直扩展</strong>。这似乎是其他语言没有实现的功能点。例子：<a id="more"></a>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/sync/pool.go</span></span><br><span class="line"><span class="keyword">type</span> poolLocal <span class="keyword">struct</span> &#123;</span><br><span class="line">    private <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    shared  []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    Mutex</span><br><span class="line">    pad     [<span class="number">128</span>]<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
poolLocal中嵌入了Mutex。所有poolLocal有了Mutex的Lock和Unlock方法，在实际调用中，方法调用会被传给poolLocal的Mutex实例。通过Interface实现水平组合，将程序各个部分组合在一起。通过Interface将程序各个部分组合在一起的方式，笔者称为<strong>水平组合</strong>。</li>
<li><strong>原生并发</strong>。面向多核的。传统的多线程是，操作系统对进程，线程进行调度，因此消耗资源多。而go是实现了自己一套goroutine，然后对操作系统而言只是调度了go，至于如何多线程是go关心的事情，go实现了自己的一套goroutine调度器。并发是将一个程序分解成多个小片段并且每个小片段都可以独立执行的程序设计方法。</li>
<li><strong>面向工程，自带电池</strong>。故意不支持默认函数参数，因为默认函数参数，会降低清晰度和可读性。并且标准库功能丰富，多数功能无需依赖第三方包。</li>
</ol>

        <h3 id="使用Go语言原生编程思维写Go代码"   >
          <a href="#使用Go语言原生编程思维写Go代码" class="heading-link"><i class="fas fa-link"></i></a>使用Go语言原生编程思维写Go代码</h3>
      <p>不能影响到你的编程思维方式的编程语言不值得学习和使用。Go语言的编程思维，会随着本书的阅读，越发清晰。</p>

        <h2 id="第二部分-项目结构、代码风格和标识符命名"   >
          <a href="#第二部分-项目结构、代码风格和标识符命名" class="heading-link"><i class="fas fa-link"></i></a>第二部分 项目结构、代码风格和标识符命名</h2>
      <ul>
<li>使用gofmt 对代码进行format。</li>
<li>Go官方要求标识符命名采用驼峰命名法。变量名不要带类型信息。</li>
<li>循环和条件变量多采用单个字母命名；</li>
<li>函数/方法的参数和返回值变量以单个单词或单个字母为主；</li>
<li>由于方法在调用时会绑定类型信息，因此方法的命名以单个单词为主；</li>
<li>函数多以多单词的复合词进行命名；类型多以多单词的复合词进行命名。</li>
<li>常量通常用大写的单词命名。</li>
<li>接口一般是 方法名 + er的命名</li>
</ul>

        <h2 id="第三部分-声明、类型、语句与控制结构"   >
          <a href="#第三部分-声明、类型、语句与控制结构" class="heading-link"><i class="fas fa-link"></i></a>第三部分 声明、类型、语句与控制结构</h2>
      <ol>
<li>使用iota实现枚举常量。</li>
<li>尽量定义零值可用的类型。Go语言每个原生类型都有默认值。整型：0，浮点类型：0.0，布尔: false，字符串: “”，指针，interface，slice, channel，map,function: nil。</li>
</ol>

        <h3 id="13-了解切片的底层原理"   >
          <a href="#13-了解切片的底层原理" class="heading-link"><i class="fas fa-link"></i></a>13 了解切片的底层原理</h3>
      <p>传递数组是指拷贝，切片之于数组，就像是文件描述符之于文件。Go语言中，数组承担的是底层存储空间的角色，切片则是为底层的数组打开了一个访问的窗口。所以，<strong>切片是数组的“描述符”。</strong></p>
<p>切片的内部表述：</p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$GOROOT/src/runtime/slice.go</span></span><br><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">    array unsafe.Pointer <span class="comment">// 指向下层数组的某元素的指针，该元素也是切片的起始元素。</span></span><br><span class="line">    <span class="built_in">len</span>   <span class="keyword">int</span> <span class="comment">// 切片的长度</span></span><br><span class="line">    <span class="built_in">cap</span>   <span class="keyword">int</span> <span class="comment">// 切片的最大容量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<p>假设创建一个切片实例: s:= make([]byte, 5)。运行时层面的内部表示如下：<br><img src="https://img-blog.csdnimg.cn/2d490b19e60743e79482cdd2517d2c11.png" width="300"></p>
<p>当切片作为函数参数传递给函数时，实际传递的是切片的内部表示，也就是runtime.slice结构，所以节省空间，没有数组的拷贝。</p>
<p>另外切片还有<strong>动态扩容</strong>的特性。动态扩容带来的是性能损耗，需要复制数组。因此，如果可以预估切片底层数组需要承载的元素数量，<strong>强烈建议在创建切片时带上cap参数</strong>。</p>

        <h3 id="14-了解Map实现原理并高效使用"   >
          <a href="#14-了解Map实现原理并高效使用" class="heading-link"><i class="fas fa-link"></i></a>14 了解Map实现原理并高效使用</h3>
      <p>Map不支持零值可用。Map也是引用类型，将map类型变量作为函数参数传入不会有很大的性能损耗。</p>
<p>最佳实践是总是使用comma ok 惯用法来读取map中的值。</p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">v, ok := m[<span class="string">&quot;key&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">	<span class="comment">// key 不在map中</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(v)</span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">&quot;key2&quot;</span>) <span class="comment">// 即使删除的数据在map中不存在，delete也不会导致panic</span></span><br></pre></td></tr></table></div></figure>
<p>map不支持并发读写。并且尽量使用cap参数类创建map。</p>

        <h3 id="15-string类型"   >
          <a href="#15-string类型" class="heading-link"><i class="fas fa-link"></i></a>15. string类型</h3>
      <p>string类型底层存储。<br><img src="https://img-blog.csdnimg.cn/2d496a4678194dc1abf30bc3f3962a74.png" width="300"></p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/runtime/string.go</span></span><br><span class="line"><span class="keyword">type</span> stringStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">    str unsafe.Pointer</span><br><span class="line">    <span class="built_in">len</span> <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<p>sring类型是一个描述符，本身并不真正存储数据，而是由一个指向底层存储的指针和字符串长度组成。</p>
<p>string类型通过函数/方法参数传入也不会有太多的损耗，因为传入的仅仅是一个“描述符”，而不是真正的字符串数据。</p>
<p>byte string 相互转换:</p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line">s := <span class="string">&quot;haofan&quot;</span></span><br><span class="line">byteS := []<span class="keyword">byte</span>(s)</span><br><span class="line">h := <span class="keyword">string</span>(byteS)</span><br></pre></td></tr></table></div></figure>


        <h3 id="16-理解Go语言的包导入"   >
          <a href="#16-理解Go语言的包导入" class="heading-link"><i class="fas fa-link"></i></a>16. 理解Go语言的包导入</h3>
      <ol>
<li>Go 程序构建过程。先编译成.a文件，再把.a文件，链接成.o文件。</li>
<li>Go包导入语句中import后面的部分是一个路径，路径的最后一个分段是目录名而不是包名。</li>
</ol>

        <h3 id="17-理解Go语言表达式的求值顺序"   >
          <a href="#17-理解Go语言表达式的求值顺序" class="heading-link"><i class="fas fa-link"></i></a>17 理解Go语言表达式的求值顺序</h3>
      <ol>
<li>包级别变了初始化，按照变量声明先后顺序进行，a = b  + c ，则是从c开始算。</li>
<li>Go规定表达式操作数中的所有函数、方法以及channel操作从左到右的次序进行求值。</li>
<li>另外，赋值语句求值，是按照从左到右的顺序对变量进行赋值。</li>
</ol>

        <h3 id="19-了解控制语句惯用法"   >
          <a href="#19-了解控制语句惯用法" class="heading-link"><i class="fas fa-link"></i></a>19 了解控制语句惯用法</h3>
      <ol>
<li>使用if语句遵循快乐路径原则。所谓，快乐路径：<ul>
<li>出现错误时，快速返回。成功逻辑，不要嵌入if-else中，返回值一般在函数最后一行。</li>
</ul>
</li>
<li>for range 闭坑。用短变量 := 赋值，</li>
<li>参与迭代的是range表达式的副本，所以如果在range语句内，修改数组值，则原数组不变。如果要修改数组，则需要用数组指针。<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// chapter3/sources/control_structure_idiom_2.go</span></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pointerToArrayRangeExpression</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> a = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">   <span class="keyword">var</span> r [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">   fmt.Println(<span class="string">&quot;pointerToArrayRangeExpression result:&quot;</span>)</span><br><span class="line">   fmt.Println(<span class="string">&quot;a = &quot;</span>, a)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i, v := <span class="keyword">range</span> &amp;a &#123;</span><br><span class="line">       <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">           a[<span class="number">1</span>] = <span class="number">12</span></span><br><span class="line">           a[<span class="number">2</span>] = <span class="number">13</span></span><br><span class="line">       &#125;</span><br><span class="line">       r[i] = v</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   fmt.Println(<span class="string">&quot;r = &quot;</span>, r)</span><br><span class="line">   fmt.Println(<span class="string">&quot;a = &quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li>
<li>break 语句跳到哪里。是跳到同一函数内break语句所在的最内层的for, switch或select的执行。go 是可以通过定义label的方式，指定break到哪里？</li>
</ol>

        <h2 id="第四部分-函数和方法"   >
          <a href="#第四部分-函数和方法" class="heading-link"><i class="fas fa-link"></i></a>第四部分 函数和方法</h2>
      
        <h3 id="20-包级别的init函数"   >
          <a href="#20-包级别的init函数" class="heading-link"><i class="fas fa-link"></i></a>20. 包级别的init函数</h3>
      <p>main包中，Go运行时，会按照常量-&gt;变量-&gt;init函数的顺序进行初始化。</p>
<p>init函数特点: 运行时调用、顺序、仅执行一次。通过init函数的注册模式:</p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">    _ <span class="string">&quot;github.com/lib/pq&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    db, err := sql.Open(<span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;user=pqgotest dbname=pqgotest sslmode=verify-full&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    age := <span class="number">21</span></span><br><span class="line">    rows, err := db.Query(<span class="string">&quot;SELECT name FROM users WHERE age = $1&quot;</span>, age)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<p>神奇的地方是，在import pg package后，似乎没有地方调用，奥秘全在:</p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// github.com/lib/pq/conn.go</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sql.Register(<span class="string">&quot;postgres&quot;</span>, &amp;Driver&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></div></figure>
<p>pg包的Init函数执行后，pg包将自己实现的dirver注册到sql包中。这样，在应用层代码在打开数据库的时候传入驱动的名字(postgress)，通过sql.Open返回的句柄，就是pg这个驱动的相应实现。</p>

        <h3 id="21-让自己习惯于函数是一等公民"   >
          <a href="#21-让自己习惯于函数是一等公民" class="heading-link"><i class="fas fa-link"></i></a>21. 让自己习惯于函数是一等公民</h3>
      <p> 如果一门编程语言对某种语言元素的创建和使用没有限制，我们可以像对待value一样对待这种语法元素，那么我们就称这种语法元素是这门编程语言的”一等公民”。</p>
<p>满足的条件成为一等公民（像普通整型值那样被创建和使用）：</p>
<ul>
<li>在函数内创建，也就是在函数内定义一个新的函数。</li>
<li>作为类型，使用函数来自定义类型。type HandlerFunc func(ReponseWriter, *Request)</li>
<li>存储到变量中。</li>
<li>作为参数传入函数。</li>
<li>作为返回值从函数返回。</li>
</ul>
<p>例子: </p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greeting</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;Welcome, Gopher!\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, http.HandlerFunc(greeting))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListenAndServe</span><span class="params">(addr <span class="keyword">string</span>, handler Handler)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    server := &amp;Server&#123;Addr: addr, Handler: handler&#125;</span><br><span class="line">    <span class="keyword">return</span> server.ListenAndServe()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $GOROOT/src/net/http/server.go</span></span><br><span class="line"><span class="comment">// HandlerFunc是一个机遇函数定义的新类型，它的底层类型为func(ResponseWriter, *Request)，该类型有一个方法是ServeHTTP</span></span><br><span class="line"><span class="comment">// 因而实现了Handler接口。http.HandlerFunc(greeting)这句代码的真正含义</span></span><br><span class="line"><span class="comment">// 是将函数greeting显式转换为HandlerFunc类型，而后者实现了Handler接口</span></span><br><span class="line"><span class="comment">// 这样转型后的greeting就满足了ListenAndServe函数第二个参数的要求。</span></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(ResponseWriter, *Request)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ServeHTTP调用f(w, r)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f HandlerFunc)</span> <span class="title">ServeHTTP</span><span class="params">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class="line">    f(w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口handler</span></span><br><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">    ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="22-使用defer让函数更简单更健壮"   >
          <a href="#22-使用defer让函数更简单更健壮" class="heading-link"><i class="fas fa-link"></i></a>22. 使用defer让函数更简单更健壮</h3>
      <p>按照后进先出的顺序，调度执行defer</p>

        <h3 id="23-理解方法的本质以及选择正确的receiver类型"   >
          <a href="#23-理解方法的本质以及选择正确的receiver类型" class="heading-link"><i class="fas fa-link"></i></a>23 理解方法的本质以及选择正确的receiver类型</h3>
      <p>方法和函数的区别是，方法需要有receiver。</p>
<p>Go方法的本质：一个以方法所绑定类型实例为第一个参数的普通函数。</p>
<p>如果没有对类型实例修改的需求，那么为receiver选择T类型或<em>T类型均可；但考虑到Go方法调用时，receiver是以值复制的形式传入方法中的，如果类型的size较大，以值形式传入会导致较大损耗，这时选择</em>T作为receiver类型会更好些。</p>

        <h3 id="24-方法集合决定接口实现"   >
          <a href="#24-方法集合决定接口实现" class="heading-link"><i class="fas fa-link"></i></a>24 方法集合决定接口实现</h3>
      <p>Go语言的一个创新是，自定义类型与接口之间的实现关系是松耦合的。如果某个自定义类型T的方法集合是某个接口类型方法集合的超集，那么就说类型T实现了该接口，并且类型T的变量可以被赋值给该接口类型的变量，也就是方法集合决定接口实现。</p>
<p>类型T的方法集合是以T为receiver类型的所有方法的集合，类型<em>T的方法集合是以</em>T为receiver类型的所有方法的集合与类型T方法集合的并集；</p>

        <h3 id="25-变长参数函数的妙用"   >
          <a href="#25-变长参数函数的妙用" class="heading-link"><i class="fas fa-link"></i></a>25. 变长参数函数的妙用</h3>
      <p>什么是变长参数函数：</p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(args ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> total <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> args &#123;</span><br><span class="line">		total += v</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<p>Go 语言不支持函数重载，那通过变长函数如何实现呢？ 如下。同样也可以通过变长函数实现默认参数，但是这种做法其实比较丑陋。</p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// chapter4/sources/variadic_function_5.go</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">concat</span><span class="params">(sep <span class="keyword">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> args &#123;</span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">0</span> &#123;</span><br><span class="line">            result += sep</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> v.(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">int</span>, <span class="keyword">int8</span>, <span class="keyword">int16</span>, <span class="keyword">int32</span>, <span class="keyword">int64</span>,</span><br><span class="line">            <span class="keyword">uint</span>, <span class="keyword">uint8</span>, <span class="keyword">uint16</span>, <span class="keyword">uint32</span>, <span class="keyword">uint64</span>:</span><br><span class="line">            result += fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, v)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">            result += fmt.Sprintf(<span class="string">&quot;%s&quot;</span>, v)</span><br><span class="line">        <span class="keyword">case</span> []<span class="keyword">int</span>:</span><br><span class="line">            ints := v.([]<span class="keyword">int</span>)</span><br><span class="line">            <span class="keyword">for</span> i, v := <span class="keyword">range</span> ints &#123;</span><br><span class="line">                <span class="keyword">if</span> i != <span class="number">0</span> &#123;</span><br><span class="line">                    result += sep</span><br><span class="line">                &#125;</span><br><span class="line">                result += fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, v)</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> []<span class="keyword">string</span>:</span><br><span class="line">            strs := v.([]<span class="keyword">string</span>)</span><br><span class="line">            result += strings.Join(strs, sep)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.Printf(<span class="string">&quot;the argument type [%T] is not supported&quot;</span>, v)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(concat(<span class="string">&quot;-&quot;</span>, <span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="built_in">println</span>(concat(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;gopher&quot;</span>))</span><br><span class="line">    <span class="built_in">println</span>(concat(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">1</span>, <span class="keyword">uint32</span>(<span class="number">2</span>),</span><br><span class="line">        []<span class="keyword">int</span>&#123;<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;, <span class="number">17</span>,</span><br><span class="line">        []<span class="keyword">string</span>&#123;<span class="string">&quot;robot&quot;</span>, <span class="string">&quot;ai&quot;</span>, <span class="string">&quot;ml&quot;</span>&#125;,</span><br><span class="line">        <span class="string">&quot;hacker&quot;</span>, <span class="number">33</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p> 功能选项模式：</p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// chapter4/sources/variadic_function_9.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FinishedHouse <span class="keyword">struct</span> &#123;</span><br><span class="line">    style                  <span class="keyword">int</span>    <span class="comment">// 0: Chinese; 1: American; 2: European</span></span><br><span class="line">    centralAirConditioning <span class="keyword">bool</span>   <span class="comment">// true或false</span></span><br><span class="line">    floorMaterial          <span class="keyword">string</span>  <span class="comment">// &quot;ground-tile&quot;或&quot;wood&quot;</span></span><br><span class="line">    wallMaterial           <span class="keyword">string</span> <span class="comment">// &quot;latex&quot;或&quot;paper&quot;或&quot;diatom-mud&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Option <span class="function"><span class="keyword">func</span><span class="params">(*FinishedHouse)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFinishedHouse</span><span class="params">(options ...Option)</span> *<span class="title">FinishedHouse</span></span> &#123;</span><br><span class="line">    h := &amp;FinishedHouse&#123;</span><br><span class="line">        <span class="comment">// default options</span></span><br><span class="line">        style:                  <span class="number">0</span>,</span><br><span class="line">        centralAirConditioning: <span class="literal">true</span>,</span><br><span class="line">        floorMaterial:          <span class="string">&quot;wood&quot;</span>,</span><br><span class="line">        wallMaterial:           <span class="string">&quot;paper&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, option := <span class="keyword">range</span> options &#123;</span><br><span class="line">        option(h)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithStyle</span><span class="params">(style <span class="keyword">int</span>)</span> <span class="title">Option</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(h *FinishedHouse)</span></span> &#123;</span><br><span class="line">        h.style = style</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithFloorMaterial</span><span class="params">(material <span class="keyword">string</span>)</span> <span class="title">Option</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(h *FinishedHouse)</span></span> &#123;</span><br><span class="line">        h.floorMaterial = material</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithWallMaterial</span><span class="params">(material <span class="keyword">string</span>)</span> <span class="title">Option</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(h *FinishedHouse)</span></span> &#123;</span><br><span class="line">        h.wallMaterial = material</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithCentralAirConditioning</span><span class="params">(centralAirConditioning <span class="keyword">bool</span>)</span> <span class="title">Option</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(h *FinishedHouse)</span></span> &#123;</span><br><span class="line">        h.centralAirConditioning = centralAirConditioning</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%+v\n&quot;</span>, NewFinishedHouse()) <span class="comment">// 使用默认选项</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%+v\n&quot;</span>, NewFinishedHouse(WithStyle(<span class="number">1</span>),</span><br><span class="line">        WithFloorMaterial(<span class="string">&quot;ground-tile&quot;</span>),</span><br><span class="line">        WithCentralAirConditioning(<span class="literal">false</span>)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h2 id="第五部分-接口"   >
          <a href="#第五部分-接口" class="heading-link"><i class="fas fa-link"></i></a>第五部分 接口</h2>
      <p>Go语言推崇面向组合编程，接口是组合编程的重要手段。接口是Go这门静态类型语言中唯一“动静兼备”的语言特性。</p>
<p>当一个接口类型变量被赋值时，编译器会检查右值的类型是否实现了该接口方法集合中的所有方法。</p>
<p>接口类型变量在程序运行时可以被赋值为不同的动态类型变量，从而支持运行时多态。</p>

        <h3 id="26-了解接口类型变量的内部表示"   >
          <a href="#26-了解接口类型变量的内部表示" class="heading-link"><i class="fas fa-link"></i></a>26 了解接口类型变量的内部表示</h3>
      <p>接口类型变量在运行时表示为eface和iface，eface用于表示空接口类型变量，iface用于表示非空接口类型变量；当且仅当两个接口类型变量的类型信息（eface._type/iface.tab._type）相同，且数据指针（eface.data/iface.data）所指数据相同时，两个接口类型才是相等的；通过println可以输出接口类型变量的两部分指针变量的值；可通过复制runtime包eface和iface相关类型源码，自定义输出eface/iface详尽信息的函数；接口类型变量的装箱操作由Go编译器和运行时共同完成。</p>

        <h3 id="27-尽量定义小接口"   >
          <a href="#27-尽量定义小接口" class="heading-link"><i class="fas fa-link"></i></a>27 尽量定义小接口</h3>
      <p>Go语言中接口与实现之间是隐式的，实现者仅需实现接口方法集中的全部方法，便算是自动遵守了契约，实现了该接口。接口的方法数量尽量控制在1~3个。</p>
<p>小接口优势:</p>
<ol>
<li>接口越小，抽象度越高，被接纳度越高</li>
<li>易于实现和测试。</li>
<li>契约职责单一，易于复用组合。</li>
</ol>

        <h3 id="29-使用接口作为程序水平组合的连接点"   >
          <a href="#29-使用接口作为程序水平组合的连接点" class="heading-link"><i class="fas fa-link"></i></a>29 使用接口作为程序水平组合的连接点</h3>
      <p>如果说C++和Java是关于类型层次结构和类型分类的语言，那么Go则是关于组合的语言。 — Rob Pike Go语言之父</p>
<p>Go的组合方式:</p>
<ul>
<li>垂直组合。Go通过类型嵌入机制实现垂直组合，进而实现方法实现的复用、接口定义重用等。</li>
<li>水平组合。Go程序以接口类型变量作为程序水平组合的连接点。接口好比人体的关节，连接人体不同的部分。</li>
</ul>
<p>以接口为连接点的水平组合的几种形式：</p>
<ol>
<li>基本形式。接受接口类型参数的函数和方法。<code>func YourFuncName(param InterfaceType)</code></li>
<li>包裹函数。接受接口类型参数，并返回与其参数类型相同的返回值。<code>func  YourWrapperFunc(param InterfaceType) InterfaceType</code>通过包裹函数可以实现对输入数据的过滤，装饰，变换等操作，并将结果再次返回给调用者。<br>例子：</li>
</ol>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// chapter5/sources/horizontal-composition-2.go</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CapReader</span><span class="params">(r io.Reader)</span> <span class="title">io</span>.<span class="title">Reader</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;capitalizedReader&#123;r: r&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> capitalizedReader <span class="keyword">struct</span> &#123;</span><br><span class="line">    r io.Reader</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *capitalizedReader)</span> <span class="title">Read</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">    n, err := r.r.Read(p)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q := bytes.ToUpper(p)</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> q &#123;</span><br><span class="line">        p[i] = v</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := strings.NewReader(<span class="string">&quot;hello, gopher!\n&quot;</span>)</span><br><span class="line">    r1 := CapReader(io.LimitReader(r, <span class="number">4</span>))</span><br><span class="line">    <span class="keyword">if</span> _, err := io.Copy(os.Stdout, r1); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<ol start="3">
<li>适配器函函数类型。</li>
<li>中间件。在Go web中，常常指的是一个实现了http.Handler接口的http.HandlerFunc类型实例。</li>
</ol>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// chapter5/sources/horizontal-composition-4.go</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">validateAuth</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s != <span class="string">&quot;123456&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;bad auth token&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greetings</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintf(w, <span class="string">&quot;Welcome!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logHandler</span><span class="params">(h http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        t := time.Now()</span><br><span class="line">        log.Printf(<span class="string">&quot;[%s] %q %v\n&quot;</span>, r.Method, r.URL.String(), t)</span><br><span class="line">        h.ServeHTTP(w, r)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">authHandler</span><span class="params">(h http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        err := validateAuth(r.Header.Get(<span class="string">&quot;auth&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            http.Error(w, <span class="string">&quot;bad auth param&quot;</span>, http.StatusUnauthorized)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        h.ServeHTTP(w, r)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, logHandler(authHandler(http.HandlerFunc(greetings))))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>另外使用接口接口可以降低耦合，从而更好的方便代码测试。 <span class="exturl"><a class="exturl__link"   href="https://github.com/bigwhite/GoProgrammingFromBeginnerToMaster/tree/main/chapter5/sources/send_mail_with_disclaimer/v2" >例子</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h2 id="第六部分-并发编程"   >
          <a href="#第六部分-并发编程" class="heading-link"><i class="fas fa-link"></i></a>第六部分 并发编程</h2>
      
        <h3 id="31-优先考虑并发设计"   >
          <a href="#31-优先考虑并发设计" class="heading-link"><i class="fas fa-link"></i></a>31 优先考虑并发设计</h3>
      <p>并发不是并行，并发关乎结构，并行关乎执行 – Rob Pike</p>
<p><strong>并发与并行区别</strong>：</p>
<ul>
<li>并行方案：处理器核数充足的情况下启动多个单线程应用的实例，这样每个实例运行在一个核上。这种方案是有约束的，对于不支持在同一环境下部署多实例。</li>
<li>并发方案：并发是重新做应用结构设计，将应用分解成多个基本执行单元中执行。应用内部拆分成多个可独立运行的模块。这样虽然应用仍然以单例方法运行，但其中内部模块都运行一个单独的操作系统线程中，多核资源得以充分利用。<br><img src="https://img-blog.csdnimg.cn/b9ebbb99181445a7a3428c53427f4c9a.png" alt="在这里插入图片描述"></li>
</ul>
<p>传统编程语言，是基于多线程模型设计的，是以操作系统线程作为承载分解后的代码片段的执行单元，由操作系统执行调度。</p>
<p>而Go语言并未使用操作系统线程作为承载分解后的代码片段的基本执行单元，而是实现了goroutine这一由go运行时负责调度的用于层轻量级线程提供原生支持。goroutine相比传统操作系统线程的优势：</p>
<ol>
<li>资源占用小。每个goroutine初始栈大小仅为2KB。</li>
<li>Goroutine上下文切换代价小。</li>
<li>语言原生支持。又go关键字。</li>
<li>语言内置channel，作为goroutine通信机制。</li>
</ol>
<p>因为Go是面向并发而生的，应用设计阶段，优先考虑并发。</p>
<p>典型例子： <span class="exturl"><a class="exturl__link"   href="https://github.com/bigwhite/GoProgrammingFromBeginnerToMaster/blob/main/chapter6/sources/concurrency-design-airport-securitycheck-3.go" >link</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="32-了解goroutine的调度原理"   >
          <a href="#32-了解goroutine的调度原理" class="heading-link"><i class="fas fa-link"></i></a>32 了解goroutine的调度原理</h3>
      <p>Go运行时负责对goroutine进行调度，调度就是决定何时哪个goroutine将获得资源开始执行，哪个goroutine应该停止执行让出资源等。</p>
<p>GPM调度模型：<br><img src="https://img-blog.csdnimg.cn/ea08f0d9f6fc452fa5d626e99030afdd.png" alt="在这里插入图片描述"><br>其中，P是一个逻辑处理器，每个G要想真正运行起来，首先需要被分配一个P，即进入P的本地运行队列中。对于G来说，P就是运行它的CPU。但从goroutine调度来说，真正的CPU是M，只有将P和M绑定才能让P本地运行队列中的G真正运行起来。</p>
<ul>
<li>G: 代表goroutine，存储了goroutine的执行栈信息，goroutine状态以及任务函数等。</li>
<li>P：代表processor，p的数量决定了系统内最大可并行的G的数量。</li>
<li>M：代表真正的执行计算资源。在绑定有效的P后，进行一个调度循环。调度循环的机制大致是从各种队列、P的本地队列中获取G，然后执行G的函数。</li>
</ul>
<p>问题：为什么在死循环的情况下，多个goroutine依旧会被调度并轮流执行 ？ </p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// chapter6/sources/go-scheduler-model-case1.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deadloop</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> deadloop()</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">        fmt.Println(<span class="string">&quot;I got scheduled!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$<span class="keyword">go</span> run <span class="keyword">go</span>-scheduler-model-case1.<span class="keyword">go</span></span><br><span class="line">I got scheduled!</span><br><span class="line">I got scheduled!</span><br><span class="line">I got scheduled!</span><br><span class="line">...</span><br></pre></td></tr></table></div></figure>
<p>因为P的数量是CPU的核数，上面的例子启动后，创建了两个P，main goroutine一个P，for loop一个P，所以会执行。</p>

        <h3 id="33-掌握Go并发模型和常见的并发模式"   >
          <a href="#33-掌握Go并发模型和常见的并发模式" class="heading-link"><i class="fas fa-link"></i></a>33 掌握Go并发模型和常见的并发模式</h3>
      <p>传统编程语言是基于共享内存的并发模型。Go语言是通过channel来实现。</p>
<p>Go的并发原语：</p>
<ul>
<li>goroutine: 封装了数据的处理逻辑，是go运行时调度的基本执行单元。</li>
<li>channel: 用于goroutine之间的通信和同步。</li>
<li>select: 用于应对多路输入、输出，可以让goroutine同时协调处理多个channel操作</li>
</ul>
<p>1 等待一个goroutine的退出， <span class="exturl"><a class="exturl__link"   href="https://github.com/bigwhite/GoProgrammingFromBeginnerToMaster/blob/main/chapter6/sources/go-concurrency-pattern-1.go" >例子</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。mian goroutine在创建完新的goroutine后，便在channel上阻塞等待，直到新goroutine退出前向该channel发送了一个信号。</p>
<p>2 等待多个goroutine的退出，<span class="exturl"><a class="exturl__link"   href="https://github.com/bigwhite/GoProgrammingFromBeginnerToMaster/blob/main/chapter6/sources/go-concurrency-pattern-3.go" >例子</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。通过sync.WaitGroup方法</p>
<p>3 支持超时机制的等待。通过timer</p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// chapter6/sources/go-concurrency-pattern-4.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    done := spawnGroup(<span class="number">5</span>, worker, <span class="number">30</span>)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;spawn a group of workers&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    timer := time.NewTimer(time.Second * <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">defer</span> timer.Stop()</span><br><span class="line">    <span class="comment">// 通过select原语同时监听timer.C和done两个channel，哪个先返回数据就执行哪个case 分支</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-timer.C:</span><br><span class="line">        <span class="built_in">println</span>(<span class="string">&quot;wait group workers exit timeout!&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> &lt;-done:</span><br><span class="line">        <span class="built_in">println</span>(<span class="string">&quot;group workers done&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="34-Channel-的理解"   >
          <a href="#34-Channel-的理解" class="heading-link"><i class="fas fa-link"></i></a>34 Channel 的理解</h3>
      <p>channel是go的一等公民。我们可以像使用普通变量那样使用channel。</p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)    <span class="comment">// 创建一个无缓冲(unbuffered)的int类型的channel</span></span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">5</span>) <span class="comment">// 创建一个带缓冲的int类型的channel</span></span><br><span class="line">c &lt;- x        <span class="comment">// 向channel c中发送一个值</span></span><br><span class="line">&lt;- c          <span class="comment">// 从channel c中接收一个值</span></span><br><span class="line">x = &lt;- c      <span class="comment">// 从channel c接收一个值并将其存储到变量x中</span></span><br><span class="line">x, ok = &lt;- c  <span class="comment">// 从channel c接收一个值。若channel关闭了，ok将被置为false</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> c &#123; ... &#125; <span class="comment">// 将for range与channel结合使用</span></span><br><span class="line"><span class="built_in">close</span>(c)      <span class="comment">// 关闭channel c</span></span><br><span class="line"></span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">chan</span> <span class="keyword">int</span>) <span class="comment">// 创建一个无缓冲的chan int类型的channel</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stream</span><span class="params">(ctx context.Context, out <span class="keyword">chan</span>&lt;- Value)</span> <span class="title">error</span> // 将只发送<span class="params">(send-only)</span> <span class="title">channel</span>作为函数参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">spawn</span><span class="params">(...)</span> &lt;-<span class="title">chan</span> <span class="title">T</span> // 将只接收<span class="params">(receive-only)</span>类型<span class="title">channel</span>作为返回值</span></span><br></pre></td></tr></table></div></figure>
<p>当需同时对多个channel进行操作时，会使用select。通过select，可以同时在多个channel上进行发送、接收操作。</p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> x := &lt;-c1: <span class="comment">// 从channel c1接收数据</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> y, ok := &lt;-c2: <span class="comment">// 从channel c2接收数据，并根据ok值判断c2是否已经关闭</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> c3 &lt;- z: <span class="comment">// 将z值发送到channel c3中</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">// 当上面case中的channel通信均无法实施时，执行该默认分支</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>收发操作：</p>
<ol>
<li>channel的收发操作都是向左的箭头<code>(&lt;-)，data = &lt;- chanX</code>，表示向从channel里接收数据。<code>chanX &lt;- data</code> 表示发送数据到channel。</li>
<li>读出操作可以是<code>data := &lt;-chanX 、 data = &lt;-chanX 、 _ = &lt;-chanX 、 &lt;-chanX、 、 data, ok := &lt;-chanX</code></li>
</ol>
<p>Channel具有先进先出(FIFO)的性质，内部确定使用了循环队列。</p>
<ul>
<li>buffered channel, <code>chanX := make(chan int, 3)</code>. 当发送者向channel发送数据而接收者还没有就绪时，如果buffer未满，就会将数据放入buffer；</li>
<li>unbuffered channel, <code>chanX := make(chan int)</code>. 由于没有暂存数据的地方，unbuffered channel的数据传输只能是同步的，即只有读写双方都就绪时，通信才能成功。如果一方没有ready，则会阻塞。</li>
</ul>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line">mychan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Send 100&quot;</span>)</span><br><span class="line">	mychan &lt;- <span class="number">100</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;Has sent&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line"># 如果comment下面的代码，则只会输出<span class="string">&quot;Send 100&quot;</span>，因为channel被阻塞了。</span><br><span class="line">&lt;-mychan</span><br><span class="line">time.Sleep(time.Second * time.Duration(<span class="number">1</span>))</span><br></pre></td></tr></table></div></figure>
<p>发送步骤：</p>
<ol>
<li>如果存在阻塞等待的接收者(goroutine)，那么直接将待发送的数据交给”等待接收队列”中的第一个goroutine。</li>
<li>如果不存在。若buffer还有空间，则将待发送的数据送到buffer的队尾。若buffer没有空间，则将发送者(goroutine)和要发送的数据打包成一个struct，加入到等待发送队列的队尾，同时将该发送者block。</li>
</ol>
<p>接收步骤:<br>3.  如果存在阻塞等待的发送者。若buffer已满，从buffer中取出首元素交给接收者，同时将对应的goroutine唤醒。若没有buffer，从等待发送队列中取出对首元素，将要发送的数据copy给接收者，并将goroutine唤醒。<br>4. 如果没有在阻塞等待的发送者。若buffer有数据，则取出首元素给接收者。若buffer空，那么将接收者block。</p>
<p>for range 读取select：<br>5. 如果发送端不是一直发数据，且没有关闭channel，那么，for range读取会陷入block，道理很简单，没有数据可读了。所以，要么您能把控全局，确保您的for range读取不会block；要么，别用for range读channel。<br>6. select不是loop，当它select了一个case执行后，整个select就结束了。所以，如果想要一直select，那就在select外层加上for吧。 </p>

        <h3 id="35-了解sync包的正确用法"   >
          <a href="#35-了解sync包的正确用法" class="heading-link"><i class="fas fa-link"></i></a>35 了解sync包的正确用法</h3>
      <p>Go语言在提供CSP并发模型原语的同时，还通过sync包提供了传统的基于共享内存并发模型的基本同步原语。包括sync.Mutex(互斥锁)，sync.RWMutex(读写锁),sync.Cond(条件变量)。</p>
<p>可以使用sync.Once实现单例模式。</p>

        <h2 id="第七部分-错误处理"   >
          <a href="#第七部分-错误处理" class="heading-link"><i class="fas fa-link"></i></a>第七部分 错误处理</h2>
      <p>写出高质量的Go代码，我们需要始终想着错误处理。</p>

        <h3 id="37-了解错误处理的4种策略"   >
          <a href="#37-了解错误处理的4种策略" class="heading-link"><i class="fas fa-link"></i></a>37 了解错误处理的4种策略</h3>
      <p>构造错误值。任何实现了Error() string方法类型的实例均可作为错误复制给error 接口变量。</p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line">err := errors.New(<span class="string">&quot;your first demo error&quot;</span>)</span><br><span class="line">errWithCtx = fmt.Errorf(<span class="string">&quot;index %d is out of bounds&quot;</span>, i)</span><br><span class="line">wrapErr = fmt.Errorf(<span class="string">&quot;wrap error: %w&quot;</span>, err) <span class="comment">// 仅Go 1.13及后续版本可用</span></span><br></pre></td></tr></table></div></figure>
<ol>
<li>透明错误处理策略。不关心返回错误值携带的具体上下文信息，只要发生错误就进入唯一的错误处理执行路径。80%都是这种错误处理策略。</li>
</ol>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line">err := doSomething()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// 不关心err变量底层错误值所携带的具体上下文信息</span></span><br><span class="line">    <span class="comment">// 执行简单错误处理逻辑并返回</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<ol start="2">
<li>哨兵 错误处理策略</li>
</ol>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/bufio/bufio.go</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    ErrInvalidUnreadByte = errors.New(<span class="string">&quot;bufio: invalid use of UnreadByte&quot;</span>)</span><br><span class="line">    ErrInvalidUnreadRune = errors.New(<span class="string">&quot;bufio: invalid use of UnreadRune&quot;</span>)</span><br><span class="line">    ErrBufferFull        = errors.New(<span class="string">&quot;bufio: buffer full&quot;</span>)</span><br><span class="line">    ErrNegativeCount     = errors.New(<span class="string">&quot;bufio: negative count&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理代码</span></span><br><span class="line">data, err := b.Peek(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> err &#123;</span><br><span class="line">    <span class="keyword">case</span> bufio.ErrNegativeCount:</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">case</span> bufio.ErrBufferFull:</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">case</span> bufio.ErrInvalidUnreadByte:</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := doSomething(); err == bufio.ErrBufferFull &#123;</span><br><span class="line">    <span class="comment">// 处理缓冲区满的错误情况</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<ol start="3">
<li>错误值类型检视策略</li>
<li>错误行为特征检视策略</li>
</ol>

        <h3 id="38-尽量优化反复出现的if-err-nil"   >
          <a href="#38-尽量优化反复出现的if-err-nil" class="heading-link"><i class="fas fa-link"></i></a>38 尽量优化反复出现的if err != nil</h3>
      <p>优化反复出现的if err != nil代码块的根本目的是让错误检查和处理较少，不要干扰正常业务代码，让正常业务代码更具视觉连续性。大致有两个努力的方向。</p>
<ol>
<li>改善代码的视觉呈现。</li>
</ol>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SomeFunc</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    err := doStuff1()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 处理错误</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    err = doStuff2()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 处理错误</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    err = doStuff3()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 处理错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<ol start="2">
<li>重构：减少if err != nil 的重复次数</li>
<li>内置error 状态</li>
</ol>

        <h3 id="39-不要使用panic进行正常的错误处理"   >
          <a href="#39-不要使用panic进行正常的错误处理" class="heading-link"><i class="fas fa-link"></i></a>39 不要使用panic进行正常的错误处理</h3>
      ]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>book</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么精英都是时间控 -- 读书笔记</title>
    <url>/posts/f652151a/</url>
    <content><![CDATA[<p>通过正确的做法提高自己的专注力，排除杂念，提高效率。</p>
<a id="more"></a>


        <h1 id="关于本书以及作者"   >
          <a href="#关于本书以及作者" class="heading-link"><i class="fas fa-link"></i></a>关于本书以及作者</h1>
      <p>突然在微信阅读推荐中，读到此书，文章中讲的很多和自己的实践不谋而合，进一步证实了自己的一些做法是正确的。这本书应该和<a href="https://shufanhao.top/posts/fa70c6fa/">认知觉醒：开启自我改变的原动力</a> 都要看一下，会有更深的体会。</p>
<p>本书作者桦泽紫苑是一个精神科医师，通过自媒体“桦泽紫苑的桦频道”和邮件杂志累计向50万人以上通俗易懂地传达精神医学和心理学、脑科学的相关知识与信息，目标是成为“日本第一的输出精神科医师”。并且通过自己的实践，总结了一套非常实用的时间管理方法，如何提高效率等。本书就是作者的实践经验精华。<br><img src="https://i-blog.csdnimg.cn/direct/156d6e15772b424794d9a265e9ce006e.png" alt="在这里插入图片描述"></p>

        <h2 id="序章-实践管理术的4个原则"   >
          <a href="#序章-实践管理术的4个原则" class="heading-link"><i class="fas fa-link"></i></a>序章 实践管理术的4个原则</h2>
      
        <h3 id="摘抄"   >
          <a href="#摘抄" class="heading-link"><i class="fas fa-link"></i></a>摘抄</h3>
      <ul>
<li>第一原则:  需要专注力的工作放在上午去做。上午的时间价值是晚上的4倍。</li>
<li>第二原则：在适当的时间进行休息，通过运动让疲惫的头脑重启。</li>
<li>第三原则：一定要提高工作效率。</li>
<li>第四原则：自由时间用于提高自己的，实现螺旋式上升。
        <h3 id="思考"   >
          <a href="#思考" class="heading-link"><i class="fas fa-link"></i></a>思考</h3>
      在乘坐地铁上班的1个小时里，不要再玩手机游戏了，改成看书。每次在地铁中，总是想沉浸在看书中，但是本能脑又想让自己看一下微信等。这样时间就浪费了，感觉自己可以在看书的时候调成勿扰模式。</li>
</ul>
<p>还有让我想起了考研的时候，每次打完篮球后，再去看高等数学，感觉很多问题都迎刃而解，所以运动会让自己大脑重启。</p>

        <h2 id="第一章：最大限度发挥大脑机能，提高专注力的方法"   >
          <a href="#第一章：最大限度发挥大脑机能，提高专注力的方法" class="heading-link"><i class="fas fa-link"></i></a>第一章：最大限度发挥大脑机能，提高专注力的方法</h2>
      
        <h3 id="摘抄-1"   >
          <a href="#摘抄-1" class="heading-link"><i class="fas fa-link"></i></a>摘抄</h3>
      <ul>
<li>专注力最大的敌人是：杂念。消除杂念，人自然就专注起来了。</li>
<li>头脑中产生杂念就把它写出来，写出来后就忘了。</li>
<li>做事情要给自己设定deadline, 这样在deadline的驱使下，会提高效率。
        <h3 id="思考-1"   >
          <a href="#思考-1" class="heading-link"><i class="fas fa-link"></i></a>思考</h3>
      平时自己工作或者周末学习的时候，也会遇到杂念，自己消除杂念的方式：</li>
<li>把手机放在一个自己很难碰到的地方。</li>
<li>把突然心里想的事情，比方：我看一下我这个月的信用卡账单多少等，不要去做，可以把它放在todo list里。这样就不会干扰自己。</li>
<li>在纸上写上几个字，让自己静下心来。</li>
</ul>

        <h2 id="第二章：充分利用早上的大好时光，因为那是大脑的黄金时间"   >
          <a href="#第二章：充分利用早上的大好时光，因为那是大脑的黄金时间" class="heading-link"><i class="fas fa-link"></i></a>第二章：充分利用早上的大好时光，因为那是大脑的黄金时间</h2>
      
        <h3 id="摘抄-2"   >
          <a href="#摘抄-2" class="heading-link"><i class="fas fa-link"></i></a>摘抄</h3>
      <ul>
<li>获得早上清醒的方法，早上冲澡。这感觉和我中午要洗把脸一样。</li>
<li>早上一定不要看视频和电视，因为早上看电视，会把我们大脑的黄金时间完全打乱，让专注力荡然无存。</li>
<li>为了让黄金时间维持更长的时间，早晨我不接收多余的信息，姑且先关闭自己的所有“接收天线”​，与外界隔绝，专心工作。
        <h3 id="思考-2"   >
          <a href="#思考-2" class="heading-link"><i class="fas fa-link"></i></a>思考</h3>
      感觉早上的时间自己并没有好好利用好：</li>
<li>工作日的时候，地铁上有时候会回工作的事情，感觉可以让自己更加专心的看书和看一些比较复杂的内容。</li>
<li>周末的时候，我会早起跑步，一般是7点左右起床，然后跑步到8点，不知道这个时间算不算浪费。</li>
</ul>

        <h2 id="第三章：把白天时间利用到极致的午后重启术"   >
          <a href="#第三章：把白天时间利用到极致的午后重启术" class="heading-link"><i class="fas fa-link"></i></a>第三章：把白天时间利用到极致的午后重启术</h2>
      
        <h3 id="摘抄-3"   >
          <a href="#摘抄-3" class="heading-link"><i class="fas fa-link"></i></a>摘抄</h3>
      <ul>
<li>中午外出就餐并且多咀嚼。走出去晒太阳，散步。这有些不适合我，因为我一散步回来就感觉比较困，想睡觉。</li>
<li>最佳午睡时间是20到30分钟。</li>
<li>2点到4点事最疲倦的时间。可以通过运动等重新换发。</li>
<li>休息的时候一定不要玩手机游戏。手机游戏让大脑兴奋，根本得不到休息，反而会更加疲惫。</li>
<li>闭目养神的一个要点是头脑要放空，什么都不想。从脑科学的角度来说，这就是最为简单易行的休息术。
        <h3 id="思考-3"   >
          <a href="#思考-3" class="heading-link"><i class="fas fa-link"></i></a>思考</h3>
      每次中午出去散步，可能是散步太久，回来的时候就会感觉比较困，然后如果玩会儿手机的话，其实是最不科学的，应该闭目养神，什么都不去想。</li>
</ul>

        <h2 id="第四章：把夜晚时间利用到极致的运动-amp-睡眠重启术"   >
          <a href="#第四章：把夜晚时间利用到极致的运动-amp-睡眠重启术" class="heading-link"><i class="fas fa-link"></i></a>第四章：把夜晚时间利用到极致的运动&amp;睡眠重启术</h2>
      
        <h3 id="摘抄-4"   >
          <a href="#摘抄-4" class="heading-link"><i class="fas fa-link"></i></a>摘抄</h3>
      <ul>
<li>将一天时间变成2倍的方法就是运动。傍晚的时候可以运动1个小时，晚上的效率也会变得更高。</li>
<li>坚持运动后，人的体力和大脑机能都会提升，工作效率也比以前显著提高。这样就可以让工作在更短的时间内完成，也就创造出了更多的运动时间。</li>
<li>一定要提高在公司的工作效率，不要有念想：做不完的工作带回家去做。</li>
<li>睡前两个小时，尽量不去吃东西，看手机等。</li>
<li>周末一定要运动，越是疲惫越是要运动。</li>
<li>每天按计划有规律地做同样的事情
        <h3 id="思考-4"   >
          <a href="#思考-4" class="heading-link"><i class="fas fa-link"></i></a>思考</h3>
      </li>
<li>这让我想起来当时考CCIE的时候，感觉自己疲惫了就去跑跑步，然后回家后，晚上又可以学到很晚入睡。</li>
<li>自己有时候还是晚上睡觉之前忍不住玩手机，做的好的是不去看短视频，短视频毒害人。</li>
</ul>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>book</tag>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>思考的技术-读书笔记</title>
    <url>/posts/b4ecdf1b/</url>
    <content><![CDATA[<p>全书在描述 摆事实，讲道理，逻辑打动人心。这本书是在2009年写的，但不得不说，当时作者对未来的预测是非常准确的。</p>
<a id="more"></a>

        <h3 id="关于作者"   >
          <a href="#关于作者" class="heading-link"><i class="fas fa-link"></i></a>关于作者</h3>
      <p>本书作者是大前研一：</p>
<ul>
<li>大前研一受过良好的教育，家境优渥，学业有成，名校光环加持；</li>
<li>经历过日本政府重建、广场协议、经济危机等重大历史事件；</li>
<li>在麦肯锡工作了23年，稳定性高，7年升总经理，9年升董事，事业有为；</li>
<li>工作15年后， 完成了第一本书，在工作中不断思考及总结；</li>
<li>是目前日本最贵的企业战略咨询师。</li>
</ul>

        <h3 id="前言-“思考力差距化”的时代"   >
          <a href="#前言-“思考力差距化”的时代" class="heading-link"><i class="fas fa-link"></i></a>前言 “思考力差距化”的时代</h3>
      <ol>
<li>我只是想提醒大家，不管选择什么样的人生，在新世界里，懒于求知的人将没有生存的空间。</li>
<li>世上没有毁于用脑过度的人。</li>
<li>比别人多花两倍时间思考的人，就可以拥有十倍于别人的收入。比别人多花三倍时间思考的人，就能比别人多赚百倍的利润。</li>
</ol>
<p><strong>个人思考</strong>： 思考力的差距，决定了收入，越是深入思考，越能带来超额的收益。培养孩子，一定是不能只培养成一个会考试，不会思考的人，拥有独立思考的能力是非常重要的。</p>

        <h3 id="第一章-转换思路"   >
          <a href="#第一章-转换思路" class="heading-link"><i class="fas fa-link"></i></a>第一章 转换思路</h3>
      <p>解决问题的根本就是逻辑思考力，逻辑思考力不但能够让问题迎刃而解，而且我们一般常说的先见之明、直觉也是从逻辑思考中产生的。</p>

        <h4 id="向麦肯锡学习逻辑思维"   >
          <a href="#向麦肯锡学习逻辑思维" class="heading-link"><i class="fas fa-link"></i></a>向麦肯锡学习逻辑思维</h4>
      <ol>
<li>“不做不知道”“我想这么做应该不会有问题”类似这样的回答，都不叫解决之策。</li>
<li>不要把假设和结论混为一谈。分析数据后所整理出来的资料，只不过是假设。但是大部分企业经营者或工商业者，就把这个假设当结论了。</li>
<li>认清现象和原因的不同。最重要的是在各种现象之中找出真正的原因。</li>
<li>找出真正原因的实地访谈法。</li>
<li>绝对必要的验证过程。
        <h4 id="科学的思考"   >
          <a href="#科学的思考" class="heading-link"><i class="fas fa-link"></i></a>科学的思考</h4>
      </li>
<li>在解决问题之前，必须不断重复假设、验证、实验。</li>
<li>在现实社会里，只要拥有逻辑思考力，答案随时都会出现。因为我们不但有充裕的时间，还可以使用电脑。</li>
<li>作者是个非常不喜欢重复做同一件事的人，所以后来我决定只要是我做过的事，就做一份手册，让任何人都可以据此导出正确的结论。在工作中也是很重要。</li>
<li>解决问题的能力，就是为印证假设不辞辛劳的行动力，也可以说是为获得绝对正确的答案而努力动脑的深层思考力。</li>
<li>当脑子习惯思考之后，思考速度自然会加快。</li>
<li>每一家公司、每一个企业，应该有各种不同的问题。如果你现在是员工，就以中层领导的立场来思考；如果你现在是中层领导，就以高层领导的立场来思考。请做深层思考，想一想如果你是领导，你会怎么解决公司的问题。</li>
</ol>
<p><strong>个人思考</strong>：本章讲的是转换思路，实际上是要通过麦肯锡的的工作方法，假设，验证，实验的方法来进行科学的思考，要多思考，深入思考，思考速度才能加快，并且在工作中，多从上一级的立场来思考如何解决工作的问题。</p>

        <h3 id="第二章-逻辑打动人心"   >
          <a href="#第二章-逻辑打动人心" class="heading-link"><i class="fas fa-link"></i></a>第二章 逻辑打动人心</h3>
      <p>提建议时，有让对方采信的方法，当然我所谓的方法，并不是靠花言巧语将对手生吞活剥的伎俩，而是有逻辑思维做保证的思路。</p>

        <h4 id="让别人采纳的逻辑构成法"   >
          <a href="#让别人采纳的逻辑构成法" class="heading-link"><i class="fas fa-link"></i></a>让别人采纳的逻辑构成法</h4>
      <ol>
<li>给客户的建议，只要有一个就够了，同时给他们多个建议，只会让他们犹豫不决。</li>
<li>利用实地访谈，整理出比企业领导者所知更详细的业界最新信息及其公司数据，然后再以这些数据为根本，适时加以说明，总裁就会采纳了。</li>
<li>事实上，要逼对方做决定，也不是一件困难的事，就算这个决定不是对方所喜欢的，但是事实摆在眼前，对方也就没有辩驳的余地了。</li>
<li>支撑一个结论的“金字塔结构法”。金字塔结构（Pyramid Structure）就是最基本的逻辑构成法，是导出解决方案的逻辑思维的关键枢纽。在金字塔结构中，结论只有一个，而其他数据都只是支撑这个结论的证据。</li>
<li>真正的建议能力，也就是能够让别人采信的能力，是要靠信息搜集及反复的分析、假设、验证磨炼出来的。
        <h4 id="试着向掌权者建议"   >
          <a href="#试着向掌权者建议" class="heading-link"><i class="fas fa-link"></i></a>试着向掌权者建议</h4>
      笔者，以实际案例来解释如何通过假设，验证，结论来向日本首相建议。</li>
</ol>
<p><strong>个人思考</strong>：本章节，主要是讲如果是要向别人提出建议，一定要有靠谱的逻辑，事实的数据进行支撑，提出的建议，才能被对方认同。</p>

        <h3 id="第三者-洞悉本质的过程"   >
          <a href="#第三者-洞悉本质的过程" class="heading-link"><i class="fas fa-link"></i></a>第三者 洞悉本质的过程</h3>
      <p>在新经济的世界里，如果不具备洞悉问题本质的能力、凭一己之力解决问题的能力、构思创意挑战新事业的能力、研究打败对手的企业战略的能力，就会被所属的企业驱离职场。</p>

        <h4 id="你能洞悉问题本质吗？"   >
          <a href="#你能洞悉问题本质吗？" class="heading-link"><i class="fas fa-link"></i></a>你能洞悉问题本质吗？</h4>
      <ol>
<li>所谓洞悉本质，就是看清楚问题真正的原因，并导出正确的解决方法。</li>
<li>所有媒体都把政府的假设当成是结论忠实报道了。照本宣科真是非常轻松愉快，因为不管怎么做都行，所以新闻不能完全相信。</li>
<li>不要轻信媒体新闻报道。新闻工作者撰写新闻稿时，最基本的要求就是“5W+1H”。who, when, where, what, why and how。 轻易相信电视新闻、报纸新闻是非常危险的，尤其当新闻中看不到“5W+1H”时，必须更加留意。</li>
</ol>

        <h4 id="坚持对事不对人，企业就可以重生"   >
          <a href="#坚持对事不对人，企业就可以重生" class="heading-link"><i class="fas fa-link"></i></a>坚持对事不对人，企业就可以重生</h4>
      <ol>
<li>优秀的企业，都具有否定自己的勇气，从而有变革的力量。</li>
<li>世界优良企业的共同之处，应该就是它们都具有吸收异己特质进入企业文化，并让这些异质推动企业向前迈进的本事。</li>
<li>现在的企业已经打破了国家属性的框框，在无国界的世界里自由活动。</li>
</ol>
<p><strong>个人思考</strong>：洞悉问题的本质，实质也是深度思考的过程。尤其是现在自媒体盛行的时代，很多自媒体从业者，说的话很容易误导大众，所以作为读者，一定不能轻信媒体，多思考，多验证来辨别是非。另外，优秀的企业，都是能做到自我否定，认清自己的不足，从而变革自己。</p>

        <h3 id="第四章-非线性思维的建议"   >
          <a href="#第四章-非线性思维的建议" class="heading-link"><i class="fas fa-link"></i></a>第四章 非线性思维的建议</h3>
      <p>现今的经济已不同于牛顿的时代，我们要准确无误地做出判断几乎是不可能的。但是，如果以科学的方法思考，则可做到整体控制。</p>

        <h4 id="线性思维行不通"   >
          <a href="#线性思维行不通" class="heading-link"><i class="fas fa-link"></i></a>线性思维行不通</h4>
      <ol>
<li>什么是科学方法呢？以最简单的方式来说，就是对于任何人所说的任何话，皆不抱着“就是这样”的想法。举个例子来说，如果有人对你说：“天空是蓝色的。”你的反应是：“是啊！原来天空是蓝色的啊！”就是人文学的方法。若你的回答是问“为什么”，企图探求天空为什么是蓝色的理由，这就是科学的方法。</li>
<li>所谓线性思维，就是套用公式，就一定会得到正确答案的直线式思维方法。但是，在非线性以及复杂系理论的世界里（新经济），只要初期条件有些许不同，结果就会变得无法预测。
        <h4 id="为没有答案的问题寻找答案"   >
          <a href="#为没有答案的问题寻找答案" class="heading-link"><i class="fas fa-link"></i></a>为没有答案的问题寻找答案</h4>
      </li>
<li>现在的时代最需要的不是填鸭式教育，也不是在有答案的情况下受教育，而是让孩子学习去问为什么。</li>
<li>现在的学校是破坏人脑的“凶器”。</li>
<li>学校的功能应该是培养孩子们养成动脑思考的习惯，让孩子对于无解的问题设法提出假设，并不厌其烦地努力证明自己的假设是正确的。拥有这种能力的人，有机会以高达97%的年利率赚钱，而以牛顿力学思考的人，却只懂得拼命向年利率只有0.1%的定期存款。</li>
<li>原本我就很讨厌“先生”这两个字，为什么先生下来，就有教导别人的权利？后来出生的人洞察力也可能更为敏锐。</li>
<li>训练自己常常保持好奇心也是非常重要的，一个拥有好奇心的人，不只是思考别人所给予的题目，而且会获得更多报纸、网络所无法提供的有趣信息。</li>
<li>平时懒于思考、一有时间就睡大觉的人，在二十一世纪的复杂世界里，属于落后的一群。所以在未来，不管是对自己的人生，还是对时代背景，如果没有相当正确的认识，要生存下去是非常困难的。</li>
<li>总是说自己很忙、没时间的人，其实浪费了太多时间。</li>
</ol>
<p><strong>个人思考</strong>：所谓的非线性思维，就是不要套用公式，不要轻信他人。而是通过自己的假设，论证，来得出自己的答案。现在的学校，很多是直接说答案，从来不讲答案是怎么来的，学校应该着重培养孩子的动脑思考能力而不是做题能力。另外总是说自己很忙、没时间的人，其实浪费了太多时间，这个感同身受。</p>

        <h3 id="第五章-让构想大量涌现"   >
          <a href="#第五章-让构想大量涌现" class="heading-link"><i class="fas fa-link"></i></a>第五章 让构想大量涌现</h3>
      <p>从未来的角度来看，构想并非突如其来，而是过去的延伸或今日的延伸。因此，一定有预兆，通过预兆来构想未来。</p>

        <h4 id="产生新构想的思维逻辑"   >
          <a href="#产生新构想的思维逻辑" class="heading-link"><i class="fas fa-link"></i></a>产生新构想的思维逻辑</h4>
      <ol>
<li>构想是通过不断地对自己提出质疑，然后找出解决问题的方法而产生的。</li>
<li>中国如果要有所发展，就一定要发展成之前我所提过的区域性国家，这样才是可行的。若一直处于中央集权的方式之下，中国在今后一百年内还是会处于落后状态。目前除了口罩事件外，中央其实很多下放权力到地方。
        <h4 id="互联网时代的“大前法则”"   >
          <a href="#互联网时代的“大前法则”" class="heading-link"><i class="fas fa-link"></i></a>互联网时代的“大前法则”</h4>
      </li>
<li>进入互联网时代的第五年，大家的举动变得十分类似。因为大家在网上得到的知识都是类似的，全球共享知识。</li>
<li>全世界都拥有相同的信息，全世界的传统文化很有可能最后变成一个共同的文化。
        <h4 id="摆脱陈旧思维方式的方法"   >
          <a href="#摆脱陈旧思维方式的方法" class="heading-link"><i class="fas fa-link"></i></a>摆脱陈旧思维方式的方法</h4>
      </li>
<li>试着多在日常生活中多训练。</li>
<li>成功者几乎都是将所有人忽略的部分加以重新思考，才获得事业的成功。</li>
<li>经常保持紧张感，以同样的态度面对每件事情，让自己随时处于准备好了的状态，才能提高解决问题的能力，产生好的构想。</li>
<li>试图推翻对方的假设，可以让自己进行更深入的思考，因此，拥有这样的朋友，对于理性思维的训练，是非常有好处的。</li>
<li>当你阅读一篇报道时，首先就要抱有怀疑的态度，思考报道的正确性。</li>
</ol>
<p><strong>个人思考</strong>:  本章的主题是让构想大量涌现，其实就是在日常生活中，要多进行思考，多训练。并且摆脱陈旧思维的方式，把所有人忽略的部分进行重新思考，试着推翻对方的假设，读任何文章和报道，都要有怀疑的态度。</p>

        <h3 id="第六章-解读五年后的商机"   >
          <a href="#第六章-解读五年后的商机" class="heading-link"><i class="fas fa-link"></i></a>第六章 解读五年后的商机</h3>
      <p>对五年后的移动电话进行预测，也就是在五年后你可以说“我的确有先见之明”，但事实上，这就是一种理性思维的推理能力，而具备这种能力的前提就是拥有努力求知不懈怠的态度。</p>

        <h4 id="谁都有能力预测未来"   >
          <a href="#谁都有能力预测未来" class="heading-link"><i class="fas fa-link"></i></a>谁都有能力预测未来</h4>
      <ol>
<li>政府和房地产商串通一气，欺骗了全体国民，刺激民众借钱买房，而目的是拉动经济增长。把全体国民当作刺激经济的工具，实在是一种令人难以苟同的恶劣行径。现在在中国何尝不是。</li>
<li>所谓的预知性，其实也就是不盲目相信政府、开发商或是媒体所说的话，而是对任何人都能取得的数据进行分析得到答案。</li>
</ol>

        <h4 id="能预知五年后的世界的思维逻辑"   >
          <a href="#能预知五年后的世界的思维逻辑" class="heading-link"><i class="fas fa-link"></i></a>能预知五年后的世界的思维逻辑</h4>
      <p>一直在讲移动电话。如何是通过一个只能接打电话的手机，发展成为集各种功能于一体的手机。</p>
<p><strong>个人思考</strong>：本章营养不多，一定要独立思考的能力，才能预测未来，能够明辨是非。</p>

        <h3 id="开拓者的思维"   >
          <a href="#开拓者的思维" class="heading-link"><i class="fas fa-link"></i></a>开拓者的思维</h3>
      <p>在这个时代，企业界人士必须具备的是突破既有价值观的思维能力，换句话说就是，具备在商场上的突破能力与开拓者的思维逻辑。不局限于旧有的价值观，将自己的构想和预知性活用在新的事业与社会的系统改革中，我们需要这样的理性思维能力。</p>

        <h4 id="冲破旧商业的障碍"   >
          <a href="#冲破旧商业的障碍" class="heading-link"><i class="fas fa-link"></i></a>冲破旧商业的障碍</h4>
      <ol>
<li>在这样的新世界中，看不见的新大陆以飞快的速度变化着。不能适应这种变化的企业，即便是大型的优良企业也会“突然消失”。例子是，iPod的诞生。</li>
<li>政府应该，将行政服务的部分尽量自动化。</li>
<li>教师回归原本应该做的事情，就是知道学生规划未来，对学生的人生发展进行指导。
        <h4 id="来吧！让我们迈向荒野"   >
          <a href="#来吧！让我们迈向荒野" class="heading-link"><i class="fas fa-link"></i></a>来吧！让我们迈向荒野</h4>
      看不见的新大陆的四个空间：</li>
<li>实体经济。“实体经济”是一个从旧世界以来就持续存在的空间。</li>
<li>无国界经济。所有的企业无国籍化，得以跨越国界自由从事企业活动，金钱、人与物也可以跨越国界自由流通，而且这个无国界空间的居民不会受局限于国家国民的框架中。</li>
<li>互联网经济。</li>
</ol>
<p>从现在起，不要受限于过去的事物，想到新事物、接触到新事物、想到以往没有的新做法，或是将以前没有的东西作为服务来提供的这些人，将会取得胜利。</p>
<p><strong>个人思考</strong>： 作为一个企业的领路人，一定要有开拓者的思维，具备冲破传统思维的能力，能冲破就商业的障碍，不受限于过去的事物，喜欢接触新事物。</p>

        <h3 id="总结"   >
          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a>总结</h3>
      <p>如书名《思考的技术》一样，全书一直围绕如何思考进行论述。</p>
<p>第一章转换思考，写了如何用麦肯锡的方法进行逻辑和科学的思考，提出问题，数据验证问题，实际考察和得出结论。但是当我们知道正确的解决之策后，如何建言献策让当事者采纳，是第二章 逻辑打动人心 解决的问题，一定要有数据支撑和充分的逻辑思考，要用金字塔结构去说服当事者。</p>
<p>在第三章 洞悉本质的过程 和 第四章 非线性思维的建议，则是在说明弄清新世界各种现象的本质之后，为无解问题找出正确导向的思考方法。内容绝对是旧世界的思考路径无法掌握的。</p>
<p>最后三章，让构想大量涌现，解读五年后的商业和开拓者的思维三章，主要是说明在新经济中找出新的价值观，能够认清公司的不足，并不断思考让企业走向成功之路。</p>
<p>所以，摆事实，讲道理，逻辑打动人心，深度思考。</p>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>宏观经济学通识课--读书笔记</title>
    <url>/posts/34694fad/</url>
    <content><![CDATA[<p>学习宏观知识，是为了能更好的理解政府的政策，全球的地缘政治和全球其他国家的尤其是美国的经济政策。通过政策，是如何影响市场。</p>
<a id="more"></a>

        <h1 id="宏观经济学通识课"   >
          <a href="#宏观经济学通识课" class="heading-link"><i class="fas fa-link"></i></a>宏观经济学通识课</h1>
      <p>这本书是在上海封控之前在图书馆借的，一直因为疫情图书馆延长了还书时间，这边书也就断断续续慢慢读的。主要，还是自己拖拖拉拉的。今天抽空，记录下读书笔记。</p>

        <h2 id="PART-1-宏观视角，必不可少"   >
          <a href="#PART-1-宏观视角，必不可少" class="heading-link"><i class="fas fa-link"></i></a>PART 1 宏观视角，必不可少</h2>
      
        <h3 id="第一章-为什么你要学习宏观经济学"   >
          <a href="#第一章-为什么你要学习宏观经济学" class="heading-link"><i class="fas fa-link"></i></a>第一章 为什么你要学习宏观经济学?</h3>
      <ol>
<li>学习宏观经济学可以帮助研判宏观大势，辨识经济周期，避免损失。</li>
<li>研判宏观大势主要看历史趋势、发展阶段、地缘政治、国家体制和机制、人力资本、自然禀赋与文化。这种判断需要我们集中 注意力在主旋律上，而不是短期插曲上，我们应从当下热点事件中 识别出会影响大趋势的事件。</li>
<li>辨识经济周期非常重要，但难在如何辨识。学习宏观经济学可以让我们注意到一些关键数据，同时理解那些重大事件是如何影响整体经济的，以及这种影响的整个链条是如何衔接的。</li>
</ol>
<p>个人理解：学习宏观知识，是为了能更好的理解政府的政策，全球的地缘政治和全球其他国家的尤其是美国的经济政策。通过政策，是如何影响市场。</p>

        <h3 id="第二章-了解宏观经济的预备知识"   >
          <a href="#第二章-了解宏观经济的预备知识" class="heading-link"><i class="fas fa-link"></i></a>第二章 了解宏观经济的预备知识</h3>
      <p><img src="https://img-blog.csdnimg.cn/724662bfe5ed4ca8b383a212e44b2bcb.png" alt="在这里插入图片描述"></p>
<ol>
<li>宏观经济学分为两大板块，研究经济的长远增长和研究经济周期。</li>
<li>随着计算能力的提高、大数据积累以及机器学习方面的进步，将来我们可以对宏观经济做出更为准确的判断，对宏观经济政策的效果做出更为逼真的模拟。</li>
<li>在二战即将结束之际，44个同盟国为重建国际金融秩序而建立了布雷顿森林体系，并在该体系下成立了两大国际金融机构：世界银行和国际货币基金组织。国际货币基金组织负责向成员国提供短期资金借贷，因而需要了解成员国的一系列宏观经济状况，所以国际货币基金组织与大部分成员国每年都有第四条款磋商。</li>
<li>学习宏观经济学首先应该了解一些常用的宏观经济概念，并明确其定义和计算方式。这些常用的宏观经济概念主要包括实际经济增长、通货膨胀、信贷、贸易、资本账户开放、投资等。</li>
</ol>
<p>个人理解：预备知识，简单知道即可，不需要懂很深。</p>

        <h3 id="第三章-宏观模型初步-封闭型经济体分析"   >
          <a href="#第三章-宏观模型初步-封闭型经济体分析" class="heading-link"><i class="fas fa-link"></i></a>第三章 宏观模型初步:封闭型经济体分析</h3>
      <ol>
<li>IS曲线刻画的是物品和服务市场的均衡条件，LM曲线刻画的是货币与金融市场的均衡条件。</li>
<li>IS曲线的构造步骤如下:</li>
</ol>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-GZlSEjZU-1662304309236)(RackMultipart20220904-1-qcyg1b_html_28b6808c5e76a6a9.png)]</p>
<ol>
<li>由于总需求Z 包括三个部分:消费、投资和政府支出，消费和投资都是总收入Y 的增函数，因此总需求Z 可表示为总收入Y 的增函数，即一条向上倾斜的曲线。</li>
<li>由于封闭型经济体中的总产出就等于总收入，因此总产出 GDP可表示为一条45°线。</li>
<li>由于总需求中投资由总收入和名义利率共同决定，因而给 定一个利率水平就对应一条总需求曲线，该曲线与45°线的交点的 横坐标即为均衡的总收入或总产出GDP水平。</li>
<li>利率越低，总需求越高，均衡总收入越高，即得到向下倾斜的IS曲线，以表示物品市场均衡中利率与产出的关系。</li>
<li>特朗普减税政策使国民可支配收入上升，消费需求上升，从而总需求上升，因此均衡总收入增加到新的水平，IS曲线向右移动。减税和增加政府开支作为扩张性财政政策，在短期内刺激经济效果较为明显，但从长期而言它们会面临政府可持续性问题。</li>
<li>财政政策和货币政策可以组合使用。它们可以朝同一方向努力。它们也可以出现截然相反的态势，一松一紧。</li>
<li>实际利率等于名义利率减去预期通货膨胀率。</li>
</ol>
<p>个人理解：本章比较晦涩，在讲公式的理解。</p>

        <h3 id="第四章-货币主义—新新古典—新新凯恩斯"   >
          <a href="#第四章-货币主义—新新古典—新新凯恩斯" class="heading-link"><i class="fas fa-link"></i></a>第四章 货币主义—新新古典—新新凯恩斯</h3>
      <ol>
<li>18世纪至20世纪盛行的古典经济学和新古典经济学一直推崇市场的效率及自我调节功能。1929年至1933年的美国大萧条则掀起 了”凯恩斯革命”，凯恩斯通过其著作《通论》指出了市场的局限 性和政府干预的必要性。</li>
<li>与凯恩斯所认为的货币供给增加影响总产出的理论不同，货币主义学派代表人物弗里德曼则秉承货币数量论，认为货币供给增加只会导致通货膨胀。他强调了货币政策对于维持宏观经济稳定的重要作用，同时表达了对简单菲利普斯曲线的质疑。</li>
<li>理性预期是指经济个体在决策时会有效利用所有可得信息，包括对政府决策的程序、手段、逻辑的理解。不同于直接引用过去的经验数据来形成预期以及凯恩斯的”动物精神”，理性预期假设下的预期是具有前瞻性的。</li>
<li>美国经济在经历了20世纪80年代早期的衰退后，在20世纪80年代中期逐渐走上了比较健康的轨道，失业率和通胀率都有所下降。在2006年1月之前的将近20年的时间里，一系列国内外政治、经济动荡都没有对美国经济总体形势造成极其剧烈的冲击，这一时期后来被称为”大缓和”时期。</li>
<li>1987年格林斯潘接任美联储主席，他领衔的货币政策决议引导着全球的资金流动性，不仅对美国甚至对全球的经济走势都有深远的影响。从全球的货币政策制定程序来看，美联储及其他国家央行的独立性在逐渐加强，政策透明度也有所提升。</li>
<li>中国经济的”大缓和”时期被定义为1994年宏观调控至2008 年金融海啸发生之前的这段时间，其影响因素包括一系列改革立法、市场崛起、开放发展以及运气成分。</li>
<li>20世纪90年代以来，一众经济学家借用实际经济周期理论的严谨方法，将厂商定价理论及垄断竞争模型引入带有货币变量的动态模型中，逐渐形成了新新凯恩斯模型和宏观经济学家近乎达成共。</li>
</ol>
<p>###</p>

        <h3 id="第五章-宏观模型进阶-如何理解金融海啸"   >
          <a href="#第五章-宏观模型进阶-如何理解金融海啸" class="heading-link"><i class="fas fa-link"></i></a>第五章 宏观模型进阶:如何理解金融海啸</h3>
      <ol>
<li>关于金融海啸的起因:金融风险起源于国际竞争、放松管制、国际协议与金融创新，然后借助薪酬结构、资本流动、房价泡沫而积累和放大，最后因人性贪婪和金融欺诈而形成海啸。众多因素相互影响和推动，造成了百年不遇的灾难性后果。</li>
<li>金融海啸发生之前，银行业务的跨国竞争日益激烈，具体表现为20世纪80年代外国银行在美国迅速扩张。为提高本土银行的竞争力，美国在20世纪80年代中期开始出台一系列改革以放松管制， 如允许银行跨州兼并、允许跨业务整合等，这在带来便利的同时也产生了诸多风险。</li>
<li>金融创新种类多样埋下金融风险。众多金融创新一方面使经济得以快速发展，但另一方面也使金融机构的业务非常不透明，给金融监管带来很大困难，为次贷危机埋下了隐患。</li>
<li>金融海啸的标志性事件是2008年9月15日投资银行雷曼兄弟宣布破产。</li>
<li>一系列重大趋势和事件所反映出的金融海啸的特征包括：投资者突然变得谨慎、流动性趋于枯竭、银行挤提和倒闭、信息严重不对称、股市”跌跌不休”、财政刺激政策远水难解近渴、美联储回天乏术、低估连锁反应、国际连锁反应和金融欺诈。</li>
<li>为应对金融危机导致的实体经济危机，政府可以使用扩张性财政政策，如增加开支或减少税收或双管齐下的方式。政府也可以利用货币政策工具，通过降低政策利率来刺激经济复苏。</li>
</ol>
<p>个人理解：金融海啸出现的原因主要是各种因素的推动，造成了金融灾难，但是回头看，每次都是经过几年，人类可以在金融海啸的基础上，能取得长足的进步，所谓的蓄势待发。</p>

        <h2 id="PART-2-成也货币，败也货币"   >
          <a href="#PART-2-成也货币，败也货币" class="heading-link"><i class="fas fa-link"></i></a>PART 2 成也货币，败也货币</h2>
      
        <h3 id="第七章-货币政策的传递机制"   >
          <a href="#第七章-货币政策的传递机制" class="heading-link"><i class="fas fa-link"></i></a>第七章 货币政策的传递机制</h3>
      <ol>
<li>货币按流动性高低可分为:M0(流通中现金)、M1(狭义货币)和M2(广义货币)。另外，基础货币是指M0加上银行体系的法定存款准备金、超额存款准备金以及库存现金的总和。货币乘数是指基础货币在经过放大形成M2的过程中所被放大的倍数。</li>
<li>货币政策通过传统利率渠道、资产价格渠道、信用渠道，将其影响传递到实体经济中。其中，传统利率渠道的具体表现是：央行通过紧缩货币推高政策利率来降温过热的经济，或通过增加货币供应降低政策利率来刺激低迷的经济。</li>
<li>扩张性货币政策会刺激房地产市场，使房价上涨，总产出和总需求增加。一方面，高房价会促使地产商进一步开发，投资增加；另一方面，由于房价上涨带来财富效应，消费也会增加。</li>
<li>货币政策传递中的信贷渠道可分为银行放贷渠道和资产负债表渠道。</li>
<li>银行放贷渠道具体指：当央行推出扩张性货币政策时，银行储备和存款会增加，从而促使银行增加放款，投资、耐用品消费增加，总产出增加。</li>
<li>资产负债表渠道具体指：当央行推出紧缩性货币政策时，一 方面股票价格下跌，企业净资产缩水；另一方面利率上升，企业面临的现金流压力加剧。这都会恶化逆向选择和道德风险问题，从而使银行放款减少，投资减少，总产出减少。</li>
<li>货币政策传递中的资产负债表渠道还可通过物价变化实现。 当货币政策意外收紧时，物价将下跌，企业实际债务负担上升，实 际净资产下降，逆向选择和道德风险问题恶化，因此银行减少放 款，企业减少投资，总产出减少。</li>
</ol>
<p>个人理解：央行印的货币，是通过商业银行贷款给企业或者是个人来传递到市场的。</p>

        <h3 id="第八章-货币政策的执行过程"   >
          <a href="#第八章-货币政策的执行过程" class="heading-link"><i class="fas fa-link"></i></a>第八章 货币政策的执行过程</h3>
      <ol>
<li>关于货币政策的最终目标，各国表述不尽相同。大多数国家赋予央行多重最终目标，一般集中在”价格稳定、充分就业、促进经济增长”等方面；但也有20多个发达国家和新兴市场国家采用了单一的通胀目标体制。</li>
<li>美联储的操作独立程度相当高。美国国会、总统通过拥有美联储主席的提名权和续聘权可以在一定程度上影响货币政策。</li>
<li>英国货币政策从1992年起转为由政府设置的通胀目标体制，英伦银行于1997年获得操作独立性；欧洲央行货币政策由管理委员会承担制定，其主要目标为维持欧元区”价格稳定”；中国央行尚未实现操作独立，货币政策决策机构是国务院。</li>
<li>随着相当多的国家对通胀目标体制的采纳，央行的操作独立 性都在加强。有实证研究发现，在18个高收入国家中央行操作独立性越强，年均通胀率越低。原因部分在于央行有了操作独立性后可以不受现任政府的左右，从而能更有效地控制通货膨胀。</li>
<li>在20世纪80年代以前，利率管制在世界各国相当普遍。然 而，随着全球化的推进和金融创新的发展，利率管制变得越来越困难，许多国家走上了利率市场化的道路。</li>
<li>发达国家央行货币政策工具基本上于20世纪80年代完成了从直接工具向间接工具的转变，中国也逐渐完成了这一转变。央行放松方式包括降低政策利率、降低法定存款准备金率和公开市场购买；央行收紧的方式包括提高政策利率、提高存款准备金率和公开市场卖出。</li>
<li>中国货币政策的唯一疑点在于如何在化解房产泡沫和去杠杆的同时避免经济硬着陆，中国政府可以考虑精简央行政策目标，但更重要的是央行要提升政策透明度，及时发布前瞻性分析、通胀预 测以及指明未来政策利率走势。</li>
</ol>
<p>个人理解：目前看，央行的独立性相对全球其他国家还是太差，受政府的管控太多，央行就是为了配合政府的各种目标而进行政策的调整。</p>

        <h3 id="第九章-收益率曲线与其他关键指标"   >
          <a href="#第九章-收益率曲线与其他关键指标" class="heading-link"><i class="fas fa-link"></i></a>第九章 收益率曲线与其他关键指标</h3>
      <ol>
<li>由于货币政策的作用存在滞后，所以央行政策需要一定的提前量。央行通常会关注市场上的一系列经济变量如收益率曲线，以对经济运行做出整体性、前瞻性判断。</li>
<li>收益率曲线刻画了年化利率与债券期限之间的关系。从直觉 上看，收益率曲线通常被认为应当是向上倾斜的；但实际上，它也 存在倒挂的情况，即长期国债利率有可能比短期国债利率更低。</li>
<li>中国的国债收益率曲线曾出现局部倒挂的情形，曲线呈M形。 导致了这种奇特曲线的原因最有可能是投资者在某个时间段对某个期限的债券有特别的需求，或者是某些期限的债券流动性比较高， 从而吸引了投资者，使投资者购买价格更高而收益率更低的债券。</li>
<li>在央行和市场关注的重要指标中，对货币政策影响最大的直接指标是月度消费物价通胀率和季度GDP增长率。而除此之外，对美国而言，最为重要的数据发布是劳工部的月度就业报告，其中的 业率数据、新增就业数据及其变化趋势是美国重点关注的。</li>
<li>央行和市场关注的第二个重要的月度指标是PMI。PMI是一个根据采购经理们的问卷调查数据进行编制的综合指数，可以反映出当期行业处于扩张阶段还是收缩阶段。</li>
<li>大宗商品包括能源商品、基础原材料、农产品，其中具有代 表性的有原油、铜和黄金。中国在石油和铜这两个方面均为净进口国，不仅对外石油依存度高，而且对铜的需求仍然旺盛。</li>
<li>石油价格上涨会提高绝大部分企业的能源成本，这被称作负面的供给冲击。因为地缘政治因素的油价上涨，对经济和股市的 面影响很大；而因为全球经济复苏反应的油价上涨，对全球股市的负面影响则较小。</li>
<li>大规模实行宽松的货币政策会使本币贬值，但若只是轻微减息或存款准备金率小幅下调，未必会导致本币贬值。其原因在于略微宽松的货币政策会提振经济，有利于资产升值，从而吸引资本流入，推动本币升值。</li>
</ol>
<p>个人理解：央行就是根据各种市场数据来调整货币政策。我国作为一个石油净进口国，对外依存度比较大，所以大力发展新能源，来降低对石油的进口量。</p>

        <h3 id="第十章-美国及中国货币政策报告解读"   >
          <a href="#第十章-美国及中国货币政策报告解读" class="heading-link"><i class="fas fa-link"></i></a>第十章 美国及中国货币政策报告解读</h3>
      <ol>
<li>美联储货币政策报告反映了美联储对美国经济乃至全球经济形势的看法，对全球的资金成本和资金流动都有着深远的影响。</li>
<li>美联储政策执行过程比较透明，且每年提交两份货币政策报告。报告虽在形式上有变化，但内容一般涉及三个部分：近期经济和金融形势、货币政策、经济展望。</li>
<li>美联储货币政策报告第一部分”近期经济和金融形势”包括美国劳工市场、通货膨胀、经济活动和金融形势等内容。第二部分”货币政策”包括对政策利率和美联储资产负债表的讨论，第三部分”经济展望”即为最近一次的美联储联邦公开市场委员会会议纪要附录，包括对未来联邦基金目标利率的预测。</li>
<li>《中国货币政策执行报告》由中国人民银行发布，包括五个部分，分别为货币信贷概况、货币政策操作、金融市场运行、宏观经济形势以及货币政策趋势。</li>
<li>中国的货币政策执行报告的第二部分包括公开市场操作、存款准备金率和基准利率的变化等内容。对该部分我们最需要关注的是央行货币政策的取向。</li>
<li>中国的货币政策执行报告的第三部分包括货币、债券等金融市场的利率走势和收益率曲线分析，以及关于制度建设的讨论。报告的第四部分包括对国际经济形势、国际金融市场的分析，以及对国内产出动力、产业结构和行业分析。</li>
<li>中国的货币政策执行报告的第五部分包括中国宏观经济展望 和下一阶段主要政策思路，其中值得重视的是不同场合下重复出现 的表述。同时，我们可以通过分析报告中的细微变化，来更精准地 判断央行的政策倾向性。</li>
</ol>
<p>个人理解：这部分到倒不是很重要，往往美联储开会后，都有大量的专业人士丢会议内容进行解读。</p>

        <h2 id="PART-3-财政失控，危机四伏"   >
          <a href="#PART-3-财政失控，危机四伏" class="heading-link"><i class="fas fa-link"></i></a>PART 3 财政失控，危机四伏</h2>
      
        <h3 id="第十一章-税收体制变迁"   >
          <a href="#第十一章-税收体制变迁" class="heading-link"><i class="fas fa-link"></i></a>第十一章 税收体制变迁</h3>
      <ol>
<li>财政政策是一个国家长远发展和繁荣稳定的基石。当今世界绝大多数国家均以税收为政府收入主要来源，除了某些石油输出国家之外。</li>
<li>古代税收常出现税收累退现象。现代社会的税收设计，尤其是所得税，一般都是累进制的。</li>
<li>增值税是对每一生产和交换环节征收的，因此其缴纳会留下 一串印记，这一税种被认为是税收方面最高效的。就各国平均而 言，增值税约占政府收入的20%。</li>
<li>从政府的税收结构来看，美国比较依赖直接税，而中国则更依赖间接税。两种税收体制的优劣难下结论，本章认为中美企业的负担是不相上下的。税收设计与信息采集和征收效率有很大关系， 此外它还应尽可能减少市场扭曲以及兼顾公平。</li>
<li>1994年的中国税制改革意义重大，这一改革方案是在积极借鉴发达国家税制建设成功经验的基础上结合中国具体国情而制订 的。</li>
<li>1980年至1994年，中国政府收入占GDP的百分比持续下跌，原因在于体制改革初期政府征收效率偏低以及地方政府有隐瞒收入的 动机。在这一阶段的财政承包制下，中央政府的财权不断弱化。</li>
<li>1994年中国分税制改革大大增强了中央政府的财权，大幅提高了中央及地方的税收征管效率，激励了地方政府大力发展经济的意愿，从而促使政府财政收入相对于GDP的稳步增长。</li>
<li>我国税制目前存在两个大的问题，一是基层财政困难，二是 地区间差距日益扩大。与美国相比，中国在房产税方面较为落后，健全和规范土地财政并全面推出更规范的房产税将是未来的改革方向。</li>
<li>为了维持美国经济强劲增长，特朗普政府于2017年底签署的减税法案包括个人所得税税率下调和企业所得税税率下调这两个部分。最可能出现的结果是政府税收下滑、财政赤字恶化、国债攀升，未来美国将不可避免地提高税率。</li>
</ol>
<p>个人理解：在1994年中国分税制改革后，各个地方政府开启了卖地为生，直到今年(2022)，很多地方政府已经卖不出地了，然后地方政府出现赤字，发不出去工资等。房产税是大势所趋。</p>

        <h3 id="第十二章-财政支出变迁"   >
          <a href="#第十二章-财政支出变迁" class="heading-link"><i class="fas fa-link"></i></a>第十二章 财政支出变迁</h3>
      <ol>
<li>现有的财政支出理论各不相同，各有侧重。诸如经济开放度、国家大小、民族多样性、语言或宗教差异、国民收入、政治制度等因素都会影响各国政府支出规模。</li>
<li>有研究表明经济开放度和政府支出规模呈正相关关系，其解 释为：开放度越高的国家受外部冲击更大，因此政府支出作为应对冲击的保险就相应越高。</li>
<li>国际货币基金组织的报告显示，高收入国家和低收入国家的中央政府部门薪酬的开支占总体政府开支的比重大致相当，而中等收入国家的这一占比反而大幅高于高收入国家的。</li>
<li>1994年的分税制改革一方面使财政总收入更为透明，让其占 GDP的比重进入上升轨道，另一方面通过进一步分权使地方政府支出占政府总支出的比重逐步上升。</li>
<li>中央财政通过税收返还和转移支付的方式给地方财政提供支持。转移支付又可以分为一般转移支付和专项转移支付两种。</li>
<li>在解决基层财政困难的问题上，建议全面推出房产税。房产税一向被认为是支持地方公共服务与建设最公平的税目，推出房产税可以减少地方政府对土地出让收入的依赖，但其具体推出时间尚需斟酌。</li>
<li>减税一般有两种考虑：一种是为了缓和经济衰退，着眼于短期刺激；另一种是为了促进投资和创新、提高国际竞争力，着眼于长远增长。中国当前的减税基于以上两种考虑，但增值税率的降低意味着政府税收的减少，中国地方政府债务负担势必进一步加重。</li>
</ol>
<p>个人理解：越是发达国家，政府越透明，政府的薪酬开支占政府开支的比重就小，在中国有很多不上班但是照常发工资的人。</p>

        <h3 id="第十三章-财政可持续性"   >
          <a href="#第十三章-财政可持续性" class="heading-link"><i class="fas fa-link"></i></a>第十三章 财政可持续性</h3>
      <ol>
<li>许多国家在争取独立的过程中和经济发展初期都有过大量举债的阶段，如拉美的墨西哥、巴西、阿根廷以及亚洲的韩国、菲律宾。</li>
<li>20世纪80年代欠发达国家债务危机的起因是20世纪70年代的两次石油危机。石油价格暴涨引发全球经济的衰退，欠发达国家的出口市场萎缩，导致其偿还债务困难而只能借新还旧。然而，美国著名智库布鲁金斯学会对拉美国家债务的可持续性有所误判，没有意识到危机即将到来。</li>
<li>20世纪90年代之后，墨西哥、俄罗斯、土耳其等新兴市场国家出现债务危机，危机的出现或深化是由于政府显性或隐性的债务负担过重。</li>
<li>在苏联解体后俄罗斯采取休克疗法以稳住短期经济，即迅速采纳华盛顿共识，包括放开价格管制等一系列改革措施。1998年8 月，受到亚洲金融危机、世界经济不景气引发的石油价格暴跌等因素的影响，卢布贬值，俄罗斯陷入主权债务危机。</li>
<li>中国地方政府债务分为显性债务和隐性债务。显性债务即反映到地方政府资产负债表中的债务，由财政部预算司进行统计披 露，并且绝大部分以政府债券形式存在。</li>
<li>我国于1994年颁布《预算法》，禁止地方政府发债，所以在应对1998年和2009年的金融危机时我国采取的是中央财政代发地方政府债券的做法。</li>
<li>随着时间的推移，学界和社会上支持地方政府独立发债的呼声越来越高。《新预算法》增加条款允许地方政府在特定条件下发行债券并对这一行为加以严格限定，这体现出中央政府对地方政府 的显性债务实现了相当规范的管理。</li>
<li>中国地方政府的隐性债务负担仍然难以摸清。2014年国务院出台加强地方政府性债务管理的意见，这样做一方面是为了阻止地方产生新的隐性债务，另一方面是通过债券置换计划来将旧的隐性债务显性化。</li>
<li>中国地方政府债务问题的解决需要时间。中国在降低负债率时必须有一个中长期的着眼点，切忌刹车过猛，关键是要保持健康的经济增速。</li>
</ol>
<p>个人理解：地方政府可以发债，让地方政府更加自由，灵活的去刺激经济。</p>

        <h2 id="PART-4-经济增长，从长计议"   >
          <a href="#PART-4-经济增长，从长计议" class="heading-link"><i class="fas fa-link"></i></a>PART 4 经济增长，从长计议</h2>
      
        <h3 id="第十四章-经济增长"   >
          <a href="#第十四章-经济增长" class="heading-link"><i class="fas fa-link"></i></a>第十四章 经济增长</h3>
      <ol>
<li>宏观经济学分为两块，一块研究经济的长远增长，一块研究经济周期。长远经济增长实际上比经济周期更值得研究，更值得关注。</li>
<li>中国今日的国际地位正是来自自改革开放以来中国经济40多年的高速增长。复合增长的长期影响是巨大的，但维持长远增长是相当困难的。</li>
<li>对于一个国家怎样实现快速增长，经济学家们提出过的建议包括加大投资、普及教育、控制人口、减免债务以及将国际援助与改革挂钩等。</li>
<li>从实证的结果上看，无论是加大投资，还是加强教育，它们对经济增长的作用都存在争议。伊斯特利认为这些政策之所以不尽如人意的关键原因在于国际机构和各国政府在推行这些政策的过程 中忽视了”激励”这一关键词。</li>
<li>经济增长核算就是弄清经济增长有多少来自资本积累，多少 来自劳动增加，剩下的经济增长来源则统称为来自技术进步。我们 一般认为可持续增长最终来自技术进步。</li>
</ol>
<p>个人理解：经济增长一定是通过技术的进步，让人类的生产率提高。</p>

        <h3 id="第十五章-开放与经济增长"   >
          <a href="#第十五章-开放与经济增长" class="heading-link"><i class="fas fa-link"></i></a>第十五章 开放与经济增长</h3>
      <ol>
<li>对所有国家而言，若初始年份较穷的国家其随后的经济增长率相对较高，我们称这一情形为无条件趋同或绝对趋同。</li>
<li>从理论上来看，开放可以使一国引进先进技术、利用外资，以及促进该国产业专业化、提升企业效率、引进先进观念和思想。 同时，开放也会带来本国就业压力上升、金融风险加剧、环境污染恶化等弊端。</li>
<li>落后国家需要的不仅是开放，还要看向哪些国家开放，开放不是经济发展的万灵药。中国应当深化金融体制改革、改善合约执行并吸取其他国家因体制僵化而造成经济停滞的教训，在开拓债券 市场、推进人民币国际化的同时加强配套法律法规的建设。</li>
<li>在过去40多年中，中国经济通过出口导向型政策得以发展壮大。不同于最初的低技术制造品加工贸易，如今中国出口品的技术含量在不断提高，但我们仍需要进一步加强自主创新。</li>
<li>中国开放的下一步在于发展现代服务业出口贸易，包括金融、会计、法律等。中国应当从基于廉价劳动力的贸易战略和世界制造中心，逐步过渡到基于廉价人力资本的贸易战略和世界知识中心。</li>
<li>为发展中国的现代服务业出口，本章提出了”三城联动、辐 射内陆”的布局方案。”三城”指的是香港、深圳、武汉。中国在发展现代服务业出口时可以一方面借助香港雄厚的服务业基础和充足的金融资本、人力资本，另一方面发挥深圳的创新精神以及武汉 的人才优势、高铁枢纽优势。</li>
</ol>
<p>个人理解：中国已经不是廉价，低技术商品的代名词。如今，中国已经可以出口先进的技术和产品。</p>

        <h3 id="第十六章-经济增长理论与实践"   >
          <a href="#第十六章-经济增长理论与实践" class="heading-link"><i class="fas fa-link"></i></a>第十六章 经济增长理论与实践</h3>
      <ol>
<li>无论从国别经验来看，还是从全球发展来看，长久持续的经济增长都是不争的事实。增长理论过去半个世纪以来研究的核心问题是：既然物质资源有限，为何经济还能长期保持持续增长?</li>
<li>是因为技术进步内生化，知识的收益递增效应，人力资本积累对经济增长会有重要影响。</li>
<li>在改革开放初期，我国计划经济体制急需转型。为此，中央 政府拟定了渐进式改革措施，包括设立经济特区和推出一系列特色开发区。这一渐进式改革举措是我国获得快速发展的关键。</li>
<li>中国经济特区的成功经验包括:第一，”发展才是硬道理”，必须坚持开放发展；第二，吸引外资，吸纳先进技术和经 验；第三，重建劳工市场。</li>
<li>粤港澳大湾区的概念和定位是:体制创新的湾区，开放、包 容和关怀的湾区，胸怀世界的湾区。</li>
</ol>
<p>个人理解：经济永远会增长下去，因为技术的发展总是为了人类更好的。</p>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>book</tag>
        <tag>economy</tag>
      </tags>
  </entry>
  <entry>
    <title>俞敏洪 我曾走在崩溃的边缘 -- 读书笔记</title>
    <url>/posts/ee1f9a56/</url>
    <content><![CDATA[<p>读完这本书后，启发很大，尤其说的只要坚持做正确的事情，好的结果自然会来。人生就是一场马拉松，起起伏伏很正常，关键是要坚持做正确的事情，从绝望中寻找希望。这本书，是在微信阅读app上阅读的。</p>
<a id="more"></a>


        <h2 id="关于新东方的发展"   >
          <a href="#关于新东方的发展" class="heading-link"><i class="fas fa-link"></i></a>关于新东方的发展</h2>
      <p>按时间顺序。</p>
<ol>
<li>俞敏洪一开始是北大的老师，在和学校产生矛盾离开了学校。当时恰逢出国留学的热潮，俞敏洪原本打算考给别人培训GRE攒够钱就出国留学，最后却在机缘巧合下，将新东方越做越大。</li>
<li>俞敏洪自己几乎包办一切的小作坊阶段。</li>
<li>获取办学许可证，逐渐向正规化发展，还是家族化企业发展，聘请了很多家人。</li>
<li>由于教育质量好，内容出色，品牌开始爆炸式传播。</li>
<li>游说徐小平、王强等老同学加入，俞敏洪开始有很多强力的合作伙伴。</li>
<li>家族成员离开，借鉴西方管理知识，新东方开始制定明确的制度。公司成立，以及组织架构的不断改革。</li>
<li>外部投资的进入，一直到成功在美国上市，成为在美国上市的中国教育第一股。</li>
<li>老股东退出，新生代崛起；新的业务领域不断发展，直到今天的新东方。</li>
</ol>
<p>从这本书，我们看到了新东方从一个小的培训班逐步发展成一个国内领先的教育机构的经历。</p>

        <h2 id="名句"   >
          <a href="#名句" class="heading-link"><i class="fas fa-link"></i></a>名句</h2>
      <ul>
<li>做企业，要有大厨思维，3个大厨，让大厨之间能互相制衡</li>
<li>当有一件事情你不能做的时候，一定要找几个人同时帮你做。除非你相信自己已经给了这个人足够的利益，并且这些利益能够保证他一辈子都愿意跟你一起干。</li>
<li>要成功就得死磕：新东方的第一张办学许可证</li>
<li>从绝望中寻找希望，人生终将辉煌</li>
<li>人遇到机会时，还是要闯一闯的，虽然我们并不知道这到底是不是一个机会，也许它就是一个坑，是有风险的，但只要你觉得这件事情值得做，即使失败了也不会有太严重的后果，那就应该去试一下。</li>
<li>有的时候人确实要跳出舒适区，去感受另外一种生活</li>
<li>比如我们很多员工想要拿高工资，于是就不断地跳槽，这就是没有抓住关键因素。只有不断提升自己的专业能力，并且达到别人无法替代的程度，那才是你能够拿高工资的资本。</li>
<li>做人做事的核心要素：诚信、坦诚和信任。</li>
<li>但不管做企业也好，还是与人交往也好，我觉得有三个要素是最重要的：第一个是诚信，第二个是坦诚，第三个是信任。</li>
<li>教育还是要拼内容，拼教育质量，因为老百姓会用脚投票。</li>
<li>人生就是要时刻保持学习。</li>
</ul>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>美国生活经济学 -- 读书笔记</title>
    <url>/posts/6c817f2/</url>
    <content><![CDATA[<p>一直听朋友同事讲，美国生活的制度，自己本身没有接触过，所以也特别好奇和中国的与众不同，以及为什么这么多人移民美国，读完这本书后，会有一个更深刻的认识。本书是在微信阅读app上阅读的。</p>
<p>出国的目的本就不该纯粹是为了赚钱（如果单为赚钱的话，去非洲、东南亚赚大钱的机会比欧美要多得多，国内前20年更多。出国的目的，就是在人生旅途中看不同的风景，享受的是精彩的过程。</p>
<a id="more"></a>


        <h2 id="第一章-北美上学、就业与社保"   >
          <a href="#第一章-北美上学、就业与社保" class="heading-link"><i class="fas fa-link"></i></a>第一章 北美上学、就业与社保</h2>
      <ol>
<li>在北美上学可以使用学生贷款，以保证能顺利完成学业，可是学生贷款也往往给自己增加了很重的负担。</li>
<li>在北美就业也会遇到骗子，但是北美的骗子有“职业道德”，你上当后还会告诉你真相。北美就业的竞争压力非常大，不管多大年纪都可能会面临失业的危机，而年届中年一旦失业的后果是很可怕的。</li>
<li>美国没有全民医保，只有老人和很穷的人才享受政府提供的健康保险（这和英国不同，英国是全民医保）。奥巴马上台后规定公司必须给雇员购买保险，但是必须要通过保险经纪公司进行。并且在美国如果没有保险，看病是非常贵的。</li>
<li>美国的401K（美国的养老金计划）和加拿大的RRSP，其实只是部分中产阶级的个人退休金，这和第三类（自愿性个人养老金）的区别只是延期征税而已，特别在rollover（转移）之后便在自己的个人账户中由自己管理并可随意投资。绝大多数的美国人和加拿大人，退休之后是依赖社安金或CPP生活的，这一点和中国类似。401K最大的好处是延迟纳税。</li>
</ol>

        <h2 id="第二章-北美税收面面谈"   >
          <a href="#第二章-北美税收面面谈" class="heading-link"><i class="fas fa-link"></i></a>第二章 北美税收面面谈</h2>
      <ol>
<li>欧美国家分两类：高税收，高福利；低税收，低福利。税收是调节贫富差距的利器。</li>
<li>美国富人的遗产税非常高，起征点是100万美元，税率50%。所以为什么很多富人都建立基金或者捐款到大学。美国是唯一一个以公民身份征税的国家，逃税就是犯罪，而且是刑事犯罪。</li>
<li>美国是唯一对公民全球征税的国家。只要你是美国公民，哪怕你不在美国居住（reside），一到了每年的报税季节，你在世界各地所获得的收入和拥有的财产都必须向美国国税局申报，应该缴纳的税款一分都不能少。</li>
<li>缩小贫富差距的利益均沾论，就是通过征税。</li>
</ol>

        <h2 id="第三章-北美房市、物价与移民"   >
          <a href="#第三章-北美房市、物价与移民" class="heading-link"><i class="fas fa-link"></i></a>第三章 北美房市、物价与移民</h2>
      <ol>
<li>一个社会一定要让穷人过得舒心，如果穷人不舒心充满戾气的话，那富人也不会舒心。也正因如此，在北美繁华的商业区，形成了不同价位的商店服务于不同的消费群体，富人可以选择质量好、价格比较昂贵的商品来消费，而穷人也可以选择价位低、耐用性略差的商品来消费。</li>
<li>租房而居的都市人。租房已经渐成北美人，特别是北美青年人住房的首选。北美租房而居的人越来越多，收入越来越高，年龄越来越大。纽约市，只有人口不断流动，才能保持城市的活力。一个城市，一旦住房拥有率的人口超过了70%，这个城市就会因为老化而失去活力了。</li>
<li>在北美，法律是保护房客的利益，房产税平均是2%左右。</li>
</ol>

        <h2 id="第四章-北美人的思维观念"   >
          <a href="#第四章-北美人的思维观念" class="heading-link"><i class="fas fa-link"></i></a>第四章 北美人的思维观念</h2>
      <ol>
<li>平等观念深入人心。纽约的市长会和大家一样，挤地铁去上班；美国的流浪汉和乞丐也是有很大不同的……美国的教育理念、平等观念深入人心，而且美国高昂的遗产税导致美国的富豪往往选择捐赠财产而不是给子女继承。</li>
<li>欧美的富人如何预防败家子。通过信托的方式，每年只允许子女拿出一小部分钱。</li>
<li>华尔街大部分都是犹太人，犹太人是特殊群体的存在，非常聪明。犹太人在金钱上还有一个特点，就是他们用钱时把消费和投资分得清清楚楚。什么叫投资？以犹太人最专业的说法，投资“是牺牲或放弃现在用于消费的价值，以获取未来更大价值的一种经济活动”。</li>
<li>欧美富人为何喜欢慈善捐款。不捐也得被迫“充公”，因为后台交不起物业税或者房产税，只能赠送给政府。另外如果不捐款，需要交大量的税收，白白被政府拿走，还不如捐给大学做奖学金。</li>
</ol>

        <h2 id="第五章-北美人VS中国人"   >
          <a href="#第五章-北美人VS中国人" class="heading-link"><i class="fas fa-link"></i></a>第五章 北美人VS中国人</h2>
      <ol>
<li>为何欧美富翁不娶美女当太太。婚姻是一项长线投资。美女提供漂亮的外表，富翁出钱获得美色，看似是一场公平的交易，但如果美女仅仅只拥有美貌的话，跟美女结婚就绝对不是一项划算的投资。从经济学的角度讲，美女拥有的是贬值资产，不但贬值而且会加速贬值，而富人拥有的是增值资产。</li>
<li>北美人也爱买房么？ 房价上涨是一把双刃剑，因为房价上涨意味着，房产税增加，如果税高到无法承担，屋主就要卖房搬家。</li>
<li>房租反映的是普通百姓的收入水平，而有泡沫的房价反映的是高收入人群的支付能力。租售比超出合理范围越大，则表示房地产泡沫越严重。房子租售比是衡量房价是否合理的精确标尺，特别是对于个人投资者而言。</li>
<li>为什么总有人晒美国工资高物价低。中国，工资5000元，吃一顿肯德基30元，下馆子最少100元，买条Levi’s（李维斯）牛仔裤400元，买辆车最少3万元（如夏利）；美国，工资5000美元，吃顿肯德基4美元，下馆子40美元，买条Levi’s牛仔裤20美元，买辆车（如宝马）最多3万美元。尤其是“中国制造”商品在美国卖得比中国还要便宜。例如，一双耐克运动鞋，在中国需要700元人民币，在美国只需300元人民币上下。是因为，出口美国的商品只能用美元结算，并且美国人掌握了定价权。</li>
<li>美元的特殊霸权性和由此掌握的定价权。</li>
<li>美国富人推崇的9个致富习惯。攒钱很重要，身体健康是赚钱的本钱，生活习惯对于财富人生很重要，重视人脉关系和自我成长，喜欢结交新朋友，坚信生活的命运由自己决定，致富依赖创造性而不仅是聪明，喜爱他们的工作，勇于冒风险。</li>
</ol>

        <h2 id="实现美国梦的财经标志"   >
          <a href="#实现美国梦的财经标志" class="heading-link"><i class="fas fa-link"></i></a>实现美国梦的财经标志</h2>
      <ol>
<li>拥有价值100万美元以上的房子。</li>
<li>支票账户里有7425美元的存款</li>
<li>每年最少在国外度假2次。</li>
<li>拥有一辆价值至少3.8万美元的汽车。</li>
<li>家庭年收入达18.5万美元。</li>
<li>储蓄账户中有3.5万美元的应急存款。</li>
<li>拥有一套度假屋。</li>
<li>拥有一套度假屋。</li>
<li>在周末可以旅行。</li>
<li>无债一身轻。 </li>
<li>有钱雇用清扫工。</li>
<li>乘飞机能坐头等舱</li>
</ol>
<p>加油吧，少年！！</p>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>认知觉醒：开启自我改变的原动力-- 读书笔记</title>
    <url>/posts/fa70c6fa/</url>
    <content><![CDATA[<p>早冥读写跑，人生五件套，不断提高自己的元认知能力。</p>
<a id="more"></a>


        <h1 id="关于本书以及作者"   >
          <a href="#关于本书以及作者" class="heading-link"><i class="fas fa-link"></i></a>关于本书以及作者</h1>
      <p>有一个年轻人，本来是按部就班地上班，下班后就找朋友们聚会，时常喝到烂醉，从不主动看书、运动，打发时间的方式，就是刷视频、看八卦新闻，打游戏、实在无聊了，就蒙起被子睡大觉。</p>
<p>直到36岁那年，他才突然觉醒，不能再这样下去了，一定得主动做点什么才行。<br>于是，他开始早起、阅读、写作、健身。他的思维完全改变，他的人生也发生了惊天逆转。从一个被生活推着走的人，最终成为了一个知名的自媒体人和作家，给无数的人带来了正能量。</p>
<p>这个人，就是周岭。《认知觉醒》就是他自2017年开始改变后，写下的成长与蜕变之书。书上提出的成长理念与方法，不仅帮助了他走出混沌，更能帮助像他一样焦虑与迷茫的年轻人觉醒与改变。</p>

        <h1 id="内容"   >
          <a href="#内容" class="heading-link"><i class="fas fa-link"></i></a>内容</h1>
      
        <h2 id="第一章-大脑——一切问题的起源"   >
          <a href="#第一章-大脑——一切问题的起源" class="heading-link"><i class="fas fa-link"></i></a>第一章 大脑——一切问题的起源</h2>
      
        <h3 id="摘抄"   >
          <a href="#摘抄" class="heading-link"><i class="fas fa-link"></i></a>摘抄</h3>
      <ol>
<li>三重大脑<ul>
<li>本能脑：结构很简单，只有一个原始的反射模块，可以让爬行动物对环境快速做出本能反应，比如遇到危险就战斗或逃跑，遇到猎物就捕食，遇到心仪的异性就追求等。</li>
<li>情绪脑：哺乳动物的大脑里发展出的一个独特的情感区域（边缘系统），有了情绪的加持，哺乳动物就能在恶劣的环境中趋利避害，大大提升了其生存优势，比如恐惧情绪可以让自己远离危险，兴奋情绪可以让自己专注捕猎，愉悦情绪可以增强同伴间的亲密度，伤心情绪能引来同情者的关爱等。</li>
<li>理智脑——也称为理性脑或思考脑。人类大脑的前额区域进化出的“新皮层”，让人类产生语言、创造艺术、发展科技、建立文明。虽然理智脑高级，但是力量实在是太弱了。人和人的差距，就是在理智脑上，所以要多做你认为正确的事情。</li>
</ul>
</li>
<li>焦虑的根源，<strong>想同时做很多事，又想立即看到效果</strong>。王小波说：<strong>人的一切痛苦，本质上都是对自己无能的愤怒</strong>。焦虑的本质也契合这一观点：自己的欲望大于能力，又极度缺乏耐心。焦虑就是因为欲望与能力之间差距过大。</li>
<li>得耐心者得天下，要学会延迟满足。面对诱惑，学会延迟满足，变对抗为沟通。要学会“后娱乐”，好处是将享乐的快感建立在完成重要任务后的成就感之上，很放松、踏实，就像一种奖赏；而“先娱乐”虽然刚开始很快活，但精力会无限发散，拖延重要的工作，随着时间的流逝，人会空虚、焦虑。</li>
</ol>

        <h3 id="思考"   >
          <a href="#思考" class="heading-link"><i class="fas fa-link"></i></a>思考</h3>
      <p>有的时候，放不下手机，其实就是理智脑没有战胜本能脑和情绪脑，所以要多练习理智脑，一定要控制用手机的时间，比方晚上9点后就不能看手机了，自己通过关闭很多视频的内容和推荐，卸载掉抖音和小红书，目前看效果很好。</p>
<p>有时候自己也焦虑，多到底还是因为欲望大于能力，记住要事优先，这也是高效能人士讲的其中一个习惯。</p>
<p>一定要有耐心，学会延迟满足，学会<strong>后娱乐</strong>的方式。记得在读书和刚毕业的前几年，周末的时候时间都没有浪费，往往都是在学习新的技术，提高自己的能力，现在想想当时也是采用后娱乐的方式，在周六的时候，想办法提高自己，在周天的时候，出去痛痛快快玩一天。这让我想起了小时候做作业，通常我都是想尽可能快的把作业做完，然后再去玩，原来这就是一个后娱乐的方式。</p>

        <h2 id="第二章-生命留给我们的彩蛋"   >
          <a href="#第二章-生命留给我们的彩蛋" class="heading-link"><i class="fas fa-link"></i></a>第二章 生命留给我们的彩蛋</h2>
      
        <h3 id="摘抄-1"   >
          <a href="#摘抄-1" class="heading-link"><i class="fas fa-link"></i></a>摘抄</h3>
      <ol>
<li>人生是一场消除模糊的比赛。学习知识的目的是“消除模糊”，而获取知识的方法也是“消除模糊”。一旦有模糊，就要想办法去消除它。</li>
<li>感性：顶级的成长竟然是“凭感觉”。<strong>小事听从你的脑，大事听从你的心。这话不无道</strong>。</li>
</ol>

        <h3 id="思考-1"   >
          <a href="#思考-1" class="heading-link"><i class="fas fa-link"></i></a>思考</h3>
      <p>模糊其实就是自己不擅长的东西，任何恐惧或者害怕的东西，都需要自己去慢慢拆解它，战胜它。</p>
<p>感性，其实就是直觉，所谓的大事听从你的心，就是跟着直觉走。</p>

        <h2 id="第三章-人类的终极能能力"   >
          <a href="#第三章-人类的终极能能力" class="heading-link"><i class="fas fa-link"></i></a>第三章 人类的终极能能力</h2>
      
        <h3 id="摘抄-2"   >
          <a href="#摘抄-2" class="heading-link"><i class="fas fa-link"></i></a>摘抄</h3>
      <ol>
<li>元认知，其实就是反思能力，这是人最高级的能力。</li>
<li>一个人要想掌握命运之船的风帆，就必须主动、刻意地锻炼自己的元认知能力，让理智脑更多地参与大脑的决策，掌握大脑的主导权，这样，我们就会比一般人走得更快、更远。</li>
<li>为什么抖音、快手等短视频App让人看得根本停不下来？因为一个视频结束后系统会立即自动跳到下一个，在整个过程中，大脑都被本能和情绪劫持，理智脑根本没有主动启动的机会。</li>
<li>元认知能力强的人就是这样：无论是当下的注意力、当天的日程安排，还是长期的人生目标，他们都力求想清楚意义、进行自我审视和主动控制，而不是随波逐流。</li>
<li>高尔基曾经说：每一次克制自己，就意味着比以前更强大。我以前不是很理解这句话的意思，但是现在懂了。因为每克制自己一次，就相当于进行了一次自我审视和主动控制，相当于进行了一次锻炼。元认知能力要是能经常锻炼，我们理智脑的自控力可不就越来越强大了。</li>
</ol>

        <h3 id="思考-2"   >
          <a href="#思考-2" class="heading-link"><i class="fas fa-link"></i></a>思考</h3>
      <p>要提高自己的元认知，就是反思自己，就是让理智脑审视自己。</p>
<ul>
<li>当晚上9点孩子睡觉后，就不要再耍手机，浪费时间。</li>
<li>当在公司的时候，尽量不要看手机。</li>
<li>关闭手机的任何推荐算法，任何视频推荐。</li>
<li>地铁上尽量看书。</li>
<li>看到手机有消息后，不要第一时间打开，因为一旦打开可能下一个视频在等你。</li>
</ul>
<p>记住，<strong>每一次克制自己，就意味着比以前更强大</strong>。</p>

        <h2 id="第四章-专注力——情绪和智慧的交叉地带"   >
          <a href="#第四章-专注力——情绪和智慧的交叉地带" class="heading-link"><i class="fas fa-link"></i></a>第四章 专注力——情绪和智慧的交叉地带</h2>
      
        <h3 id="摘抄-3"   >
          <a href="#摘抄-3" class="heading-link"><i class="fas fa-link"></i></a>摘抄</h3>
      <ol>
<li>分心走神的原因无非两个。一是觉得当下太无聊，所以追求更有意思的事情；二是觉得当下太痛苦，于是追求更舒适的事情。分心走神的本质是逃避。</li>
<li>学习专注：主动选择信息和深度沉浸。就是要深度学习，保持专注。</li>
</ol>

        <h3 id="思考-3"   >
          <a href="#思考-3" class="heading-link"><i class="fas fa-link"></i></a>思考</h3>
      <p>这让我想起了，我初中和高中时很努力的学习，记得在初中时，第一次期中考试考了全班大概40名，通过自己刻苦的学习，第二次考了20名，第三次考了第10名，后面就基本上在10名左右，前面的成绩的进步是可以通过刻苦学习换来，但是后面的其实自己不懂要专注要总结，所以成绩并没有提升到前几名，但是中间也有考到第三名的时候，好在最后中考的时候，因为中考之前在家我记得放了三天假，这三天自己在高度专注的学习，后来也是中考取得了比较好的成绩。其实现在想想，如果当时自己可以始终保持专注，多总结，其实成绩还会更好，<strong>这就是专注的力量。</strong> 包括自己后来考研时，也是有同样的理解。</p>

        <h2 id="第五章-学习力——学习不是一味地努力"   >
          <a href="#第五章-学习力——学习不是一味地努力" class="heading-link"><i class="fas fa-link"></i></a>第五章 学习力——学习不是一味地努力</h2>
      
        <h3 id="摘抄-4"   >
          <a href="#摘抄-4" class="heading-link"><i class="fas fa-link"></i></a>摘抄</h3>
      <p><img src="https://img-blog.csdnimg.cn/direct/c2b576e2d5904ca2bec7a8762da2ddb3.png" alt="在这里插入图片描述"></p>
<ol>
<li>被动学习：如听讲、阅读、视听、演示，这些活动对学习内容的平均留存率为5%、10%、20%和30%。主动学习：如通过讨论、实践、教授给他人，将被动学习的内容留存率提升到50%、75%和90%。</li>
<li>逼迫自己获取高质量的知识以及深度缝接新知识，再用自己的语言或文字教授他人，是为深度学习之道。</li>
<li>逼迫自己获取高质量的知识以及深度缝接新知识，再用自己的语言或文字教授他人，是为深度学习之道。</li>
<li>所有痛苦都是上天给我们的成长提示。无论是身体不适、情绪低落，还是学业落后、事业受挫，有痛苦出现，说明哪里出了问题，这不就是在告诉我们应该努力的方向吗？</li>
<li>极度专注+主动休息，如此反复。</li>
</ol>

        <h3 id="思考-4"   >
          <a href="#思考-4" class="heading-link"><i class="fas fa-link"></i></a>思考</h3>
      <p>读书的过程，我现在的步骤是，读书 + 写读书笔记(摘抄 + 思考) + 实践。</p>
<p>自己认知的深度学习能力是：理解原文，通过自己的语言能描述意思，然后总结反思，是否可以关联到其他的知识。</p>
<p>在考研的时候，学的时候就要好好学，玩的时候也是好好玩，所谓的玩就是当时同学在一起打篮球。所以要学会均衡。</p>

        <h2 id="第六章-行动力——没有行动世界只是个概念"   >
          <a href="#第六章-行动力——没有行动世界只是个概念" class="heading-link"><i class="fas fa-link"></i></a>第六章 行动力——没有行动世界只是个概念</h2>
      
        <h3 id="摘抄-5"   >
          <a href="#摘抄-5" class="heading-link"><i class="fas fa-link"></i></a>摘抄</h3>
      <ol>
<li>头天晚上睡前留出10分钟来做这件事，第二天早上再拿几分钟回顾，工作过程中不时地查看、调整。一天24小时，在开始的时候多花点时间想清楚什么任务是最重要的，并提醒自己投身于此，这样，工作效率之高会超乎想象。</li>
<li>想先看到结果再行动的人往往无法看到结果。</li>
<li>如果你觉得别人讲的道理有理有据，而自己暂时无法反驳，碰巧自己又非常想做这件事，那就相信他们说的是对的，然后笃定地行动</li>
</ol>

        <h3 id="思考-5"   >
          <a href="#思考-5" class="heading-link"><i class="fas fa-link"></i></a>思考</h3>
      <p>光有思考是不行的，要把思考转化成行动，要坚持每天的反思和总结。</p>

        <h2 id="第七章-情绪力——情绪是多角度看问题的智慧"   >
          <a href="#第七章-情绪力——情绪是多角度看问题的智慧" class="heading-link"><i class="fas fa-link"></i></a>第七章 情绪力——情绪是多角度看问题的智慧</h2>
      
        <h3 id="摘抄-6"   >
          <a href="#摘抄-6" class="heading-link"><i class="fas fa-link"></i></a>摘抄</h3>
      <ol>
<li>世界上任何一个人、任何一件物、任何一件事都是多维立体的。从每一个角度观察，都能得到不同的信息，就像我们手中的镜头，只要微微偏离一点或拉近、拉远，屏幕上的图像就会发生变化。</li>
<li>世界上任何一个人、任何一件物、任何一件事都是多维立体的。从每一个角度观察，都能得到不同的信息，就像我们手中的镜头，只要微微偏离一点或拉近、拉远，屏幕上的图像就会发生变化。</li>
</ol>

        <h3 id="思考-6"   >
          <a href="#思考-6" class="heading-link"><i class="fas fa-link"></i></a>思考</h3>
      <p>遇到生气或者困难的时候，要换一个角度看待问题，这样或许就会有不一样的收获。</p>

        <h2 id="第八章-早冥读写跑，人生五件套——成本最低的成长之道"   >
          <a href="#第八章-早冥读写跑，人生五件套——成本最低的成长之道" class="heading-link"><i class="fas fa-link"></i></a>第八章 早冥读写跑，人生五件套——成本最低的成长之道</h2>
      
        <h3 id="摘抄-7"   >
          <a href="#摘抄-7" class="heading-link"><i class="fas fa-link"></i></a>摘抄</h3>
      <p>早起，冥想，读书，写作和跑步。</p>

        <h3 id="思考-7"   >
          <a href="#思考-7" class="heading-link"><i class="fas fa-link"></i></a>思考</h3>
      <ul>
<li>早。对于自己而言，早起或许比较困难，但是每天早上如果是已经差不多醒了后，就不要赖床了，然后早起。</li>
<li>冥。其实就是锻炼自己专注的能力，目前还没尝试过。</li>
<li>读。继续坚持读书，写笔记，重思考，多实践。</li>
<li>写。近几年，技术方面的文章写的比较少了，要继续加强。</li>
<li>跑。基本可以每周跑两次，每次跑10公里，每年希望可以参加两次半马，马上4月21号，上海半马就要开始了。</li>
</ul>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>book</tag>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>Container Runtime 如何用CNI</title>
    <url>/posts/f378b788/</url>
    <content><![CDATA[
        <h2 id="前言"   >
          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a>前言</h2>
      <p>本文介绍了Container Runtime 调用CNI的流程，并且通过简单的代码来模拟CNI的调用。</p>
<a id="more"></a>

        <h2 id="CNI-介绍"   >
          <a href="#CNI-介绍" class="heading-link"><i class="fas fa-link"></i></a>CNI 介绍</h2>
      <p>CNI是Container Networking Interface的缩写，它的目的是标准化容器运行时引擎和网络实现之间的接口，它是将容器连接到网络的最低标准方法。</p>
<p><span class="exturl"><a class="exturl__link"   href="https://github.com/containernetworking" >CNI</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 项目主要是做了三件事情：</p>
<ol>
<li><span class="exturl"><a class="exturl__link"   href="https://github.com/containernetworking/cni/blob/master/SPEC.md" >CNI接口的定义</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://github.com/containernetworking/cni/blob/1773a1f24c559506d7d36e838db19338e266878f/cnitool/cnitool.go#L25" >Golang的library</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 提供CNI接口的实现。</li>
<li><span class="exturl"><a class="exturl__link"   href="https://github.com/containernetworking/plugins" >CNI插件</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>的实现，包括Bridge,ipvlan,macvlan等。</li>
</ol>
<p>可以用下面这张图来总结CNI的工作原理：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS8yNGQ5ODVkYjllMjA0MzI0MDUxMGMzMTg2YTcxNTdkZS94bWxub3RlLzU3NUI2NkE3RkU4NTQ1Mjc5NkU3QjBCM0E0QzMyMEE0LzEwODQ3" alt="image"></p>
<p>在理解CNI时，需要注意以下几点：</p>
<ul>
<li>实现CNI标准的插件是二进制的，而不是守护进程。在运行时，它应该至少具有<span class="exturl"><a class="exturl__link"   href="http://man7.org/linux/man-pages/man7/capabilities.7.html" >cap-net-admin</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>功能。</li>
<li>网络定义或网络配置存储为JSON文件。这些JSON文件通过stdin流式传输到插件。类似的json文件在k8s中会存储在/et/cni/net.d/下面，如：10-calico.conflist</li>
<li>只有在创建容器（运行时变量）时才知道的任何信息都应该通过环境变量传递给插件。不过，在最新的CNI中，也可以通过stdin上的JSON发送某些运行时配置，特别是对于一些扩展和可选功能, <span class="exturl"><a class="exturl__link"   href="https://github.com/containernetworking/cni/blob/master/CONVENTIONS.md" >参考</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li>二进制文件中不应该有上述两个之外的任何其他输入配置。</li>
<li>CNI插件负责连接容器，并希望隐藏网络复杂性。</li>
</ul>

        <h2 id="容器运行时-Container-Runtime-介绍"   >
          <a href="#容器运行时-Container-Runtime-介绍" class="heading-link"><i class="fas fa-link"></i></a>容器运行时(Container Runtime)介绍</h2>
      <p>容器运行时engine是一个守护进程，位于容器调度和容器创建的二进制文件的实际实现之间。这个守护进程不一定需要作为根用户运行，它监听来自调度程序的请求。它通过容器标准(OCI)，使用外部二进制文件来实际创建或删除容器。</p>
<p>例如，在kubernetes中，容器运行时可以是cri-o或cri-containerd），它监听来自kubelet的请求，kubelet是通过cri接口从位于每个节点的调度程序发出的代理，容器运行时通过OCI标准方式，包括OCI-Image和OCI-Runtime，调用runc（实现OCI运行时规范的二进制文件，或者如：kata-runtime）来创建容器，调用flannel（实现CNI的二进制文件，或者如：calico等）来配置网络。上述过程，如下图：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS8yNGQ5ODVkYjllMjA0MzI0MDUxMGMzMTg2YTcxNTdkZS94bWxub3RlLzE4M0ZGQzRDMjlERTQ2RkY4MzlGOEE3QTg0RjlDRDA0LzEwODg1" alt="image"></p>
<p>容器运行时需要执行以下操作才能真正创建可用的容器：</p>
<ul>
<li>创建rootfs文件系统。</li>
<li>创建容器（在命名空间中独立运行并受cgroups限制的进程集）。</li>
<li>将容器连接到网络。</li>
<li>启动用户进程。</li>
</ul>
<p>如下图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS8yNGQ5ODVkYjllMjA0MzI0MDUxMGMzMTg2YTcxNTdkZS94bWxub3RlLzM4MzQ2N0EyNTQyRjRDQUU5OUMzMzg4NDJFNkIxQTQ2LzEwODkz" alt="image"></p>
<p>就网络部分而言，最重要的是容器运行时要求OCI运行时二进制文件将容器进程放入新的网络命名空间（Net namespace）。然后容器运行时将使用新的网络名称空间作为运行时环境变量变量调用CNI插件。CNI插件应该拥有所有的信息，以便实现网络配置。</p>

        <h2 id="容器运行如何使用CNI"   >
          <a href="#容器运行如何使用CNI" class="heading-link"><i class="fas fa-link"></i></a>容器运行如何使用CNI</h2>
      <p>下面以一个例子，说明容器运行时如何使用CNI的<span class="exturl"><a class="exturl__link"   href="https://github.com/containernetworking/plugins/tree/master/plugins/main/bridge" >Bridge</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>将容器连接到网桥，下面将使用简单的bash命令”模拟”运行时的操作。</p>

        <h3 id="配置阶段"   >
          <a href="#配置阶段" class="heading-link"><i class="fas fa-link"></i></a>配置阶段</h3>
      <p>在完成下面的例子演示之前，需要做基本的服务器配置。只需要确保所需的二进制程序存在即可。需要OCI运行时二进制(Runc), CNI插件二进制(Bridge，Host Loca(用于ip的分配))。<br>我们可以从github下载预构建的二进制文件，也可以从源代码构建二进制文件。前提是需要一个go的环境。</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">go get github.com&#x2F;opencontainers&#x2F;runc</span><br><span class="line">go get github.com&#x2F;containernetworking&#x2F;plugins</span><br><span class="line">cd $GOPATH&#x2F;src&#x2F;github.com&#x2F;containernetworking&#x2F;plugins</span><br><span class="line">.&#x2F;build.sh</span><br><span class="line">sudo mkdir -p &#x2F;opt&#x2F;cni&#x2F;&#123;bin,netconfs&#125;</span><br><span class="line">sudo cp bin&#x2F;* &#x2F;opt&#x2F;cni&#x2F;bin&#x2F;</span><br><span class="line">which &#x2F;opt&#x2F;cni&#x2F;bin&#x2F;&#123;bridge,host-local&#125; runc</span><br></pre></td></tr></table></div></figure>
<p>在配置阶段，先创建容器需要连接的Bridge, 类似docker0的网桥</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">ip link add name br0 type bridge</span><br><span class="line">ip addr add 10.10.10.1&#x2F;24 dev br0</span><br><span class="line">ip link set dev br0 up</span><br></pre></td></tr></table></div></figure>
<p>然后，添加网络配置的文件如下：</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">export NETCONFPATH&#x3D;&#x2F;opt&#x2F;cni&#x2F;netconfs</span><br><span class="line">cat &gt; $NETCONFPATH&#x2F;10-mynet.conf &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;cniVersion&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;mynet&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;bridge&quot;,</span><br><span class="line">    &quot;bridge&quot;: &quot;br0&quot;,             </span><br><span class="line">    &quot;isGateway&quot;: true,</span><br><span class="line">    &quot;ipMasq&quot;: true,</span><br><span class="line">    &quot;ipam&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;host-local&quot;,</span><br><span class="line">        &quot;subnet&quot;: &quot;10.10.10.0&#x2F;24&quot;,</span><br><span class="line">        &quot;routes&quot;: [</span><br><span class="line">            &#123; &quot;dst&quot;: &quot;0.0.0.0&#x2F;0&quot; &#125;</span><br><span class="line">        ],</span><br><span class="line">     &quot;dataDir&quot;: &quot;&#x2F;run&#x2F;ipam-state&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;dns&quot;: &#123;</span><br><span class="line">      &quot;nameservers&quot;: [ &quot;8.8.8.8&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></div></figure>

        <h3 id="容器Runtime阶段"   >
          <a href="#容器Runtime阶段" class="heading-link"><i class="fas fa-link"></i></a>容器Runtime阶段</h3>
      <p>容器调度器(如：k8s)最终将命令容器运行时启动容器。运行时将执行以下简化步骤：</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># Step 1: 创建 the rootfs 目录</span><br><span class="line">mkdir bundle &amp;&amp; cd bundle&#x2F;</span><br><span class="line">mkdir -p rootfs &amp;&amp; docker export $(docker create busybox) | tar -C rootfs -xvf -</span><br><span class="line"></span><br><span class="line"># Step 2: 创建 OCI runtime config</span><br><span class="line">runc spec</span><br><span class="line"># Step 3: 启动container</span><br><span class="line">runc run busyboxid</span><br><span class="line"># Step 4: 另一个窗口，找到net namespace的路径，并软连接到&#x2F;var&#x2F;run&#x2F;netns&#x2F;xx</span><br><span class="line">ns&#x3D;$(cat &#x2F;var&#x2F;run&#x2F;runc&#x2F;busyboxid&#x2F;state.json | jq &#39;.namespace_paths.NEWNET&#39; -r)</span><br><span class="line">mkdir -p &#x2F;var&#x2F;run&#x2F;netns</span><br><span class="line">ln -sf $ns &#x2F;var&#x2F;run&#x2F;netns&#x2F;busyboxid</span><br><span class="line">ip netns </span><br><span class="line"></span><br><span class="line"># $ runc list</span><br><span class="line"># ID          PID         STATUS      BUNDLE         CREATED                          OWNER</span><br><span class="line"># busyboxid   17136       running     &#x2F;root&#x2F;bundle   2019-08-04T14:15:11.927965079Z   root</span><br></pre></td></tr></table></div></figure>
<p>然后再创建bash环境变量，包括了有网络namespace的容器运行时所需要的信息。</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">export NETCONFPATH&#x3D;&#x2F;opt&#x2F;cni&#x2F;netconfs</span><br><span class="line">export CNI_PATH&#x3D;&#x2F;opt&#x2F;cni&#x2F;bin&#x2F;</span><br><span class="line">export CNI_CONTAINERID&#x3D;busyboxid</span><br><span class="line">export CNI_NETNS&#x3D;&#x2F;var&#x2F;run&#x2F;netns&#x2F;busyboxid</span><br><span class="line">export CNI_IFNAME&#x3D;eth0</span><br><span class="line">export CNI_COMMAND&#x3D;ADD</span><br></pre></td></tr></table></div></figure>
<p>最后，将调用在stdin中提供可配的conf和上述变量的cni二进制文件。运行时将以JSON格式返回结果。</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ cat $NETCONFPATH&#x2F;10-mynet.conf | $CNI_PATH&#x2F;bridge</span><br><span class="line">&#123;</span><br><span class="line">    &quot;cniVersion&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;ip4&quot;: &#123;</span><br><span class="line">        &quot;ip&quot;: &quot;10.10.10.2&#x2F;24&quot;,</span><br><span class="line">        &quot;gateway&quot;: &quot;10.10.10.1&quot;,</span><br><span class="line">        &quot;routes&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;dst&quot;: &quot;0.0.0.0&#x2F;0&quot;,</span><br><span class="line">                &quot;gw&quot;: &quot;10.10.10.1&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;dns&quot;: &#123;</span><br><span class="line">        &quot;nameservers&quot;: [</span><br><span class="line">            &quot;8.8.8.8&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p>最后，可以通过在容器网络空间内运行IP命令来检查网络接口是否已正确设置。</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ ip netns exec busyboxid ip a s eth0</span><br><span class="line">3: eth0@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link&#x2F;ether d6:d6:48:92:b3:25 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 10.10.10.2&#x2F;24 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::d4d6:48ff:fe92:b325&#x2F;64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">$ ip netns exec busyboxid ip route</span><br><span class="line">default via 10.10.10.1 dev eth0</span><br><span class="line">10.10.10.0&#x2F;24 dev eth0  proto kernel  scope link  src 10.10.10.2</span><br></pre></td></tr></table></div></figure>

<p>删除，只需更改CNI_COMMAND即可：</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">export CNI_COMMAND&#x3D;DEL</span><br><span class="line">cat $NETCONFPATH&#x2F;10-mynet.conf | $CNI_PATH&#x2F;bridge</span><br><span class="line"># no output expected when success</span><br></pre></td></tr></table></div></figure>

        <h2 id="Multi-Interface-情况"   >
          <a href="#Multi-Interface-情况" class="heading-link"><i class="fas fa-link"></i></a>Multi-Interface 情况</h2>
      <p>如果需要将容器连接到多个网络，也就是说在容器中可以配置多个网卡，可以通过$netconfpath中的多个网络配置实现。参考如下的shell:</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">export CNI_COMMAND&#x3D;ADD</span><br><span class="line">for conf in $NETCONFPATH&#x2F;*.conf; do</span><br><span class="line">  echo &quot;$&#123;CNI_COMMAND&#125;ing $conf&quot;</span><br><span class="line">  export CNI_IFNAME&#x3D;$(cat $conf | jq -r &#39;.name&#39;)</span><br><span class="line">  plugin&#x3D;$(cat $conf |jq -r &#39;.type&#39;)</span><br><span class="line">  echo &quot;cat $conf | $CNI_PATH&#x2F;$plugin&quot;</span><br><span class="line">  res&#x3D;$(cat $conf | $CNI_PATH&#x2F;$plugin)</span><br><span class="line">  echo $res | jq -r .</span><br><span class="line">done</span><br></pre></td></tr></table></div></figure>
<p>基本上是对每个网络配置进行循环添加。</p>

        <h2 id="总结"   >
          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a>总结</h2>
      <p>CNI负责了在容器创建或删除期间的所有与网络相关的操作，它将创建所有规则以确保从容器进和出的网络连接正常，但它并不负责设置网络介质，例如创建网桥或分发路由以连接位于不同主机中的容器。CNI的目标是隐藏网络复杂性，以使运行时代码库更干净，同时使第三方提供商能够创建自己的插件，并将它们轻松集成到使用CNI标准的的所有容器编排器中。</p>

        <h2 id="参考"   >
          <a href="#参考" class="heading-link"><i class="fas fa-link"></i></a>参考</h2>
      <ol>
<li><span class="exturl"><a class="exturl__link"   href="http://www.dasblinkenlichten.com/understanding-cni-container-networking-interface/" >http://www.dasblinkenlichten.com/understanding-cni-container-networking-interface/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://jvns.ca/blog/2016/12/22/container-networking/" >https://jvns.ca/blog/2016/12/22/container-networking/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ol>
]]></content>
      <categories>
        <category>cloud native</category>
      </categories>
      <tags>
        <tag>cloud native</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP/HTTPS Testing Magic Tool GO-VCR</title>
    <url>/posts/9e3eb236/</url>
    <content><![CDATA[<p>When developing applications that rely on external APIs, testing can become a challenge. You want your tests to be reliable, fast, and not dependent on the availability or performance of third-party services. Enter go-vcr, a fantastic tool that makes HTTP/HTTPS testing straightforward and efficient. In this blog post, we’ll explore what go-vcr is, why you should use it, and how it works.</p>
<a id="more"></a>


        <h1 id="What-is-go-vcr"   >
          <a href="#What-is-go-vcr" class="heading-link"><i class="fas fa-link"></i></a>What is go-vcr ?</h1>
      <p><span class="exturl"><a class="exturl__link"   href="https://github.com/dnaeon/go-vcr/tree/v3" >go-vcr</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>  is a library for the Go programming language that records HTTP interactions and replays them during future test runs. Inspired by Ruby’s vcr gem, go-vcr stands for “Go Video Cassette Recorder”. It essentially acts as a “cassette recorder” for HTTP requests and responses, allowing you to save these interactions and replay them later.</p>
<p>Key Features:</p>
<ul>
<li><strong>Record and Replay</strong>: Capture HTTP interactions and replay them during tests.</li>
<li><strong>Cassette Files</strong>: Store interactions in “cassette” files (YAML format) for easy management.</li>
<li><strong>Deterministic Testing</strong>: Ensure your tests are not affected by external API changes or downtime.</li>
</ul>

        <h1 id="Why-Use-go-vcr"   >
          <a href="#Why-Use-go-vcr" class="heading-link"><i class="fas fa-link"></i></a>Why Use go-vcr?</h1>
      <p>Testing HTTP interactions in your applications can be problematic for several reasons. Here’s why go-vcr is a valuable tool for any Go developer:</p>
<ol>
<li><strong>Reliability</strong>:<br>Third-party APIs can be unreliable. They may have downtime, rate limits, or return inconsistent data. By using go-vcr, you ensure your tests are not dependent on the availability or performance of these services.</li>
</ol>
<ol start="2">
<li><p><strong>Speed</strong>:<br>Network requests can slow down your tests. When running a suite of tests, especially in CI/CD pipelines, speed is crucial. go-vcr speeds up tests by using recorded responses instead of making actual HTTP requests.</p>
</li>
<li><p><strong>Consistency</strong>:<br>APIs can return different results over time due to data changes. With go-vcr, you get consistent responses, which helps in creating reliable and repeatable tests.</p>
</li>
<li><p><strong>Offline Testing</strong>:<br>With recorded responses, you can run your tests even when you are offline, making development more flexible.</p>
</li>
</ol>

        <h1 id="How-Does-go-vcr-Work"   >
          <a href="#How-Does-go-vcr-Work" class="heading-link"><i class="fas fa-link"></i></a>How Does go-vcr Work?</h1>
      <p>essential, override your transport which is a implematation of RoundTripper func. such as: </p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line">client := &amp;http.Client&#123;</span><br><span class="line">        Transport: r, <span class="comment">// Use recorder as the transport layer</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>


<p>RoundTripper is an interface that defines the mechanism for making a single HTTP transaction, which consists of a request and a response. You can implement your own <code>RoundTrip</code> function by your custom logic. <code>go-vcr</code> implements its own <code>RoundTrip</code> to record your http/https requests and replay your http/https requests. </p>
<p>If your http client need use mTLS, please see this example:<br><span class="exturl"><a class="exturl__link"   href="https://github.com/shufanhao/go-example/blob/6ca68c0ead2a660e233db2ed973561743ea7331d/vcr/vcr_test.go#L63" >https://github.com/shufanhao/go-example/blob/6ca68c0ead2a660e233db2ed973561743ea7331d/vcr/vcr_test.go#L63</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h1 id="How-Integrate-into-your-Testing"   >
          <a href="#How-Integrate-into-your-Testing" class="heading-link"><i class="fas fa-link"></i></a>How Integrate into your Testing</h1>
      <p>Using go-vcr involves a few simple steps: installing the package, setting up the recorder, recording HTTP interactions, and replaying them. Let’s dive into each step.</p>
<figure class="highlight go"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/dnaeon/go-vcr/v2/recorder&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Start a new recorder</span></span><br><span class="line">    r, err := recorder.New(<span class="string">&quot;fixtures/cassette&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> r.Stop() <span class="comment">// Ensure recorder is stopped when done</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create an HTTP client and inject the recorder transport</span></span><br><span class="line">    client := &amp;http.Client&#123;</span><br><span class="line">        Transport: r, <span class="comment">// Use recorder as the transport layer</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make an HTTP request</span></span><br><span class="line">    resp, err := client.Get(<span class="string">&quot;http://example.com&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Process the response...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h1 id="Conclusion"   >
          <a href="#Conclusion" class="heading-link"><i class="fas fa-link"></i></a>Conclusion</h1>
      <p>go-vcr is a powerful tool that simplifies the testing of HTTP/HTTPS interactions in Go applications. By recording and replaying HTTP requests, it makes your tests faster, more reliable, and less dependent on external services. Whether you’re dealing with unreliable APIs, aiming to speed up your test suite, or looking to save costs, go-vcr can help you achieve your goals. Give it a try and experience the magic of reliable HTTP testing!</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo SEO优化</title>
    <url>/posts/cfd1b897/</url>
    <content><![CDATA[
        <h3 id="为什么SEO优化"   >
          <a href="#为什么SEO优化" class="heading-link"><i class="fas fa-link"></i></a>为什么SEO优化</h3>
      <p>SEO是一种通过理解搜索引擎的运行规则来调整网站，并提高网站在相关搜索引擎中排名的方法。<br>SEO是任何网站想要取得成功的最重要的一步，它的最终目标是把用户体验做好。</p>
<a id="more"></a>


        <h3 id="文章永久链接"   >
          <a href="#文章永久链接" class="heading-link"><i class="fas fa-link"></i></a>文章永久链接</h3>
      <p>这样你修改文章名称或者日期后，文章链接不会发生变化<br>安装插件</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p>修改站点配置文件</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">permalink: posts&#x2F;:abbrlink&#x2F;</span><br><span class="line">abbrlink:</span><br><span class="line">    alg: crc32   #算法： crc16(default) and crc32</span><br><span class="line">    rep: hex</span><br></pre></td></tr></table></div></figure>


        <h3 id="生成站点地图"   >
          <a href="#生成站点地图" class="heading-link"><i class="fas fa-link"></i></a>生成站点地图</h3>
      <p>安装插件</p>
<figure class="highlight sh"><div class="table-container"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></div></figure>
<p>修改站点配置文件</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">url: https:&#x2F;&#x2F;flyraty.github.io</span><br><span class="line"># sitemap</span><br><span class="line">Plugins:</span><br><span class="line">  - hexo-generator-baidu-sitemap</span><br><span class="line">  - hexo-generator-sitemap</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></table></div></figure>
<p><code>hexo g</code> ，<code>hexo s</code> 后，可以访问 <code>localhost:4000/sitemap.xml</code> 查看站点地图。</p>

        <h3 id="提交到-google-search-console"   >
          <a href="#提交到-google-search-console" class="heading-link"><i class="fas fa-link"></i></a>提交到 google search console</h3>
      <p>查看站点是否被收录。参考 <span class="exturl"><a class="exturl__link"   href="https://theme-stun.github.io/docs/zh-CN/advanced/third-part.html#%E8%B0%B7%E6%AD%8C%E7%AB%99%E9%95%BF" >here</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;shufanhao.top</span><br></pre></td></tr></table></div></figure>
<p>登录 google search console ，验证自己对网站的所有权，选择适合自己的方式，建议选择验证码方式，直接修改主题配置文件</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">google_site_verification: </span><br></pre></td></tr></table></div></figure>
<p>重新部署后，点击验证。提交 sitemap。</p>

        <h3 id="提交百度收录"   >
          <a href="#提交百度收录" class="heading-link"><i class="fas fa-link"></i></a>提交百度收录</h3>
      <p>登录百度搜索资源平台，添加站点信息，验证自己对网站的所有权，建议选择验证码方式，直接修改主题配置文件</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">baidu_site_verification: code-XBmDG5fVMm</span><br></pre></td></tr></table></div></figure>
<p>提交 sitemap</p>

        <h3 id="新文章自动提交百度收录"   >
          <a href="#新文章自动提交百度收录" class="heading-link"><i class="fas fa-link"></i></a>新文章自动提交百度收录</h3>
      <p>安装插件</p>
<figure class="highlight sh"><div class="table-container"><table><tr><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></div></figure>
<p>修改站点配置文件</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 3 ## 比如3，代表提交最新的三个链接</span><br><span class="line">  host: https:&#x2F;&#x2F;flyraty.github.io ## 在百度站长平台中注册的域名</span><br><span class="line">  token: xxxxx ## 请注意这是您的秘钥， 请不要发布在公众仓库里!</span><br><span class="line">  path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></div></figure>
<p>以后每次 hexo d -g 的时候都会主动推送百度</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo + github pages 创建你的个人博客</title>
    <url>/posts/c5404504/</url>
    <content><![CDATA[
        <h3 id="为什么要创建自己的博客"   >
          <a href="#为什么要创建自己的博客" class="heading-link"><i class="fas fa-link"></i></a>为什么要创建自己的博客</h3>
      <p>自己的博客是写在CSDN，<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/u011563903?type=blog" >shu-frank的专栏</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。但为什么还要自己setup blog 呢？ </p>
<ul>
<li>有一个自己定制的Website不爽么。</li>
<li>学习下Hexo + github pages</li>
<li>可以写点防止被墙的文章。<a id="more"></a>

</li>
</ul>

        <h3 id="hexo"   >
          <a href="#hexo" class="heading-link"><i class="fas fa-link"></i></a>hexo</h3>
      <p><span class="exturl"><a class="exturl__link"   href="https://theme-stun.github.io/docs/zh-CN/guide/quick-start.html#%E5%AE%89%E8%A3%85" >参考Stun</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h4 id="hexo-安装"   >
          <a href="#hexo-安装" class="heading-link"><i class="fas fa-link"></i></a>hexo 安装</h4>
      <p>创建 github pages 和创建普通的 github 仓库没太大区别（记住仓库名称是 username.github.io）。以下安装基于 mac。</p>
<ul>
<li>安装 node 和 npm<figure class="highlight sh"><div class="table-container"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></div></figure>
如果想安装其他版本的 node，可以使用 <code>brew search node</code> ，找到对应的版本包然后安装。</li>
<li>安装 hexo <figure class="highlight sh"><div class="table-container"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></div></figure></li>
<li>hexo init<br>hexo 初始化并自动创建博客目录，根据提示，初始化完成后，进入到博客目录，执行 <code>npm install</code><figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">hexo init shufanhao.github.io</span><br></pre></td></tr></table></div></figure></li>
<li>常用命令<figure class="highlight sh"><div class="table-container"><table><tr><td class="code"><pre><span class="line">hexo d -g 生成并部署</span><br><span class="line">hexo s 本地部署</span><br><span class="line">hexo g 生成站点</span><br><span class="line">hexo clean</span><br><span class="line">hexo new 新建文章 </span><br></pre></td></tr></table></div></figure>

</li>
</ul>

        <h4 id="基础配置"   >
          <a href="#基础配置" class="heading-link"><i class="fas fa-link"></i></a>基础配置</h4>
      <p>一下是一些基础配置，主题选择，页面布局等，我们只需要记住两个配置文件就行了。</p>
<ul>
<li>站点配置文件 <code>_config.yml</code></li>
<li>主题配置文件 <code>themes/主题名/_config.yml</code>，这里就是 <code>themes/stun/_config.yml</code></li>
</ul>

        <h5 id="themes-stun-安装"   >
          <a href="#themes-stun-安装" class="heading-link"><i class="fas fa-link"></i></a>themes stun 安装</h5>
      <p>用github submodule 管理themes，创建.gitmodules</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[submodule &quot;themes&#x2F;stun&quot;]</span><br><span class="line">	path &#x3D; themes&#x2F;stun</span><br><span class="line">	url &#x3D; git@github.com:shufanhao&#x2F;hexo-theme-stun.git</span><br></pre></td></tr></table></div></figure>

        <h5 id="启用-stun"   >
          <a href="#启用-stun" class="heading-link"><i class="fas fa-link"></i></a>启用 stun</h5>
      <p>编辑站点配置文件，修改 theme 选项。</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">stun</span></span><br></pre></td></tr></table></div></figure>

        <h5 id="新建标签，分类，关于页面"   >
          <a href="#新建标签，分类，关于页面" class="heading-link"><i class="fas fa-link"></i></a>新建标签，分类，关于页面</h5>
      <p>会在 source 目录下生成对应的文件夹。这几个页面也是 markdown 文件，你可以自由编辑，比如关于页面。</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">hexo new page tag</span><br><span class="line">hexo new page categories</span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></div></figure>

        <h5 id="设置站点语言"   >
          <a href="#设置站点语言" class="heading-link"><i class="fas fa-link"></i></a>设置站点语言</h5>
      <p>修改站点配置文件，如果你发现配置不管用的话，可以查看下 <code>themes/stun/languages</code> 目录，看下是否存在 zh-Hans.yml 或者 zh-CN.yml。如果只存在 zh-CN.yml，重命名成 zh-Hans.yml 即可。</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br></pre></td></tr></table></div></figure>

        <h5 id="设置侧边栏菜单"   >
          <a href="#设置侧边栏菜单" class="heading-link"><i class="fas fa-link"></i></a>设置侧边栏菜单</h5>
      <p>修改主题配置文件，想显示哪个菜单，把对应的注释去掉就行。</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></div></figure>

        <h5 id="侧栏位置"   >
          <a href="#侧栏位置" class="heading-link"><i class="fas fa-link"></i></a>侧栏位置</h5>
      <p>修改主题配置文件</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position.</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment">#position: right</span></span><br></pre></td></tr></table></div></figure>

        <h5 id="头像"   >
          <a href="#头像" class="heading-link"><i class="fas fa-link"></i></a>头像</h5>
      <p>修改主题配置文件，可以选择是否圆框，是否鼠标点击头像旋转。</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: https:&#x2F;&#x2F;avatars2.githubusercontent.com&#x2F;u&#x2F;24888835?s&#x3D;400&amp;u&#x3D;20f46b828b9ee5d5a93dfce95ec7c01d07cff6cf&amp;v&#x3D;4</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: true</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: true</span><br></pre></td></tr></table></div></figure>

        <h5 id="站点描述"   >
          <a href="#站点描述" class="heading-link"><i class="fas fa-link"></i></a>站点描述</h5>
      <p>修改站点配置文件，主要是站点名称，描述，关键字，作者这些</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Frank</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;上天之所以不给你，是因为你要的不够强烈&#x27;</span></span><br><span class="line"><span class="attr">descriptin:</span> <span class="string">&#x27;于离别之朝束起约定之花&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Docker,Kubernetes,k8s,Java,Mac,Linux,生活,life,容器，云，编程</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Frank</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/shanghai</span></span><br></pre></td></tr></table></div></figure>

        <h5 id="开启阅读数，字数统计"   >
          <a href="#开启阅读数，字数统计" class="heading-link"><i class="fas fa-link"></i></a>开启阅读数，字数统计</h5>
      <p>修改主题配置文件</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-stun&#x2F;hexo-symbols-count-time</span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></div></figure>

        <h5 id="添加搜索栏"   >
          <a href="#添加搜索栏" class="heading-link"><i class="fas fa-link"></i></a>添加搜索栏</h5>
      <p>安装搜索插件</p>
<figure class="highlight sh"><div class="table-container"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>
<p>修改站点配置文件，添加 search 配置</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></div></figure>


        <h5 id="相关文章"   >
          <a href="#相关文章" class="heading-link"><i class="fas fa-link"></i></a>相关文章</h5>
      <p>安装插件</p>
<figure class="highlight sh"><div class="table-container"><table><tr><td class="code"><pre><span class="line">npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></div></figure>
<p>修改主题配置文件</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">相关文章推荐#</span> <span class="string">Custom</span> <span class="string">header,</span> <span class="string">leave</span> <span class="string">empty</span> <span class="string">to</span> <span class="string">use</span> <span class="string">the</span> <span class="string">default</span> <span class="string">one</span></span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment">#PPMixingRate: 0.0</span></span><br><span class="line">    <span class="comment">#isDate: false</span></span><br><span class="line">    <span class="comment">#isImage: false</span></span><br><span class="line">    <span class="attr">isExcerpt:</span> <span class="string">fals</span></span><br></pre></td></tr></table></div></figure>

        <h5 id="社交地址"   >
          <a href="#社交地址" class="heading-link"><i class="fas fa-link"></i></a>社交地址</h5>
      <p>修改主题配置文件，用自带的图标其实就可以了</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/Flyraty</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">Zhihu:</span> <span class="string">https://www.zhihu.com/people/zhang-hai-liang-83-28</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-zhihu</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">139hailiangabc@gmail.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="attr">Weibo:</span> <span class="string">https://weibo.com/yourname</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span></span><br></pre></td></tr></table></div></figure>

        <h5 id="自动生成摘要"   >
          <a href="#自动生成摘要" class="heading-link"><i class="fas fa-link"></i></a>自动生成摘要</h5>
      <p>自动生成摘要在 stun7 中被去除掉了。不想显示全文的话，有两种方式控制，建议第一种方式</p>
<ul>
<li><code>&lt;!--more--&gt;</code>，会显示之前的内容，之后的内容不会显示</li>
<li>文章 meta 中添加 description字段<br>不要在设置啥 auto_encrypt 了。。。</li>
</ul>

        <h5 id="添加-Disqus-评论系统"   >
          <a href="#添加-Disqus-评论系统" class="heading-link"><i class="fas fa-link"></i></a>添加 Disqus 评论系统</h5>
      <p>访问 <code>disqus.com</code>，选择 <code>i want to install disqus on my site</code>。然后跟着提示一步步走，只需要记住自己的 shortname 即可。<br>修改主题配置文件</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"> <span class="string">Disqus</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">shortname:</span> <span class="string">flyraty</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></div></figure>


        <h5 id="部署到-git"   >
          <a href="#部署到-git" class="heading-link"><i class="fas fa-link"></i></a>部署到 git</h5>
      <p>安装插件</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></div></figure>
<p>具体参考：<a href="https://shufanhao.top/posts/1eb3f811/">https://shufanhao.top/posts/1eb3f811/</a></p>

        <h4 id="美化"   >
          <a href="#美化" class="heading-link"><i class="fas fa-link"></i></a>美化</h4>
      
        <h5 id="代码框风格，并添加复制按钮"   >
          <a href="#代码框风格，并添加复制按钮" class="heading-link"><i class="fas fa-link"></i></a>代码框风格，并添加复制按钮</h5>
      <p>修改主题配置文件，设置 theme 和 style</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br></pre></td></tr></table></div></figure>

        <h5 id="页面动画效果"   >
          <a href="#页面动画效果" class="heading-link"><i class="fas fa-link"></i></a>页面动画效果</h5>
      <p>hexo 内置了一些页面动态效果。如果想打开的话，只需要在主题配置文件里搜索打开即可。</p>
<ul>
<li>canvas_nest</li>
<li>canvas_ribbon</li>
<li>three_waves </li>
</ul>
<p>比如 canvas_nest</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-stun/theme-stun-canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;0,0,255&quot;</span> <span class="comment"># RGB values, use &#x27;,&#x27; to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># the number of lines</span></span><br></pre></td></tr></table></div></figure>


        <h5 id="页面顶部加载阅读进度条"   >
          <a href="#页面顶部加载阅读进度条" class="heading-link"><i class="fas fa-link"></i></a>页面顶部加载阅读进度条</h5>
      <p>修改主题配置文件</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br></pre></td></tr></table></div></figure>

        <h5 id="文章阅读进度条"   >
          <a href="#文章阅读进度条" class="heading-link"><i class="fas fa-link"></i></a>文章阅读进度条</h5>
      <p>安装插件</p>
<figure class="highlight sh"><div class="table-container"><table><tr><td class="code"><pre><span class="line">npm install hexo-cake-moon-menu --save</span><br></pre></td></tr></table></div></figure>
<p>修改主题配置文件，添加如下内容</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">moon_menu:</span></span><br><span class="line">  <span class="attr">back2top:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-chevron-up</span></span><br><span class="line">    <span class="attr">func:</span> <span class="string">back2top</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">back2bottom:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-chevron-down</span></span><br><span class="line">    <span class="attr">func:</span> <span class="string">back2bottom</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-2</span></span><br></pre></td></tr></table></div></figure>
<p>stun  自带了文章阅读进度条（pace 配置），但是不如这个插件好看。</p>

        <h5 id="鼠标点击烟花效果"   >
          <a href="#鼠标点击烟花效果" class="heading-link"><i class="fas fa-link"></i></a>鼠标点击烟花效果</h5>
      <p>参考 <span class="exturl"><a class="exturl__link"   href="https://tding.top/archives/58cff12b.html" >小丁的博客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h5 id="修改页面布局为圆角"   >
          <a href="#修改页面布局为圆角" class="heading-link"><i class="fas fa-link"></i></a>修改页面布局为圆角</h5>
      <p>新建 source/_data/variables.styl</p>
<figure class="highlight"><div class="table-container"><table><tr><td class="code"><pre><span class="line">// 圆角设置</span><br><span class="line">$border-radius-inner     = 20px 20px 20px 20px;</span><br><span class="line">$border-radius           = 20px;</span><br></pre></td></tr></table></div></figure>
<p>修改主题配置文件，打开自定义 variables.styl 的设置</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">	<span class="attr">variable:</span> <span class="string">source/_data/variables.sty</span></span><br></pre></td></tr></table></div></figure>


        <h5 id="添加粒子时钟"   >
          <a href="#添加粒子时钟" class="heading-link"><i class="fas fa-link"></i></a>添加粒子时钟</h5>
      <p>参考 <span class="exturl"><a class="exturl__link"   href="https://tding.top/archives/dd68b70.html" >小丁的博客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h5 id="去掉底部·强力驱动·"   >
          <a href="#去掉底部·强力驱动·" class="heading-link"><i class="fas fa-link"></i></a>去掉底部·强力驱动·</h5>
      <p>修改主题配置文件</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">	power: false</span><br></pre></td></tr></table></div></figure>

        <h5 id="关于页面显示-github-commit-chart"   >
          <a href="#关于页面显示-github-commit-chart" class="heading-link"><i class="fas fa-link"></i></a>关于页面显示 github commit chart</h5>
      <p>参考 <span class="exturl"><a class="exturl__link"   href="https://tding.top/" >小丁的博客</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h4 id="优化加速"   >
          <a href="#优化加速" class="heading-link"><i class="fas fa-link"></i></a>优化加速</h4>
      
        <h5 id="启用-FastClick"   >
          <a href="#启用-FastClick" class="heading-link"><i class="fas fa-link"></i></a>启用 FastClick</h5>
      <p>修改主题配置文件</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">fastclick: true</span><br></pre></td></tr></table></div></figure>

        <h5 id="启用-QuickLink"   >
          <a href="#启用-QuickLink" class="heading-link"><i class="fas fa-link"></i></a>启用 QuickLink</h5>
      <p>修改主题配置文件，quickclick 用于资源文件的预加载</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">quicklink:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Home page and archive page can be controlled through home and archive options below.</span></span><br><span class="line">  <span class="comment"># This configuration item is independent of `enable`.</span></span><br><span class="line">  <span class="attr">home:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default (true) will initialize quicklink after the load event fires.</span></span><br><span class="line">  <span class="attr">delay:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Custom a time in milliseconds by which the browser must execute prefetching.</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="comment"># Default (true) will enable fetch() or falls back to XHR.</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># For more flexibility you can add some patterns (RegExp, Function, or Array) to ignores.</span></span><br><span class="line">  <span class="comment"># See: https://github.com/GoogleChromeLabs/quicklink#custom-ignore-patterns</span></span><br><span class="line">  <span class="attr">ignores:</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

        <h5 id="SEO"   >
          <a href="#SEO" class="heading-link"><i class="fas fa-link"></i></a>SEO</h5>
      <p>主要就是生成站点地图并提交百度和谷歌收录，生成永久链接，参考: <a href="https://shufanhao.top/posts/cfd1b897/">https://shufanhao.top/posts/cfd1b897/</a></p>

        <h3 id="参考"   >
          <a href="#参考" class="heading-link"><i class="fas fa-link"></i></a>参考</h3>
      <p><span class="exturl"><a class="exturl__link"   href="https://timemachine.icu/" >timemachine</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>github actions 实现 hexo 自动化部署</title>
    <url>/posts/1eb3f811/</url>
    <content><![CDATA[
        <h3 id="前言"   >
          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a>前言</h3>
      <p>使用 github pages 托管个人博客网站，使用双分支来保存博客源文件，使用 git submodule 来管理更新主题文件，使用 github actions 来做持续集成。</p>
<a id="more"></a>

        <h3 id="hexo-持续集成"   >
          <a href="#hexo-持续集成" class="heading-link"><i class="fas fa-link"></i></a>hexo 持续集成</h3>
      
        <h4 id="双分支"   >
          <a href="#双分支" class="heading-link"><i class="fas fa-link"></i></a>双分支</h4>
      <ul>
<li>hexo 分支。添加文章，修改文章基于该分支。</li>
<li>master分支，deploy到线上的分支，该分支存放的是最后generate的文件。在github pages中设置master分支。</li>
</ul>

        <h4 id="生成公钥私钥"   >
          <a href="#生成公钥私钥" class="heading-link"><i class="fas fa-link"></i></a>生成公钥私钥</h4>
      <p>这一步主要是为了 CI 中提交代码，生成了两个文件，公钥文件 github-deploy-key.pub，私钥文件 github-deploy-key。需要注意，如果你是在博客目录执行的命令，需要在 .gitignore 中加入这两个文件，避免上传到仓库中。</p>
<figure class="highlight sh"><div class="table-container"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa  -C <span class="string">&quot;<span class="subst">$(git config user.name)</span>&quot;</span> -f github-deploy-key</span><br></pre></td></tr></table></div></figure>


        <h4 id="添加仓库环境变量"   >
          <a href="#添加仓库环境变量" class="heading-link"><i class="fas fa-link"></i></a>添加仓库环境变量</h4>
      <p>设置 HEXO_DEPLOY_PUB，value 是上步生成的 github-deploy-key.pub 文件内容。<br><img src="https://timemachine-blog.oss-cn-beijing.aliyuncs.com/img/0081Kckwgy1gk0pc9xn3hj31yq0s6aex.jpg"><br>设置 HEXO_DEPLOY_PRI, action中添加secret, value是github-deploy-key文件内容<br><img src="https://timemachine-blog.oss-cn-beijing.aliyuncs.com/img/0081Kckwgy1gk0pe8e498j321e0t8djp.jpg"></p>

        <h4 id="添加-workflow"   >
          <a href="#添加-workflow" class="heading-link"><i class="fas fa-link"></i></a>添加 workflow</h4>
      <p>编写 workflow，新建的时候会有对应的注释提示你该如何写。<strong>需要注意的是 submodule 不会自动下载，需要添加 check submodules 这一步。</strong></p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">source</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">hexo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configration</span> <span class="string">hexo</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$ACTION_DEPLOY_KEY&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;1397554745@qq.com&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;Flyraty&quot;</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">submodules</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">submodule</span> <span class="string">init</span></span><br><span class="line">          <span class="string">git</span> <span class="string">submodule</span> <span class="string">update</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">         <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">         <span class="string">npm</span> <span class="string">install</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">d</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h4 id="测试持续集成"   >
          <a href="#测试持续集成" class="heading-link"><i class="fas fa-link"></i></a>测试持续集成</h4>
      <p>本地 hexo 分支提交代码即可，部署站点会由 github actions 自动完成。可以去仓库 actions 设置中查看执行完成的 flow。如果有错，点开查看错误的 step 修改即可。 </p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>三年疫情的驯化</title>
    <url>/posts/afcb5002/</url>
    <content><![CDATA[<p>本段文字摘自<span class="exturl"><a class="exturl__link"   href="https://bbs.0579.cn/read-htm-tid-3242651-page-e.html" >here</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>三年的疫情，带给我们的，除了肉眼可见的经济萧条，和焦虑压抑的情绪之外，最大的创伤是疫情“对人的驯化”，这才是未来相当长时期内，人们长久无法抹去的心理阴影。纵观历史上发生过的疫情，疫情就算结束，也会出现巨量的人已不再适应没有疫情的生活，自杀轻生者众的现象。这种现象，称之为“驯化综合症”。</p>
<a id="more"></a>
<p>疏理各类骇人听闻的新闻，你会发现，人们对防疫措施对私生活的粗暴干涉，渐渐不自觉地拉低了接受的底线。最初防疫“变相强制”要求你打疫苗，你觉得不合适，直到后来让你每隔48小时测核酸，觉得打疫苗能接受；到了让你静默呆家别动，你觉得测核酸还算人道；你对动不动封小区开始有意见，后来觉得只要有白菜吃肚子不挨饿就能接受；直到有人开始不经许可撬门破窗随意“消杀”，你又觉得只要不撬门，一切也能接受……</p>
<p>这就是致命的驯化。大多数人在不自觉中完成了“驯化历程”。这种驯化的致命之处在于：拉低了社会文明的底线，让你逐渐接受沦为“贱人”的正当性，并对外部的粗暴干涉认为是理所当然，且不自觉地为身处“道德洼地”自行辩护。</p>
<p>驯化的第一层境界：被驯化者，会自我消解暴虐状态下的屈辱感。对于外部世界灾难给予的压力，受害者会将最初的恐惧，从心理上寻求接受的角度，他们试图说服自己，承认灾难的烈度很正常，从而消解自己处于暴虐状态的屈辱感。</p>
<p>驯化的第二层境界：从受害者中，选择相当比例的受害者，转化为“施害工具”。对这些被选择的“工具人，赋予其施害权力，进行现实情境下的角色替换，例行角色扮演，混淆善恶，进而消解其抵触情绪，瓦解其消极意志。</p>
<p>驯化的第三层境界：被驯化之人，失去了任何个人的求生本能，失去了自我救助的内心冲动。他们在碰到侵犯自己个人权利的事时，本能地等待设计好的死板的救助轨道，唯一排斥的是自我拯救。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>比亚迪唐DMI购车经验分享</title>
    <url>/posts/58d02d33/</url>
    <content><![CDATA[<p>提车有一段时间了，特此写一下这篇总结，希望给车友一个参考。</p>
<a id="more"></a>

        <h2 id="为什么选择唐Dmi"   >
          <a href="#为什么选择唐Dmi" class="heading-link"><i class="fas fa-link"></i></a>为什么选择唐Dmi</h2>
      <p><img src="https://img-blog.csdnimg.cn/66b563d7f904499f9ef771bfdbefeecf.png" alt="在这里插入图片描述"></p>
<ul>
<li>性价比高。在7座SUV，25万元以下车型中，几乎没有竞争者。</li>
<li>送沪牌，这个很关键，否则就要花大概10万进行拍牌。</li>
<li>没有里程焦虑。混动车型，可油可电，市区开开，110KM的纯电续航，基本够用。</li>
<li>DMI，省油。市区馈电情况下，也是很省油。关于DMI技术的讲解，<span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/345951258" >参考</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</li>
<li>后备箱空间大，想到以后带娃去玩，后备箱空间大，是真香。</li>
</ul>
<p>所以根据上面的需求，再去选车，其实好像只有它了。</p>

        <h2 id="选唐DMI高配or中配？"   >
          <a href="#选唐DMI高配or中配？" class="heading-link"><i class="fas fa-link"></i></a>选唐DMI高配or中配？</h2>
      <p>中配和高配区别 ? </p>
<ul>
<li>后方交通预警</li>
<li>倒车车侧预警</li>
<li>dow开门预警</li>
<li>并线辅助</li>
<li>全液晶</li>
<li>感应式后备箱尾门，真皮座椅，主驾/副驾调节腰部以及腿拖，主驾记忆，屏幕大，氛围灯，后视镜记忆，倒车自动下翻，自动防炫目，车载空气净化器，负离子发生器等。</li>
<li>价格高，当然了。中配：19.98万, 高配 21.68万。现在涨价了，这是2022.10月份的价格。</li>
</ul>
<p>所以，高配比中配也没贵多少钱，果断高配。</p>

        <h2 id="购车时间线"   >
          <a href="#购车时间线" class="heading-link"><i class="fas fa-link"></i></a>购车时间线</h2>
      
        <h3 id="订车"   >
          <a href="#订车" class="heading-link"><i class="fas fa-link"></i></a>订车</h3>
      <ol>
<li>2021.9.10 和同学一起看车，当时看中了唐DMI。</li>
<li>2021.10.16 带着一家人再去看车，家人也喜欢，当时就订车了。比亚迪唐DMI 顶配，灰色，裸车价21.68 万。当时交了5000定金，比亚迪4S店，现场也是极度火爆，销售明确说，不想要，可以直接退，然后等车时间4个月。</li>
</ol>
<p>与4S店签订合同：</p>
<ol>
<li>价格： 裸车首付 216800 * 0.15 = 32520.0 。</li>
<li>3000元比亚迪金融服务费+945（忘记这是什么了）+1200（上牌费）+6000（保险费用）= 43665，大概4万多点，车子可以开回家。
        <h3 id="等车"   >
          <a href="#等车" class="heading-link"><i class="fas fa-link"></i></a>等车</h3>
      <img src=https://img-blog.csdnimg.cn/334647adc03c4c388b3b051e8e6a456e.png width=100% />

</li>
</ol>
<p>订车后，就进入了漫长的等车期。原计划是可以在2022年2月份左右提车。等车期，就可以先把电表安装起来，因为是混动车型，必须充电桩要安装后，后面沪牌才能申请下来。不像纯电车，不用安装充电桩，就可以拿到沪牌。</p>
<p>我是2021.10.23 去物业盖章，证明个人车位。然后再在国家电网APP上，申请新能源电表安装，过了几天，就有人来实地考察，然后批准后，再过几天，会有人上门开始安装。</p>
<p>所以，基本上安装好电表，沪牌就到手一半儿了。</p>

        <h3 id="提车"   >
          <a href="#提车" class="heading-link"><i class="fas fa-link"></i></a>提车</h3>
      <p>本来是3月底在上海封城之前可以提车，但是当时纠结于保险，所以没有提车，不得不再等待2个月，到6月3号提车的，6月1号上海解封。提车前需要做什么？ </p>
<ul>
<li>4S店销售临牌打印好，其实这个临牌感觉也可以自己弄。后面临牌到期，续期的时候，自己在交管12123上自己申请的。</li>
<li>如果是全款的话，尾款付清。走比亚迪金融的话，贷款要下来。</li>
<li>保险买好。其实如果硬钢的话，可以不用买4S店绑定的保险，4S店的保险报价是5500，如果自己找平安的话，也就是4500左右。</li>
<li>车子检查好，就可以直接开走了，我提车的4S店，提车的时候也没啥仪式，销售太忙了。</li>
</ul>
<p>关于买车的贷款，我后面改过了，本来是走比亚迪金融，但是发现利率确实高了点，<br>比亚迪的综合利息是：32020 + 3000 = 35020，相当于利率是6.4%<br><img src=https://img-blog.csdnimg.cn/6a3cd99de8424d7f98cc2ab5c71e6641.png width=40% /></p>
<p>然后问到专门做银行贷款的。以下是年费率, 也就是说184280 * 0.03 = 5528.4 * 5年 = 27642，相当于年利率是5.6。上海银行目前是3.2% ，兴业银行3% ，建设银行3%。</p>
<img src=https://img-blog.csdnimg.cn/611428bca1674866896ce8b82c5387a4.png width=40% />

<p>最后选择了兴业银行，贷款大概不到一周就放到信用卡了，然后拿这张信用卡去刷就可以了。</p>
<ul>
<li>相当于首付款 21.68 - 18.8 = 2.88万，再加 1K 上牌费 + 200一共是 3万。 </li>
<li>交给比亚迪的钱:  5000押金 + 2万（3/25日转的）+18.8万（刷的兴业银行信用卡）+  5000 + 1128（刷卡费） =  21.9128。坑的是竟然需要一个刷卡费。</li>
</ul>

        <h3 id="提车后"   >
          <a href="#提车后" class="heading-link"><i class="fas fa-link"></i></a>提车后</h3>
      <img src=https://img-blog.csdnimg.cn/cedc55109d5e4a5e880785c241a348a8.png width=80% />

<p>提车后要做的事情是：</p>
<ol>
<li>充电桩安装。记住充电桩不免费装，不免费。免费的是30米充电线，我总共花了1200，包含打孔，挖槽，还有充电桩箱子和底座等。充电桩装好后，销售会帮忙申请，一旦通过后，就可以等上牌。</li>
<li>上牌。上牌之前可以把车牌选号，我是在交管12123上，随机选的，选的是<strong>沪AGM6609</strong>。上牌之前会先验车，我是工作日去的，人很少，隔天车牌销售就会把车牌过来，然后自行安装即可。</li>
<li>拿脚垫。只能说送的脚垫，感觉质量很一般。</li>
<li>贴膜。比较坑，免费送的车膜，质量很差，销售会让你加钱升级。记住，销售推荐的车膜，说的价格对伴儿砍，给我好像说的是3000多的车膜，然后我砍到了1000多，说是质保8年。</li>
<li>ETC安装。我是在江苏银行APP上申请的ETC，没有手续费，并且前3个月每个月最多抵扣100，后面是打95折，基本是最实惠的了。</li>
</ol>

        <h2 id="注意的坑"   >
          <a href="#注意的坑" class="heading-link"><i class="fas fa-link"></i></a>注意的坑</h2>
      <ol>
<li>其实是可以不在4S店买绑定的保险，签合同的时候就要讲好。</li>
<li>其实可以自己上牌。</li>
<li>贴膜的话，是可以在外面的店自己花钱贴，会比4S店便宜些。</li>
<li>贷款的话，多看下其他银行的，也不用非要走比亚迪金融贷。
        <h2 id="驾车技巧"   >
          <a href="#驾车技巧" class="heading-link"><i class="fas fa-link"></i></a>驾车技巧</h2>
      最好自己下载一个APP，叫停车达人，去模拟停车。
        <h3 id="倒车入库"   >
          <a href="#倒车入库" class="heading-link"><i class="fas fa-link"></i></a>倒车入库</h3>
      </li>
<li>窄路倒车入库。尽量靠近右边车子，然后当车子的车尾越过右边第一辆的车中间时倒车。或者当身体和右边第一个车位的中间对齐时，左打满往前开，开到极限，倒车。</li>
<li>非窄路正常入库。停车时，肩膀和目标车位的左边对齐后，向右打满往前开，然后当左后视镜看到车位左边库角时，向右打满方向倒车就可以了。</li>
</ol>

        <h3 id="侧方位停车"   >
          <a href="#侧方位停车" class="heading-link"><i class="fas fa-link"></i></a>侧方位停车</h3>
      <p>车开到和前面车子后视镜对齐，然后方向盘打死，倒车，当左后视镜看到后面车位的右侧大灯时，再回正，然后当左边后视镜看到后轮压到线时，回方向盘，或者右边后视镜看到看到右门把手碰到库线的时候向右死方向倒车。当前面看不到前面的车的保险杠时，停车，因为可以一把出来。</p>

        <h3 id="其他技巧"   >
          <a href="#其他技巧" class="heading-link"><i class="fas fa-link"></i></a>其他技巧</h3>
      <ol>
<li>左右车距判断<br> a. 左边车轮，方向盘的最左边就是左边车轮。车辆的左侧A柱与挡风玻璃下沿夹角顶点位于左侧边线上时，车辆距离左侧边线60公分；<br> b. 右边车轮，机盖的中间位置贴到就是右边车轮。当白线位于发动机盖右侧二分之一位置时，车辆距离右侧边线30公分；</li>
<li>马路牙子<br> a. 前方马路牙子<pre><code> i. 刚好和马路牙子上沿重合，打满方向，可以安全转弯立刻。
 ii. 当后视镜下沿正好和马路牙子重合时，正好是30公分。</code></pre>
 b. 后方马路牙子<pre><code> i. 后视镜的门把手正好和马路牙子对齐时，正好50公分。</code></pre>
</li>
<li>ACC（自适应巡航）。打开ACC时，一定要把车道辅助关掉，否则车会在车道内跑偏。</li>
</ol>

        <h2 id="2000公里驾驶总结"   >
          <a href="#2000公里驾驶总结" class="heading-link"><i class="fas fa-link"></i></a>2000公里驾驶总结</h2>
      <p>提车后，在市区开过也开过高速，总体而言，还是比较符合预期。</p>
<p>高速上，馈电油耗在7左右。平时，在家附近开开，基本是纯电，我是用ECO模式，纯电是真省钱。</p>
<p>吐槽的点是，过减速带，比较晃。第三排座椅，因为没有空调，夏天比较热。</p>
<img src=https://img-blog.csdnimg.cn/00d7b2af8f8b45bbb5ea7f24059a20a9.png width=50% />
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>必看！本地安装 DeepSeek 超详细教程</title>
    <url>/posts/4e00340d/</url>
    <content><![CDATA[<p>DeepSeek最近还是很火，直接把港股带飞。以至于问个问题给DeepSeek, 经常遇到服务器异常繁忙，请稍后尝试。</p>
<a id="more"></a>

<p><img   src="https://mmbiz.qpic.cn/mmbiz_png/pHa9kbkQH5iaRNWHXR6icP9qIvf12icZib1eB12hbTsL4Pf9IcsGicgrt7c7niarkahyzssuPVLibaed1icPDspqsJTxSQ/0?wx_fmt=png&from=appmsg" style=""  alt="image.png"></p>
<p>所以不得不考虑在本地机器上运行，这样无需网络连接，不仅能随时随地使用，还能更好地保护隐私，不用担心数据上传带来的隐私风险。而且，完全免费。</p>
<p>本人是在Mac M1 Pro 16GB Memory 的电脑上做的测试，Windows也是支持的。</p>

        <h3 id="Step1-下载并安装-Ollama"   >
          <a href="#Step1-下载并安装-Ollama" class="heading-link"><i class="fas fa-link"></i></a>Step1: 下载并安装 Ollama</h3>
      <p>用Ollama 运行 DeepSeek ，Ollama 可以管理和运行大型语言模型。可以把Ollama想象成Docker，大模型想象成docker image。Ollama的用法和Docker很类似。</p>
<p><img   src="https://mmbiz.qpic.cn/mmbiz_png/pHa9kbkQH5iaRNWHXR6icP9qIvf12icZib1euZd2SX4KiczSMMY1ia2h3Yx99wtuiblxkhzeJuNEBO5Jm4l8HrFzcRXMQ/0?wx_fmt=png&from=appmsg" style=""  alt="image.png"></p>
<p>打开浏览器，访问 Ollama 官方网站(<span class="exturl"><a class="exturl__link"   href="https://ollama.com/)%EF%BC%8C%E5%9C%A8%E7%BD%91%E7%AB%99%E4%B8%8A%E6%89%BE%E5%88%B0" >https://ollama.com/)，在网站上找到</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> “Download for macOS” 按钮，点击下载适用于 macOS 的版本。</p>
<p><img   src="https://mmbiz.qpic.cn/mmbiz_png/pHa9kbkQH5iaRNWHXR6icP9qIvf12icZib1eT4sn0U4t6HvnGUvic3fzOD0rTNdbMDHTV3iarHN8SsiawQQyuqG2B76aQ/0?wx_fmt=png&from=appmsg" style=""  alt="image.png"></p>
<p>下载完成后，打开 Finder，进入 “Downloads” 文件夹，找到刚刚下载的.zip 文件，双击解压。</p>
<p>解压后，将 Ollama 应用程序拖放到 “Applications” 文件夹中，完成安装。</p>
<p>打开 “Applications” 文件夹，找到 Ollama 并双击启动它。如果系统弹出安全提示，点击 “Open”。</p>
<p><img   src="https://mmbiz.qpic.cn/mmbiz_png/pHa9kbkQH5iaRNWHXR6icP9qIvf12icZib1erSAgQBiasMrRNBafDstjrn018fND44MUWlR7psX6EICbBxT8OJaIIbw/0?wx_fmt=png&from=appmsg" style=""  alt="image.png"></p>
<p>按照安装提示，安装命令行版本。当提示需要输入密码时，输入你的 Mac 密码进行安装。</p>
<p>安装完成后，在 Ollama 界面中点击 “Copy” 按钮，复制命令 “ollama run llama3.2” 到剪贴板。</p>
<p>打开终端，将剪贴板中的命令粘贴到终端中，回车。这一步是为了验证 Ollama 是否安装成功。</p>

        <h3 id="Step2-安装-DeepSeek"   >
          <a href="#Step2-安装-DeepSeek" class="heading-link"><i class="fas fa-link"></i></a>Step2: 安装 DeepSeek</h3>
      <p>Ollama 安装好后，再次回到 Ollama 网站。在网站的搜索框中输入 “DeepSeek” 进行搜索。</p>
<p>在搜索结果中，选择 “DeepSeek R1”，因为它是最新版本，并且针对 Apple Mac 尤其是 Apple Silicon Mac 进行了优化，能让你的 Mac 更流畅地运行 DeepSeek。</p>
<p><img   src="https://mmbiz.qpic.cn/mmbiz_png/pHa9kbkQH5iaRNWHXR6icP9qIvf12icZib1ecvGTiah0Au8mMpb4FxWpGmMbBLMdRDia7Mzqr6FGIWqoyjQjhArqnctw/0?wx_fmt=png&from=appmsg" style=""  alt="image.png"></p>
<p>根据你的 Mac 性能来选择合适的模型大小。需要注意的是，基本版本 8B 资源消耗较少，适合配置不是特别高的 Mac，更大的模型虽然准确性更高，但对内存的需求也更大。如果你的Mac配置特别高，可以选择8B以上的模型。</p>
<p>选择好模型后，点击 “Copy” 按钮复制安装命令（例如：ollama run deepseek-r1:8b)。</p>
<p><img   src="https://mmbiz.qpic.cn/mmbiz_png/pHa9kbkQH5iaRNWHXR6icP9qIvf12icZib1eQSX3x0xIW7jibMYibib4Ik29SKLgxNawomYWDuzicfoicyfwGx6f5JqesyQ/0?wx_fmt=png&from=appmsg" style=""  alt="image.png"></p>
<p>打开终端，将复制的安装命令粘贴到终端中，然后按下回车 键。此时，DeepSeek 模型（约 4.9GB）将开始下载并安装到你的计算机上。</p>

        <h3 id="Step3-在终端中运行-DeepSeek"   >
          <a href="#Step3-在终端中运行-DeepSeek" class="heading-link"><i class="fas fa-link"></i></a>Step3: 在终端中运行 DeepSeek</h3>
      <p>当 DeepSeek 安装完成后，你就可以立即在终端中使用它了。在终端中输入你想要问的问题。</p>
<p>如果想退出与 DeepSeek 的对话，在终端中输入 “/bye”，然后按下 回车 键即可。</p>
<p>以后如果想要重新启动 DeepSeek，在终端中运行命令 “ollama run deepseek-r1:8b” 就可以了。</p>
<p><img   src="https://mmbiz.qpic.cn/mmbiz_png/pHa9kbkQH5iaRNWHXR6icP9qIvf12icZib1eCEvSSd3iblOGq0Qyv5vOc67Viaa2Mq8WhMzK4hotpx3vuInF2tQicz2Jw/0?wx_fmt=png&from=appmsg" style=""  alt="image.png"></p>

        <h3 id="Step4-安装用户友好的聊天界面"   >
          <a href="#Step4-安装用户友好的聊天界面" class="heading-link"><i class="fas fa-link"></i></a>Step4: 安装用户友好的聊天界面</h3>
      <p>虽然在终端中使用 DeepSeek 很方便，但如果想要更直观、更便捷的交互方式，可以安装 Chatbox AI 应用程序。这是一款免费的聊天应用程序，提供了与 ChatGPT 非常相似的图形用户界面，可以更轻松地与 DeepSeek 交流。</p>
<p>打开浏览器，访问 Chatbox AI 官方网站(<span class="exturl"><a class="exturl__link"   href="https://chatboxai.app/)%E3%80%82%E4%B8%8B%E8%BD%BD%E5%B9%B6%E6%8C%89%E7%85%A7chatbox%E3%80%82" >https://chatboxai.app/)。下载并按照chatbox。</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>打开 Chatbox AI 应用程序后，你会看到一个界面，这里不需要付费，只需点击 “Use My Own API key / Local model”。</p>
<p><img   src="https://mmbiz.qpic.cn/mmbiz_png/pHa9kbkQH5iaRNWHXR6icP9qIvf12icZib1exptNm6pSFia4BTTgXRKmtsFGVfxjicMSkerQGufUrDgUZVVuLhJ8dCbw/0?wx_fmt=png&from=appmsg" style=""  alt="image.png"></p>
<p>在 “Model Provider” 下拉菜单中，选择 “Ollama API”。</p>
<p><img   src="https://mmbiz.qpic.cn/mmbiz_png/pHa9kbkQH5iaRNWHXR6icP9qIvf12icZib1eF5jRMLcgSztmFeIel8JtT2qia6ldZpdwibXSfCGRwYwyh6JlzicU38Jlw/0?wx_fmt=png&from=appmsg" style=""  alt="image.png"></p>
<p>然后选择 “deepseek-r1:8b” 作为模型，然后点击右下角的 “Save” 按钮。</p>
<p><img   src="https://mmbiz.qpic.cn/mmbiz_png/pHa9kbkQH5iaRNWHXR6icP9qIvf12icZib1eyCrcVgZVhd6DP0Y0kJiaH8DRaOQ38GaAKhvJjfd8Ow8ibqymRguN18eA/0?wx_fmt=png&from=appmsg" style=""  alt="image.png"></p>
<p>完成以上步骤后，你就可以开始使用 Chatbox AI 与 DeepSeek 进行聊天了。</p>
<p><img   src="https://mmbiz.qpic.cn/mmbiz_png/pHa9kbkQH5iaRNWHXR6icP9qIvf12icZib1e5SFVmiacVeo8dFrapiavB5AagHsdE9YzN6C98VEUKyYLR5xF2MicAvQXw/0?wx_fmt=png&from=appmsg" style=""  alt="image.png"></p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>完美解决myBase Desktop 破解</title>
    <url>/posts/a0885743/</url>
    <content><![CDATA[<p>不得不说myBase是非常好的一款工具，几乎用过所有的windows下的笔记软件，不同于那些将数据同步到云端的笔记软件，myBase 特别适合本地电脑的使用，特别适合于工作，鉴于myBase要求付费，现在介绍一种方法不用付费</p>
<a id="more"></a>


        <h2 id="参考资料"   >
          <a href="#参考资料" class="heading-link"><i class="fas fa-link"></i></a>参考资料</h2>
      <p><span class="exturl"><a class="exturl__link"   href="http://jingyan.baidu.com/article/d8072ac47f5a02ec95cefdbd.html" >http://jingyan.baidu.com/article/d8072ac47f5a02ec95cefdbd.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h2 id="步骤"   >
          <a href="#步骤" class="heading-link"><i class="fas fa-link"></i></a>步骤</h2>
      <p>上面链接中说的不适合于在新版的myBase软件中更改，新版中的nyfedit.ini文件，已经修改为myBase.ini，并且如果按照python, time.time() 修改Lic.FirstUseOn属性的话，发现再次打开软件，还是没有效果，   所以直接干脆删除这个属性，再次打开发现解决问题。但是有的时候需要修改成time.time()得出的值。</p>
<p>今天周末闲来无事，写了个小脚本，注意用法：<br>将下面的code，保存成 yourfilename.py,然后放到对应的有myBase.ini文件目录下，执行python  yourfilename.py 即可</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">__author__ &#x3D; &#39;haofan&#39;</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">filename &#x3D; &quot;myBaseTest.ini&quot;</span><br><span class="line">print filename</span><br><span class="line">insertNewline &#x3D; &quot;App.UserLic.FirstUseOn&#x3D;&quot; + str(int(time.time())) + &quot;\n&quot;</span><br><span class="line">print insertNewline</span><br><span class="line">with open(filename, &#39;r&#39;) as f:</span><br><span class="line">    lines &#x3D; f.readlines()</span><br><span class="line">    lines[100] &#x3D; insertNewline</span><br><span class="line">with open(filename, &#39;w&#39;) as f:</span><br><span class="line">   f.writelines(lines)</span><br><span class="line">   f.close()</span><br></pre></td></tr></table></div></figure>

]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Understanding Cascade Left Joins and Writing Complex Queries</title>
    <url>/posts/e674a0bc/</url>
    <content><![CDATA[<blockquote>
<p>In SQL, the left join is a powerful tool for combining data from multiple tables based on a common column. In this blog post, we will explore the concept of cascade left joins, providing clear explanations and examples to help you grasp this important technique. Additionally, we will delve into writing complex queries, enabling you to tackle more advanced data retrieval tasks with confidence. </p>
</blockquote>
<a id="more"></a>


        <h2 id="a-left-join-b-left-join-c"   >
          <a href="#a-left-join-b-left-join-c" class="heading-link"><i class="fas fa-link"></i></a>a left join b left join c</h2>
      <p>The basic each join knowledge, pelase refer <span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/29234064" >https://zhuanlan.zhihu.com/p/29234064</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>let’s give an example: </p>
<ul>
<li>table <code>total</code>: total  student in one school, includes two columns student id and room id, named <code>id</code> and <code>room</code>. </li>
<li>table <code>active</code>: active student who go to library in the past 30 days, also includes same two columns. </li>
<li>table <code>paid</code>: paid student who paid for library to get static seat in library in the past 30 days, also includes same two columns. </li>
</ul>
<p>Create table: </p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`total`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`room`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>,<span class="string">`room`</span>)</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`total`</span> (<span class="string">`id`</span>, <span class="string">`room`</span>) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;103&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;103&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;103&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;104&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;104&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;105&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;107&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`active`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`room`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>,<span class="string">`room`</span>)</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`active`</span> (<span class="string">`id`</span>, <span class="string">`room`</span>) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;103&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;103&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;104&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`paid`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`room`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>,<span class="string">`room`</span>)</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`paid`</span> (<span class="string">`id`</span>, <span class="string">`room`</span>) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;103&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;104&#x27;</span>);</span><br></pre></td></tr></table></div></figure>
<p>So what’s the output of a left join b left join c ? Before get answer, please understand: </p>
<ul>
<li><code>A LEFT JOIN B</code>: This indicates that table A is the left table, and table B is the right table. The left join between A and B returns all rows from table A, along with any matching rows from table B. If there is no match, the columns from table B will contain NULL values.</li>
<li><code>A LEFT JOIN B LEFT JOIN C</code>: This extends the previous left join to include table C. In this case, the left join between A and B is performed first. Then, the result of that join is left joined with table C. This means that all rows from table A are preserved, along with any matching rows from table B and C. Again, if there is no match, the columns from the respective tables will contain NULL values.</li>
</ul>
<p>let’s see, <span class="exturl"><a class="exturl__link"   href="http://sqlfiddle.com/#!9/5911603/14/0" >http://sqlfiddle.com/#!9/5911603/14/0</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  total.*,</span><br><span class="line">  active.*,</span><br><span class="line">  paid.*</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  total</span><br><span class="line">  <span class="keyword">left</span> <span class="keyword">join</span> active <span class="keyword">on</span> total.id = active.id</span><br><span class="line">  <span class="keyword">left</span> <span class="keyword">join</span> paid <span class="keyword">on</span> active.id = paid.id</span><br></pre></td></tr></table></div></figure>
<p>if changed to <code>left join paid on active.id = paid.id</code> to <code>left join paid on total.id = paid.id</code>,  will base on total.id not active.id </p>
<p><img src="https://img-blog.csdnimg.cn/3e4f8eae116241ae93ac02c6cb53a302.png" alt="在这里插入图片描述"></p>

        <h2 id="user-case"   >
          <a href="#user-case" class="heading-link"><i class="fas fa-link"></i></a>user case</h2>
      <p>Let’s implement this case, want to know how many student count per room with different student type</p>
<ul>
<li><code>inactive_student</code>:  how many student is inactive student to use library, should be <code>total left join active on  total.id = active.id where active.id is NULL</code></li>
<li><code>paid_active_student</code>:  how many student is paid active student to use library, should be <code>active left join paid on active.id = paid.id where paid.id is not NULL</code></li>
<li><code>not_paid_active_student</code>: how many user is not paid active student to use library, should be <code>active left join paid on active.id = paid.id where paid.id is NULL</code></li>
</ul>
<p>How to achieve above case by one sql query, let’s understand step by step. </p>
<p>sql: <span class="exturl"><a class="exturl__link"   href="http://sqlfiddle.com/#!9/5911603/3/0" >http://sqlfiddle.com/#!9/5911603/3/0</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><strong>IMPORTANT</strong>:  the conditions within the <code>CASE WHEN</code> statement are evaluated in <code>order</code>, and once a condition evaluates to true, the corresponding result is returned, <strong>and the subsequent conditions are not evaluated.</strong></p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  total.id <span class="keyword">as</span> <span class="keyword">id</span>,</span><br><span class="line">  total.room <span class="keyword">as</span> room,</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">case</span> </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      after run first when: active.id is NULL then &#x27;inactive_student&#x27;, the rest of users are active student. </span></span><br><span class="line"><span class="comment">      in the following two when, can split into paid_active_student and not_paid_active_student</span></span><br><span class="line"><span class="comment">      **/</span></span><br><span class="line">      <span class="keyword">when</span> active.id <span class="keyword">is</span> <span class="literal">NULL</span> <span class="keyword">then</span> <span class="string">&#x27;inactive_student&#x27;</span></span><br><span class="line">      <span class="keyword">when</span> paid.id <span class="keyword">is</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">then</span> <span class="string">&#x27;paid_active_student&#x27;</span></span><br><span class="line">      <span class="keyword">else</span> <span class="string">&#x27;not_paid_active_student&#x27;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  ) <span class="keyword">AS</span> student_type</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  total</span><br><span class="line">  <span class="keyword">left</span> <span class="keyword">join</span> active <span class="keyword">on</span> total.id = active.id</span><br><span class="line">  <span class="keyword">left</span> <span class="keyword">join</span> paid <span class="keyword">on</span> active.id = paid.id</span><br></pre></td></tr></table></div></figure>
<p><img src="https://img-blog.csdnimg.cn/8d7d7bfffe1b4318b50fc37be59f44ee.png" alt="在这里插入图片描述"><br>Then based on above result to group by to know per room student type. </p>
<p>sql: [<span class="exturl"><a class="exturl__link"   href="http://sqlfiddle.com/#!9/5911603/13/0]" >http://sqlfiddle.com/#!9/5911603/13/0]</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>(<span class="exturl"><a class="exturl__link"   href="http://sqlfiddle.com/#!9/5911603/13/0" >http://sqlfiddle.com/#!9/5911603/13/0</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  total.room <span class="keyword">as</span> room,</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      orderly to match the result</span></span><br><span class="line"><span class="comment">      **/</span></span><br><span class="line">      <span class="keyword">when</span> active.id <span class="keyword">is</span> <span class="literal">NULL</span> <span class="keyword">then</span> <span class="string">&#x27;inactive_student&#x27;</span></span><br><span class="line">      <span class="keyword">when</span> paid.id <span class="keyword">is</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">then</span> <span class="string">&#x27;paid_active_student&#x27;</span></span><br><span class="line">      <span class="keyword">else</span> <span class="string">&#x27;not_paid_active_student&#x27;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  ) <span class="keyword">AS</span> student_type,</span><br><span class="line">  <span class="keyword">count</span>(total.id) <span class="keyword">as</span> total_student</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  total</span><br><span class="line">  <span class="keyword">left</span> <span class="keyword">join</span> active <span class="keyword">on</span> total.id = active.id</span><br><span class="line">  <span class="keyword">left</span> <span class="keyword">join</span> paid <span class="keyword">on</span> active.id = paid.id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  room,</span><br><span class="line">  student_type</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">  room,</span><br><span class="line">  student_type</span><br></pre></td></tr></table></div></figure>
<p><img src="https://img-blog.csdnimg.cn/b8fc28eaa2794dd0af7b9247c7caa781.png" alt="在这里插入图片描述"></p>

        <h2 id="sql-query-execution-order"   >
          <a href="#sql-query-execution-order" class="heading-link"><i class="fas fa-link"></i></a>sql query execution order</h2>
      <p>for better understand above use case, let’s talk about sql query execution order. If you are familar with it, please skip. </p>
<p>In SQL, the order of execution of a query is generally as follows:</p>
<ol>
<li><code>FROM</code> clause: This specifies the tables or views involved in the query and sets up the initial result set.</li>
</ol>
<ol start="2">
<li><p><code>JOIN</code> clause: If there are any join operations specified in the query, the join conditions are evaluated, and the appropriate rows are combined from the joined tables.</p>
</li>
<li><p><code>WHERE</code> clause: This filters the rows from the result set based on the specified conditions.</p>
</li>
<li><p><code>GROUP BY</code> clause: If grouping is specified, the result set is divided into groups based on the specified grouping columns.</p>
</li>
<li><p><code>HAVING</code> clause: This filters the groups from the result set based on the specified conditions.</p>
</li>
<li><p><code>SELECT</code> clause: This selects the desired columns from the result set.</p>
</li>
<li><p><code>DISTINCT</code> keyword: If present, duplicate rows are eliminated from the result set.</p>
</li>
<li><p><code>ORDER BY</code> clause: The result set is sorted based on the specified columns and sort order.</p>
</li>
<li><p><code>LIMIT</code> or <code>OFFSET</code> clauses: If specified, the result set is limited to a certain number of rows or skipped by a certain number of rows.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Tableau 入门系列之各种图形绘制</title>
    <url>/posts/1324e406/</url>
    <content><![CDATA[
        <h2 id="What"   >
          <a href="#What" class="heading-link"><i class="fas fa-link"></i></a>What</h2>
      <p>Tableau 是一个可视化分析平台，它改变了我们使用数据解决问题的方式，使个人和组织能够充分利用自己的数据。</p>
<p>Tableau提供了非常丰富的图表，通过及其强大的功能，使得数据的可视化极其容易。Tableau，至少是我遇到最强大的可视化平台。</p>
<a id="more"></a>

        <h2 id="熟悉Tableau"   >
          <a href="#熟悉Tableau" class="heading-link"><i class="fas fa-link"></i></a>熟悉Tableau</h2>
      <p>如何下载及安装这里不讲了。可以先用试用版，试着熟悉下tableau。讲几个重要的概念。</p>
<img src="https://img-blog.csdnimg.cn/119d6e903cc946fdab647bd11fcafff3.png" width="500">

<ol>
<li>Data source。是用来连接各种数据，包括excel, 各种sql 数据库，no sql 数据库，spark，trino等。只有你想不到的数据，没有它连接不了的数据。想要做数据visulization的第一步就是要连接数据。连接数据后，也可以做一下数据的预处理。</li>
<li>Worksheet。是绘图的一个工作空间，最后制作dashboard的时候，就是由一个个Worksheet组成。</li>
<li>Dimensions(维度)。当连接到数据源的时候，Tableau将离散类型的字段(例如：值类型是字符串或者布尔值的字段)分配到Dimensions中。将Dimensions中的字段点击或拖拽进入行或者列当中时，Tableau就创建了行或列的标题。</li>
<li>Measures(度量)。当连接到某个数据源的时候，Tableau会将包含数字信息的字段分配到Measure上。当拖拽一个Measure字段到行或者列上时，Tableau会创建一根连续的轴。</li>
<li>Dashboard。就是最后通过拖拽Worksheet，构建dashboard，展示给用户的是最终的dashboard。</li>
<li>Marks(标记)。可以更改图的类型，颜色，文字等。这个是很重要的，通过修改mark来达到自己想要的效果。</li>
<li>Show me(智能推荐)。会根据你选择的Dimensions或者Measures，去推荐可以应用的图形。</li>
</ol>

        <h2 id="绘制各种图形"   >
          <a href="#绘制各种图形" class="heading-link"><i class="fas fa-link"></i></a>绘制各种图形</h2>
      <p>Follow 这个视频系列：<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1yZ4y1W7YM/" >https://www.bilibili.com/video/BV1yZ4y1W7YM/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> </p>
<p>视频所用到的超市数据：<span class="exturl"><a class="exturl__link"   href="https://download.csdn.net/download/u011563903/87222298" >link</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>完整的练习: <span class="exturl"><a class="exturl__link"   href="https://download.csdn.net/download/u011563903/87229964" >超市分析.twbx</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>另外能翻墙的话，youtube上有很多高质量的Tableau教学视频可以参考。</p>

        <h3 id="柱状图-📊"   >
          <a href="#柱状图-📊" class="heading-link"><i class="fas fa-link"></i></a>柱状图 📊</h3>
      <p>直接将利润拖拽到Rows，然后类别，子类别拖拽到Columns，然后子类别拖到color，就可以根据子类别显示颜色，效果图:<br><img src="https://img-blog.csdnimg.cn/4ac3a481184d4fad9425c55235d1c9d5.png" width="400"></p>

        <h3 id="折线图📈"   >
          <a href="#折线图📈" class="heading-link"><i class="fas fa-link"></i></a>折线图📈</h3>
      <p>一张图显示两个measures, 销售额和利润。将利润和销售额拖到Rows，然后订单日期拖到Column，订单日期也可以更改成按quarter, week, day。</p>
<p>还要注意一点，因为Rows是两个，相当于两个图层，所以要选择Dual Axis的方式。<br><img src="https://img-blog.csdnimg.cn/5c230ac0aef54673a83d23d1795612c0.png" width="400"></p>
<p>最后效果图：<br><img src="https://img-blog.csdnimg.cn/9ccd2a6c1ab64d5bb5e3d14cd49f761a.png" width="400"></p>

        <h3 id="饼图"   >
          <a href="#饼图" class="heading-link"><i class="fas fa-link"></i></a>饼图</h3>
      <p>直接将字段和折扣拖到Marks里。</p>
<img src="https://img-blog.csdnimg.cn/d4f93a628ac343cb97525f89e688325f.png" width="400">


        <h3 id="文字云"   >
          <a href="#文字云" class="heading-link"><i class="fas fa-link"></i></a>文字云</h3>
      <p>通过文字的颜色和大小展示数据的方式。</p>
<img src="https://img-blog.csdnimg.cn/a3ad603dd41043bc885ea6797cc313b5.png" width="400">


        <h3 id="气泡图"   >
          <a href="#气泡图" class="heading-link"><i class="fas fa-link"></i></a>气泡图</h3>
      <img src="https://img-blog.csdnimg.cn/a1e4f92a0627447b9a2fce3e1156e1dd.png" width="400">


        <h3 id="热图"   >
          <a href="#热图" class="heading-link"><i class="fas fa-link"></i></a>热图</h3>
      <p>通过图形的大小来展示数据<br><img src="https://img-blog.csdnimg.cn/5afb7bd5c73d457fb6f2d6ce8f4e361d.png" width="400"></p>

        <h3 id="突出显示图"   >
          <a href="#突出显示图" class="heading-link"><i class="fas fa-link"></i></a>突出显示图</h3>
      <p>通过颜色的深浅来凸显数据。</p>
<img src="https://img-blog.csdnimg.cn/c82ddd0bcf6d452c95013c74106e1967.png" width="400">


        <h3 id="筛选器"   >
          <a href="#筛选器" class="heading-link"><i class="fas fa-link"></i></a>筛选器</h3>
      <p>可以将字段拖到filter里指定需要exclude或者选中的字段。</p>
<img src="https://img-blog.csdnimg.cn/a2c6960eaceb426f8d95cf228c89b26a.png" width="400">


        <h3 id="参考线"   >
          <a href="#参考线" class="heading-link"><i class="fas fa-link"></i></a>参考线</h3>
      <p>可以画出一根在图中的参考线。<br><img src="https://img-blog.csdnimg.cn/ecc440572c384818aa36073a8293becf.png" width="400"></p>

        <h3 id="地图"   >
          <a href="#地图" class="heading-link"><i class="fas fa-link"></i></a>地图</h3>
      <p>如果选择城市，省等map数据后不能显示地图，有两个可能的原因：<br>1.选中字段省/自治区 —&gt; Geographic Role -&gt; State/Province，意思要让tableau知道这个字段是一个省的字段。<br><img src="https://img-blog.csdnimg.cn/be176a2f3fb841d2b6dbb7d0a33a69ab.png" width="400"></p>
<p>2.如果你的系统版本是英文的，然后在选择制作地图的时候，内容是空的图层，解决方法是：Map -&gt;  Edit Location -&gt; Country/Region 改成China。反之英文的字段也有可能存在这个问题。并且点击感叹号旁边的1 issue,2issues 可以手动map tableau不能识别的数据。</p>
<img src="https://img-blog.csdnimg.cn/e92758bf79c1434982ad64aaef8cc928.png" width="400">

<p>开始绘制地图，想要显示省、城市的销售额数据。</p>
<p>因为是要同时显示省和城市两个维度，要制作两个图层，Rows里新加一个latitude(generated)，然后设置<br><img src="https://img-blog.csdnimg.cn/7c03b30bef7b401fb846b6cd2ba496b1.png" width="400"></p>
<p>在mark里就会看到有2个图层<br><img src="https://img-blog.csdnimg.cn/c6a0bd7069614198a23dec2c20f021cd.png" width="400"></p>
<p>设置第二个Marks，改成Circle，就可以显示出如果是Circle大就表明销售额数据高，并且颜色也深。<br><img src="https://img-blog.csdnimg.cn/e018eef77a6845ab893f4aeed09b67cc.png" width="400"></p>
<p>如果是要制作热地图，则选择Density。<br><img src="https://img-blog.csdnimg.cn/5410710e30d3486991dda1efb1be162d.png" width="400"></p>

        <h2 id="制作Dashboard"   >
          <a href="#制作Dashboard" class="heading-link"><i class="fas fa-link"></i></a>制作Dashboard</h2>
      <p>Dashboard是通过object组成的，一般是先选择一个Vertical的，然后再在Vertical中插入每一行，每一行就是要插入每一个Horizontal，然后再在Horizontal中插入每一个worksheet，并且一定要选择Tiled，否则如果选择Floating的话，worksheet是不能放进对应的Horizontal中。</p>
<img src="https://img-blog.csdnimg.cn/3dbe8b47949a49d1b78834dad5909e16.png" width="400">

<p>另外也可以在size里，自己custom size，选择range，可以指定最大和最小的size。</p>
<p>另外也可以参考别人比较好的dashboard，<span class="exturl"><a class="exturl__link"   href="https://www.vizwiz.com/" >https://www.vizwiz.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> </p>
]]></content>
      <categories>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>BigData</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC M1重启后自动启动虚拟机</title>
    <url>/posts/17bf4594/</url>
    <content><![CDATA[
        <h2 id="Why"   >
          <a href="#Why" class="heading-link"><i class="fas fa-link"></i></a>Why</h2>
      <p>笔者在M1通过UTM setup了一个虚拟机，虚拟机开机的时候会自动启动我设置的服务，那如何让M1重启后自动启动虚拟机呢？ </p>
<a id="more"></a>


        <h2 id="How"   >
          <a href="#How" class="heading-link"><i class="fas fa-link"></i></a>How</h2>
      <p>首先要找到通过命令启动虚拟机的方法：</p>
<ul>
<li>UTM</li>
<li><ul>
<li><code>/Applications/UTM.app/Contents/MacOS/utmctl start ubuntu --hide</code></li>
</ul>
</li>
<li>Virtualbox</li>
<li><ul>
<li><code>/Applications/VirtualBox.app/Contents/MacOS/VBoxManage startvm ubuntu --type headless</code></li>
</ul>
</li>
</ul>
<p>因为M1上virtualbox 不支持，我用的UTM去setup的虚拟机，具体过程详见 <span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/u011563903/article/details/127667082" >here</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>
<p>创建自启动plist文件</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">cat /Users/haofan/Library/LaunchAgents/org.utm.launch.ubuntu.plist</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span><br><span class="line">&lt;plist version=<span class="string">&quot;1.0&quot;</span>&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">  &lt;key&gt;Label&lt;/key&gt;</span><br><span class="line">  &lt;string&gt;org.utm.launch.ubuntu.plist&lt;/string&gt;</span><br><span class="line">  &lt;key&gt;ProgramArguments&lt;/key&gt;</span><br><span class="line">  &lt;array&gt;</span><br><span class="line">    &lt;string&gt;/Applications/UTM.app/Contents/MacOS/utmctl&lt;/string&gt;</span><br><span class="line">    &lt;string&gt;start&lt;/string&gt;</span><br><span class="line">    &lt;string&gt;ubuntu&lt;/string&gt;</span><br><span class="line">    &lt;string&gt;--hide&lt;/string&gt;</span><br><span class="line">  &lt;/array&gt;</span><br><span class="line">  &lt;key&gt;RunAtLoad&lt;/key&gt;</span><br><span class="line">  &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></div></figure>
<p>测试：</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">launchctl load /Users/haofan/Library/LaunchAgents/org.utm.launch.ubuntu.plist</span><br></pre></td></tr></table></div></figure>
<p>最后重启Mac后，虚拟机自动启动。</p>
]]></content>
      <categories>
        <category>MacOS</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>一文搞定通过UTM 在MAC M1上安装centos/ubuntu VM</title>
    <url>/posts/fc62d617/</url>
    <content><![CDATA[<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p>

        <h2 id="前言"   >
          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a>前言</h2>
      <p>自从买入Macbook M1 之后，在MAC上安装centos/ununtu 虚拟机一直是想尝试的事情。</p>
<p>最近，virtualbox 的最新的beta 版本说是已经支持在m1上运行，结果今天测试了一下发现并不work。</p>
<p>然后就折腾其他方案，终于work了。本文描述的是通过UTM + centos9/ubuntu 实现在Mac M1上启动centos VM。</p>
<a id="more"></a>


        <h2 id="下载安装UTM"   >
          <a href="#下载安装UTM" class="heading-link"><i class="fas fa-link"></i></a>下载安装UTM</h2>
      <p><span class="exturl"><a class="exturl__link"   href="https://mac.getutm.app/" >UTM</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 是一个开源的在MacOS/IOS上基于QEMU启动虚拟机的方案。</p>
<p><span class="exturl"><a class="exturl__link"   href="https://github.com/utmapp/UTM/releases/latest/download/UTM.dmg" >下载link</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> </p>
<p>安装直接点击下载后的文件，即可。</p>

        <h2 id="why-centos9"   >
          <a href="#why-centos9" class="heading-link"><i class="fas fa-link"></i></a>why centos9</h2>
      <p>我试过安装centos7，但是发现，centos7不能安装成功。具体讨论在，<span class="exturl"><a class="exturl__link"   href="https://github.com/utmapp/utm/discussions/2659" >here</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>
<p>结论就是：centos7/centos8不能在Mac M1下运行成功，centos9可以。</p>
<p>centos9 <span class="exturl"><a class="exturl__link"   href="https://mirrors.bfsu.edu.cn/centos-stream/9-stream/BaseOS/aarch64/iso/CentOS-Stream-9-latest-aarch64-dvd1.iso" >下载地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，必须是aarch64 版本。</p>

        <h2 id="安装centos9"   >
          <a href="#安装centos9" class="heading-link"><i class="fas fa-link"></i></a>安装centos9</h2>
      <p>安装比较简单:</p>

        <h3 id="Step1-Create-VM"   >
          <a href="#Step1-Create-VM" class="heading-link"><i class="fas fa-link"></i></a>Step1: Create VM.</h3>
      <img src=https://img-blog.csdnimg.cn/9c47886478444817ab621c3565916612.png width=60% />


        <h3 id="Step2-Select-ISO-image"   >
          <a href="#Step2-Select-ISO-image" class="heading-link"><i class="fas fa-link"></i></a>Step2: Select ISO image</h3>
      <p>ISO image 是: CentOS-Stream-9-latest-aarch64-dvd1.iso<br><img src=https://img-blog.csdnimg.cn/af18397ffc5d413f959ec353b3ac0334.png width=60%/></p>
<p>然后根据自己需要设置以下参数:</p>
<ul>
<li>Memory: 4GB </li>
<li>Cores: 4 </li>
<li>Disk Size: 64GB</li>
</ul>
<p>Next step, step… 设置disk 和 admin username/password</p>

        <h3 id="Reboot"   >
          <a href="#Reboot" class="heading-link"><i class="fas fa-link"></i></a>Reboot</h3>
      <p>选择clear ISO image，否则重启后，又要重新安装centos<br><img src=https://img-blog.csdnimg.cn/ccdf833ca0f24c129ab685ed40869aa5.png width=60%></p>
<p>Reboot后，enjoy centos9. </p>

        <h2 id="安装Ubuntu"   >
          <a href="#安装Ubuntu" class="heading-link"><i class="fas fa-link"></i></a>安装Ubuntu</h2>
      <p>下载ubuntu desktop版本 <span class="exturl"><a class="exturl__link"   href="https://cdimage.ubuntu.com/focal/daily-live/current/focal-desktop-amd64.iso" >focal-desktop-arm64.iso</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，必须是aarch64 版本。</p>
<p>安装方法和上面centos类似，注意的地方要勾选下面这个install third-party…<br><img src="https://img-blog.csdnimg.cn/89882c7907ea492ab161c486d69dfb79.png" alt="在这里插入图片描述"><br>如果因为分辨率太高，ubuntu里字体图标都很小。</p>
<ol>
<li>点击ubuntu的setting</li>
<li>点击弹出窗口的dispalys</li>
<li>弹出的Displays窗口中，拉动Scale for menu and title bars 选项条，将值拉大，保存。</li>
</ol>
<p>安装ssh server，Network选择Shared network</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">sudo ufw allow ssh</span><br></pre></td></tr></table></div></figure>
<p>最后就可以正常能ssh这台虚拟机了。</p>
]]></content>
      <categories>
        <category>MacOS</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用v2ray+vps搭建梯子</title>
    <url>/posts/e97510bb/</url>
    <content><![CDATA[
        <h2 id="Why-搭梯子"   >
          <a href="#Why-搭梯子" class="heading-link"><i class="fas fa-link"></i></a>Why 搭梯子</h2>
      <ol>
<li>可以能正常访问google。 </li>
<li>看看YouTube。</li>
<li>学习下不同的技术。<a id="more"></a>

</li>
</ol>

        <h2 id="What’s-v2ray"   >
          <a href="#What’s-v2ray" class="heading-link"><i class="fas fa-link"></i></a>What’s v2ray</h2>
      <p>Refer <span class="exturl"><a class="exturl__link"   href="https://www.sagetool.com/jishuzixun/45.html#:~:text=V2Ray%E4%BC%98%E7%82%B9%20%E6%9B%B4%E5%AE%8C%E5%96%84%E7%9A%84%E5%8D%8F%E8%AE%AE%3A%20V2Ray%20%E4%BD%BF%E7%94%A8%E4%BA%86%E6%96%B0%E7%9A%84%E8%87%AA%E8%A1%8C%E7%A0%94%E5%8F%91%E7%9A%84%20VMess%20%E5%8D%8F%E8%AE%AE%EF%BC%8C%E6%94%B9%E6%AD%A3%E4%BA%86%20Shadowsocks%20%E4%B8%80%E4%BA%9B%E5%B7%B2%E6%9C%89%E7%9A%84%E7%BC%BA%E7%82%B9%EF%BC%8C%E6%9B%B4%E9%9A%BE%E8%A2%AB%E5%A2%99%E6%A3%80%E6%B5%8B%E5%88%B0,%E6%9B%B4%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%80%A7%E8%83%BD%3A%20%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%9B%B4%E5%A5%BD%EF%BC%8C%E5%85%B7%E4%BD%93%E6%95%B0%E6%8D%AE%E5%8F%AF%E4%BB%A5%E7%9C%8B%20V2Ray%20%E5%AE%98%E6%96%B9%E5%8D%9A%E5%AE%A2%20%E6%9B%B4%E4%B8%B0%E5%AF%8C%E7%9A%84%E5%8A%9F%E8%83%BD%3A%20%E4%BB%A5%E4%B8%8B%E6%98%AF%E9%83%A8%E5%88%86%20V2Ray%20%E7%9A%84%E5%8A%9F%E8%83%BD%EF%BC%9A" >here</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>之前是用的SSR(shadowsocks)，但是发现经常服务器经常被禁。所以转战v2ray。</p>
<p>V2RAY 在安全、伪装、稳定等方面几乎是碾压 SSR。</p>
<p>既然这样为什么 V2RAY 不普及了？因为 SSR 比 V2RAY 先出道，市面上更多的客户端对于 SSR 的匹配炉火纯青。但是现在 V2RAY 在“强”的不断催促下，也迸发出了转机。</p>
<p>由于各大鸡鸡的提供商和“番茄”爱好者的纷纷转入 V2RAY，所以很多适配的软件也挺多了，但是手机上的app都是收费的。</p>

        <h2 id="What’s-vultr-vps"   >
          <a href="#What’s-vultr-vps" class="heading-link"><i class="fas fa-link"></i></a>What’s vultr(vps) ?</h2>
      <p>Vultr 是 美国的VPS服务商，从2014年开始提供云VPS服务。实力雄厚，全球有15个数据中心，包括亚洲、欧洲、美国等多个地区，亚洲地区有日本和新加坡两个数据节。</p>
<p>Vultr最便宜的VPS大概是1vCPU, 1GB Memory, 1TB bandwidth 是每个月5$。</p>
<p>VPS是Virtual Private Server的缩写，意思是虚拟专用服务器。说简单点就是一台别人帮你运行的电脑，跟平常自己用的电脑功能一样，但是它有一个IP（相当于地址，你可以在网络上找到这台电脑），当然它也可以访问网络。一般是通过KVM技术创建多台服务器。</p>
<p>注意VPS和我们在公有云用的VM不是很相同，VPS要比公有云的虚拟机更便宜，公有云一般是通过OpenStack技术创建多台服务器。</p>
<p>通过在vultr上创建vps，可以创建一个有公网IP的专有虚拟机。</p>

        <h2 id="How-to-搭梯子？"   >
          <a href="#How-to-搭梯子？" class="heading-link"><i class="fas fa-link"></i></a>How to 搭梯子？</h2>
      
        <h3 id="Server-Install"   >
          <a href="#Server-Install" class="heading-link"><i class="fas fa-link"></i></a>Server Install</h3>
      <ol>
<li>Createa a filewall, access <span class="exturl"><a class="exturl__link"   href="https://my.vultr.com/firewall/" >https://my.vultr.com/firewall/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> . 31462 是vps中运行v2ray的端口。 <img src=https://img-blog.csdnimg.cn/6289dfd75dda477aa1da6597949d5523.png width=70% /></li>
<li>Create startup script, access <span class="exturl"><a class="exturl__link"   href="https://my.vultr.com/startup/" >https://my.vultr.com/startup/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.  <img src=https://img-blog.csdnimg.cn/1c79c69c323c4d98b00ead21fc24d712.png width=70% />
 install_ss 内容如下，就是安装v2ray并做基本的配置。请更换一个你自己的64位id，这个id其实就是一个密码，客户端和服务端都需要配置。另外也可以修改port，但注意同时也要允许在firewall中allow to access this port both udp and tcp. 
 <figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">set -u</span><br><span class="line">set -e</span><br><span class="line">touch /var/log/test</span><br><span class="line">systemctl stop firewalld.service &amp;&amp; systemctl disable firewalld</span><br><span class="line">curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh | bash</span><br><span class="line"><span class="meta">cat&gt;</span><span class="bash">/usr/<span class="built_in">local</span>/etc/v2ray/config.json&lt;&lt;EOF</span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;log&quot;: &#123;</span><br><span class="line">        &quot;access&quot;: &quot;/var/log/v2ray/access.log&quot;,</span><br><span class="line">        &quot;error&quot;: &quot;/var/log/v2ray/error.log&quot;,</span><br><span class="line">        &quot;loglevel&quot;: &quot;debug&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;inbound&quot;: &#123;</span><br><span class="line">        &quot;port&quot;:31462,</span><br><span class="line">        &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;settings&quot;: &#123;</span><br><span class="line">            &quot;clients&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;id&quot;: &quot;a1f94c38-f84d-43cd-981d-f1732f447a42&quot;,</span><br><span class="line">                    &quot;level&quot;: 1,</span><br><span class="line">                    &quot;alterId&quot;: 0</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;streamSettings&quot;: &#123;</span><br><span class="line">            &quot;network&quot;: &quot;kcp&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;detour&quot;: &#123;</span><br><span class="line">            &quot;to&quot;: &quot;vmess-detour-522598&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;outbounds&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;protocol&quot;: &quot;freedom&quot;,</span><br><span class="line">      &quot;settings&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sed -i &#x27;11i\Environment=&quot;V2RAY_VMESS_AEAD_FORCED=false&quot;&#x27; /etc/systemd/system/v2ray.service</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable v2ray</span><br><span class="line">systemctl restart v2ray</span><br><span class="line">echo &quot;done&quot;</span><br></pre></td></tr></table></div></figure></li>
<li>Deploy a new instance. 选择centos7, firewall group, startup script.  <img src=https://img-blog.csdnimg.cn/0e72952c59114725a5cdbf118ec143c7.png width=80% />
 大概过个20分钟, v2ray就可以自动setup好。
### Client Install</li>
<li>Mac 安装v2rayx  <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">brew install --cask v2rayx</span><br></pre></td></tr></table></div></figure></li>
<li>设置Address 是server的公网IP，port 是在/usr/local/etc/v2ray/config.json 中设置的port，User ID也是在/usr/local/etc/v2ray/config.json设置的id。 <img src=https://img-blog.csdnimg.cn/f64c01f3b96c4c9ba6d4bc443d5ba5e3.png width=60% />

</li>
</ol>

        <h3 id="Troubleshooting"   >
          <a href="#Troubleshooting" class="heading-link"><i class="fas fa-link"></i></a>Troubleshooting</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server logs</span></span><br><span class="line">/var/<span class="built_in">log</span>/v2ray/error.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># check if v2ray is running.</span></span><br><span class="line">systemctl status v2ray</span><br></pre></td></tr></table></div></figure>

        <h3 id="Automation"   >
          <a href="#Automation" class="heading-link"><i class="fas fa-link"></i></a>Automation</h3>
      <p>如果想定时destroy 和start server，只是为了省钱，大概可以省2/3的钱，穷，没办法。</p>
<ol>
<li>Get api-key. Account -&gt; Personal Access Token. <img src=https://img-blog.csdnimg.cn/d869aad638cc464392db5d6e76f56f31.png width=60% /></li>
<li>Create vultr-cli.yaml, update api-key to above personal access token. <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">cat ~/.vultr-cli.yaml</span><br><span class="line">api-key: xxxxxx</span><br></pre></td></tr></table></div></figure></li>
<li>Install vultr cli. Refer: <span class="exturl"><a class="exturl__link"   href="https://github.com/vultr/vultr-cli" >https://github.com/vultr/vultr-cli</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">brew tap vultr/vultr-cli</span><br><span class="line">brew install brew install vultr-cli</span><br></pre></td></tr></table></div></figure></li>
<li>Create alias command in your Mac.  By <code>vultr-cli script list</code> to know script id.  refer <span class="exturl"><a class="exturl__link"   href="https://www.vultr.com/docs/vultr-server-status-json-endpoints" >here</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> to get region id.  <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> vultr_list_vm=<span class="string">&quot;vultr-cli instance list&quot;</span></span><br><span class="line"><span class="built_in">alias</span> vultr_delete_vm=<span class="string">&quot;vultr-cli instance delete <span class="subst">$(vultr-cli instance list | awk &#x27;&#123;print $1&#125;&#x27; | sed -n 2p)</span>&quot;</span></span><br><span class="line"><span class="built_in">alias</span> vultr_stop_vm=<span class="string">&quot;vultr-cli instance stop <span class="subst">$(vultr-cli instance list | awk &#x27;&#123;print $1&#125;&#x27; | sed -n 2p)</span>&quot;</span></span><br><span class="line"><span class="built_in">alias</span> vultr_start_vm=<span class="string">&quot;vultr-cli instance start <span class="subst">$(vultr-cli instance list | awk &#x27;&#123;print $1&#125;&#x27; | sed -n 2p)</span>&quot;</span></span><br><span class="line"><span class="built_in">alias</span> vultr_create_vm=<span class="string">&quot;vultr-cli instance create --region nrt --plan vc2-1c-1gb --script-id 83fdbdbc-2789-4b0f-ac5a-663bda866faa --firewall-group c0197040-ebc9-4df5-a3f2-04ba4af871e8 --os 167 --label shadowsocks&quot;</span></span><br></pre></td></tr></table></div></figure>

</li>
</ol>
<p>欢迎关注我个人公众号：<br><img src="https://img-blog.csdnimg.cn/7a18fa61be0b47d780b0714a0f39e6d7.jpeg" alt="请添加图片描述"></p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>在运行在M1的ubuntu虚拟机上安装Mediawiki</title>
    <url>/posts/d8b155f3/</url>
    <content><![CDATA[
        <h2 id="Why"   >
          <a href="#Why" class="heading-link"><i class="fas fa-link"></i></a>Why</h2>
      <p>最近开始转向arm架构的M1 Macbook了，不得不说M1的续航，性能确实用起来很丝滑。之前在x86上安装的虚拟机以及虚拟机上安装的mediawiki都要迁移到M1上。</p>
<p>因为底层系统架构从x86到ARM，所以之前的虚拟机不能在M1上直接用，并且docker image也必须用arm64版本的，一切都要从头开始。</p>
<a id="more"></a>
<p>Mediawiki已经成为我日常工作记录笔记的重要的工具，用它建立知识树很方便，并且search也很快，要想把mediawiki 跑起来，要setup一个VM，然后在VM上用docker 将mediawiki setup。</p>
<p>安装mediawiki之前，先安装ubuntu或者centos VM，<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/u011563903/article/details/127667082" >参考</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 。</p>

        <h2 id="安装"   >
          <a href="#安装" class="heading-link"><i class="fas fa-link"></i></a>安装</h2>
      <p>参考 <span class="exturl"><a class="exturl__link"   href="https://hub.docker.com/r/arm64v8/mysql" >here</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="安装mysql"   >
          <a href="#安装mysql" class="heading-link"><i class="fas fa-link"></i></a>安装mysql</h3>
      <p>初始化创建目录</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/mywiki/mysql/initdb.d</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/mywiki/mysql/data</span><br><span class="line"><span class="comment"># 创建mysql.cnf</span></span><br><span class="line">cat <span class="variable">$HOME</span>/mywiki/mysql/initdb.d/mysql.cnf</span><br><span class="line"><span class="comment"># This is custom config file attached from docker host</span></span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default_character_set = utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character_set_server = utf8          <span class="comment"># If you prefer utf8</span></span><br><span class="line">collation_server = utf8_general_ci</span><br></pre></td></tr></table></div></figure>

<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建run-mysql.sh，然后跑下这个脚本，mysql就setup 起来了。</span></span><br><span class="line">cat <span class="variable">$HOME</span>/mywiki/mysql/run-mysql.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;stopping mysql container&quot;</span></span><br><span class="line">docker stop mysql 2&gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;removing mysql container&quot;</span></span><br><span class="line">docker rm mysql 2&gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;re-starting mysql container&quot;</span></span><br><span class="line">docker run \</span><br><span class="line">	--name mysql \</span><br><span class="line">	-v <span class="variable">$HOME</span>/mywiki/mysql/initdb.d:/docker-entrypoint-initdb.d \</span><br><span class="line">	-v <span class="variable">$HOME</span>/mywiki/mysql/data:/var/lib/mysql \</span><br><span class="line">	-e MYSQL_ROOT_PASSWORD=changeme \</span><br><span class="line">	-d arm64v8/mysql:8-oracle \</span><br></pre></td></tr></table></div></figure>

        <h3 id="安装mediawiki"   >
          <a href="#安装mediawiki" class="heading-link"><i class="fas fa-link"></i></a>安装mediawiki</h3>
      <p>参考 <span class="exturl"><a class="exturl__link"   href="https://hub.docker.com/r/arm64v8/mediawiki/" >here</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>初始化创建目录</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/mywiki/mediawiki/config</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/mywiki/mediawiki/resources/assets/</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/mywiki/mediawiki/images/</span><br><span class="line">chmod 755 <span class="variable">$HOME</span>/mywiki/mediawiki/images/</span><br></pre></td></tr></table></div></figure>

<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建run-mediawiki.sh，然后跑下这个脚本，mediawiki就setup 起来了。</span></span><br><span class="line">cat <span class="variable">$HOME</span>/mywiki/mediawiki/run-mediawiki.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Stopping mediawiki container&quot;</span></span><br><span class="line">docker stop mediawiki 2&gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Removing mediawiki container&quot;</span></span><br><span class="line">docker rm mediawiki 2&gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Restarting mediawiki container&quot;</span></span><br><span class="line">docker run --name mediawiki \</span><br><span class="line">	--link mysql:mysql \</span><br><span class="line">	-p 8080:80 \</span><br><span class="line">	<span class="comment"># After initial setup, download LocalSettings.php to the same directory and uncomment below code, then restart mediawiki</span></span><br><span class="line">	<span class="comment"># -v $HOME/mywiki/mediawiki/config/LocalSettings.php:/var/www/html/LocalSettings.php \</span></span><br><span class="line">	-v <span class="variable">$HOME</span>/mywiki/mediawiki/images:/var/www/html/images \</span><br><span class="line">	-v <span class="variable">$HOME</span>/mywiki/mediawiki/resources/assets/mywiki.jpg:/var/www/html/resources/assets/mywiki.jpg \</span><br><span class="line">	-d arm64v8/mediawiki:1.35.9 \</span><br></pre></td></tr></table></div></figure>

<p>docker ps 检查两个container是否都正常运行起来了。</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">haofan@haofan:~/mywiki/mediawiki$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE                      COMMAND                  CREATED          STATUS          PORTS                                   NAMES</span><br><span class="line">259197fb1486   arm64v8/mediawiki:1.35.9   <span class="string">&quot;docker-php-entrypoi…&quot;</span>   37 seconds ago   Up 36 seconds   0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;80/tcp   mediawiki</span><br><span class="line">cd448396fc1f   arm64v8/mysql:8-oracle     <span class="string">&quot;docker-entrypoint.s…&quot;</span>   37 minutes ago   Up 37 minutes   3306/tcp, 33060/tcp                     mysql</span><br></pre></td></tr></table></div></figure>
<p>浏览器访问<span class="exturl"><a class="exturl__link"   href="http://192.168.64.8:8080/index.php" >http://192.168.64.8:8080/index.php</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 开始setup mediawiki。192.168.64.8 是我的虚拟机IP</p>
<p><img src="https://img-blog.csdnimg.cn/3aea7437222041b893de056396c05248.png" alt="在这里插入图片描述"></p>
<p>数据库的主机，就是mysql container的ip，可以通过。<code>docker inspect mysql | grep &quot;IPAddress&quot;</code> 查看IP<br><img src="https://img-blog.csdnimg.cn/5f2f3b5f926c457bb3ae883f02d5c9a3.png" width="50%"></p>
<p>输入用户名和密码:<br><img src="https://img-blog.csdnimg.cn/9bba294889024fb199aca485632713b9.png" width="50%"></p>
<p>启用文件上传：<br><img src="https://img-blog.csdnimg.cn/f568090eb57640efb49fbd9b024b75ec.png" width="50%"></p>
<p>下载LocalSettings.php，放到$HOME/mywiki/mediawiki/config下。然后修改LocalSettings.php</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Before</span></span><br><span class="line"><span class="variable">$wgServer</span> = <span class="string">&quot;http://192.168.64.8:8080&quot;</span>;</span><br><span class="line"><span class="comment"># After</span></span><br><span class="line"><span class="variable">$wgServer</span> = <span class="string">&quot;http://0.0.0.0:8080&quot;</span>;</span><br></pre></td></tr></table></div></figure>
<p>重启mediawiki，脚本用:</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">cat <span class="variable">$HOME</span>/mywiki/mediawiki/run-mediawiki.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Stopping mediawiki container&quot;</span></span><br><span class="line">docker stop mediawiki 2&gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Removing mediawiki container&quot;</span></span><br><span class="line">docker rm mediawiki 2&gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Restarting mediawiki container&quot;</span></span><br><span class="line">docker run --name mediawiki \</span><br><span class="line">	--link mysql:mysql \</span><br><span class="line">	-p 8080:80 \</span><br><span class="line">	-v <span class="variable">$HOME</span>/mywiki/mediawiki/config/LocalSettings.php:/var/www/html/LocalSettings.php \</span><br><span class="line">	-v <span class="variable">$HOME</span>/mywiki/mediawiki/images:/var/www/html/images \</span><br><span class="line">	-v <span class="variable">$HOME</span>/mywiki/mediawiki/resources/assets/mywiki.jpg:/var/www/html/resources/assets/mywiki.jpg \</span><br><span class="line">	-d arm64v8/mediawiki:1.35.9 \</span><br></pre></td></tr></table></div></figure>
<p>再次打开，wiki 已经安装完成，start enjoying. </p>

        <h2 id="迁移"   >
          <a href="#迁移" class="heading-link"><i class="fas fa-link"></i></a>迁移</h2>
      <p>不得不一个个page进行迁移，在M1上运行如下命令:</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 192.168.2.143 是x86的MacOS。任何访问localhost:8080的流量，都会访问192.168.2.143:8080</span></span><br><span class="line"> ssh haofan@192.168.2.143 -L 8080:localhost:8080</span><br></pre></td></tr></table></div></figure>
<p>这样就可以在M1上打开在x86上跑的旧的mediawiki了。然后开始慢慢迁移吧。</p>

        <h2 id="设置systemd让虚拟机重启时自动启动wiki"   >
          <a href="#设置systemd让虚拟机重启时自动启动wiki" class="heading-link"><i class="fas fa-link"></i></a>设置systemd让虚拟机重启时自动启动wiki</h2>
      <p>设置systemd.service</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemd service:</span></span><br><span class="line"><span class="comment"># cat /etc/systemd/system/mywiki.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Mywiki Service</span><br><span class="line">Requires=docker.service</span><br><span class="line">After=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Restart=<span class="literal">false</span></span><br><span class="line">ExecStartPre=/bin/sleep 5</span><br><span class="line">ExecStart=/home/haofan/mywiki/startWiki.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br></pre></td></tr></table></div></figure>

<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Start wiki 脚本</span></span><br><span class="line"><span class="comment"># cat /home/haofan/mywiki/startWiki.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">/usr/bin/docker start mysql</span><br><span class="line">/bin/sleep 2</span><br><span class="line">/usr/bin/docker start mediawiki</span><br></pre></td></tr></table></div></figure>
<p>enable mywiki.service，然后重启VM测试:</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></div></figure>
]]></content>
      <categories>
        <category>MacOS</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>用Tinyproxy搭建自己的proxy server</title>
    <url>/posts/32acde64/</url>
    <content><![CDATA[
        <h2 id="What-is-Tinyproxy"   >
          <a href="#What-is-Tinyproxy" class="heading-link"><i class="fas fa-link"></i></a>What is Tinyproxy</h2>
      <p><span class="exturl"><a class="exturl__link"   href="https://tinyproxy.github.io/" >Tinyproxy</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 是一个轻量级，跨平台，开源的，同时支持http/https两种方式代理。</p>
<a id="more"></a>


        <h2 id="为什么搭建自己的proxy-server"   >
          <a href="#为什么搭建自己的proxy-server" class="heading-link"><i class="fas fa-link"></i></a>为什么搭建自己的proxy server</h2>
      <p>设想这种case, 你家里有一台电脑可以登录各种网站(细品)，然后你家里的其他设备，电脑，ipad也想登录各种网站，怎么办？</p>
<p>一个简单的办法，是可以把能登录各种网站的电脑通过Tinyproxy配置一个http/https proxy server，然后其他终端设备就可以在局域网里直接连接这个http/https server了。</p>

        <h2 id="如何安装-配置proxy-server"   >
          <a href="#如何安装-配置proxy-server" class="heading-link"><i class="fas fa-link"></i></a>如何安装/配置proxy server</h2>
      <p>这里只讲mac平台的配置。</p>
<p>安装tinyproxy，一条命令搞定</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">brew install tinyproxy</span><br></pre></td></tr></table></div></figure>
<p>配置tinyproxy，修改如下文件：</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">vi /opt/brew/etc/tinyproxy/tinyproxy.conf</span><br><span class="line"><span class="comment"># 修改 Allow 127.0.0.1</span></span><br><span class="line"><span class="comment"># 如果comment Allow 127.0.0.1 就是默认允许任何主机访问。</span></span><br><span class="line"><span class="comment"># 可以修改成如下，意思是只允许局域网内访问。</span></span><br><span class="line">Allow 192.168.0.0/16</span><br></pre></td></tr></table></div></figure>
<p>启动tinyproxy</p>
<figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">tinyproxy <span class="comment"># run in background</span></span><br><span class="line">tinyproxy -d <span class="comment"># Do not daemonize (run in foreground)</span></span><br></pre></td></tr></table></div></figure>

        <h2 id="如何配置其他手机-电脑连接proxy-server"   >
          <a href="#如何配置其他手机-电脑连接proxy-server" class="heading-link"><i class="fas fa-link"></i></a>如何配置其他手机/电脑连接proxy server</h2>
      <ul>
<li>iPhone手机。设置-&gt;无线局域网-&gt;点击你已经连接的wifi后的叹号图标-&gt;配置代理-&gt;选择手动-&gt;输入IP地址和端口号。</li>
<li>Mac。选择wifi -&gt; Network preferences -&gt; Advanced -&gt; proxies -&gt; enable web proxy(http)和Secure web proxy(https) 输入ip地址和端口号即可。</li>
</ul>
<p>上面说的IP地址就是你能上各种网站的电脑的局域网内IP，一般是192.168.x.x。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>vercel建站配置DNS</title>
    <url>/posts/544375c0/</url>
    <content><![CDATA[<p>如果还没有github pages，请参考 <a href="https://shufanhao.top/posts/c5404504/">here</a>. </p>

        <h2 id="Why-use-Vercel"   >
          <a href="#Why-use-Vercel" class="heading-link"><i class="fas fa-link"></i></a>Why use Vercel ?</h2>
      <ol>
<li>国内访问github pages比较慢，有时候出现加载的问题。</li>
<li>baidu不能爬到github pages的页面，即使设置了baidusitemap，原因是: 2015年，因为一些不能细说的原因，Github 开始拒绝百度爬虫的访问，直接返回 403。官方给出原因是，百度爬虫爬得太狠，影响了 Github Page 服务的正常使用。这就导致了，但凡在 Github Page 搭建的个人博客，都无法被百度收录。<a id="more"></a>
So vercel 可以解决以上问题。</li>
</ol>

        <h3 id="What-is-Vercel"   >
          <a href="#What-is-Vercel" class="heading-link"><i class="fas fa-link"></i></a>What is Vercel ?</h3>
      <p>vercel类似于github page，但远比github page强大，速度也快得多得多，全球很多节点帮你缓存。</p>
<p>而且将Github授权给vercel后，可以达到最优雅的发布体验，只需将代码轻轻一推，项目就自动更新部署了。</p>
<p>vercel还支持部署serverless接口。那代表着，其不仅仅可以部署静态网站，甚至可以部署动态网站，而这些功能，统统都是免费的.</p>
<p>vercel还支持自动配置https，不用自己去FreeSSL申请证书，更是省去了一大堆证书的配置。</p>

        <h2 id="How-to-use-Vercel"   >
          <a href="#How-to-use-Vercel" class="heading-link"><i class="fas fa-link"></i></a>How to use Vercel ?</h2>
      <ol>
<li>Access <span class="exturl"><a class="exturl__link"   href="https://vercel.com/dashboard" >https://vercel.com/dashboard</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，并且授权github</li>
<li>New project</li>
<li>Import github project <img src=https://img-blog.csdnimg.cn/b10a42f86ddf41dc848aff3b346244ac.png width=60% /> </li>
<li>Select Framework preset. 这里我选择的是other，就是一个静态网站。因为我repo的master branch 是放的blog的静态网站，而hexo branch放的是Hexo source 文件。<img src=https://img-blog.csdnimg.cn/60886e50e21b4367aa1ea68e50a0e4e8.png width=60% /> 

</li>
</ol>
<p>默认会从github repo的default branch 拉取代码，一旦import后，可以在project -&gt; setting -&gt; git -&gt; Production Branch 设置 branch name.</p>
<p>导入结束后，如果master branch 有任何change，就会trigger vercel 的deployment。</p>
<p>并且在部署成功后，会申请一个默认的域名，我的是shufanhao-github-io.vercel.app。</p>
<p>这个域名太长了，那如何自己定义一个简单域名呢？ </p>

        <h2 id="How-to-apply-DNS-Domain"   >
          <a href="#How-to-apply-DNS-Domain" class="heading-link"><i class="fas fa-link"></i></a>How to apply DNS Domain ?</h2>
      <p>天下没有免费的午餐。如果需要一个自己定义的DNS domain，那只能花钱了。</p>
<p>我自己调研了一下，目前.top的二级域名，稍微便宜点。比较了阿里云和腾讯云，基本价格差不多，所幸直接在阿里云买了shufanhao.top的10年是189块钱。</p>
<p><img src="https://img-blog.csdnimg.cn/7011bd89f8a44832bf789d71bff821ae.png" alt="在这里插入图片描述"></p>
<p>买了之后，就可以根据阿里云的文档一步一步操作了，需要实名认证，人工审核等，大概需要个半天的时间。</p>

        <h2 id="How-to-configure-Vercel-Aliyun-DNS"   >
          <a href="#How-to-configure-Vercel-Aliyun-DNS" class="heading-link"><i class="fas fa-link"></i></a>How to configure Vercel/Aliyun DNS ?</h2>
      
        <h3 id="Configure-Vercel"   >
          <a href="#Configure-Vercel" class="heading-link"><i class="fas fa-link"></i></a>Configure Vercel</h3>
      <p>输入刚申请的domain，shufanhao.top，然后点击add:<br><img src=https://img-blog.csdnimg.cn/831070a105f34562b98d8bdb6137e154.png width=60% /> </p>
<p>我是选择的第二个，因为我想让网址默认显示shufanhao.top而不是<span class="exturl"><a class="exturl__link"   href="http://www.shufanhao.top./" >www.shufanhao.top。</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<img src=https://img-blog.csdnimg.cn/7afad74476d64b1e8945b5f98ebc12ea.png width=50% /> 

<p>配置完后，会发现域名解析失败，根据提示到DNS provider 再做设置。</p>

        <h3 id="Aliyun"   >
          <a href="#Aliyun" class="heading-link"><i class="fas fa-link"></i></a>Aliyun</h3>
      <p>阿里云设置就是添加一个A记录和CNAME。<br><img src="https://img-blog.csdnimg.cn/b308df7759b344a6968fd3a71084e8bc.png" alt="在这里插入图片描述"></p>
<p>设置完成后，再去查看vercel domains 发现都是正常了。</p>
<img src=https://img-blog.csdnimg.cn/1e94953e409c4ddcb24901fb4d030229.png width=60% /> 

<p>至此，我也有了一个自己的域名了。</p>
<p>欢迎访问<a href="https://shufanhao.top/">https://shufanhao.top</a> 和我的个人公共号。</p>
<p><img src="https://img-blog.csdnimg.cn/44f9447660ec41899a56f1a934d98a6a.jpeg" alt="请添加图片描述"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>一文搞定通过UTM 在MAC M1上安装Win11</title>
    <url>/posts/fffdf12c/</url>
    <content><![CDATA[
        <h2 id="Why"   >
          <a href="#Why" class="heading-link"><i class="fas fa-link"></i></a>Why</h2>
      <p>临近过年，一年一度的抢票大战就要开始。抢票软件要求安装在windows，作为mac资深用户，必须安装个windows虚拟机。</p>
<a id="more"></a>


        <h2 id="How"   >
          <a href="#How" class="heading-link"><i class="fas fa-link"></i></a>How</h2>
      <p>step by step: </p>
<ul>
<li>follow <span class="exturl"><a class="exturl__link"   href="https://www.youtube.com/watch?v=OwwGC3Gi_4g" >YouTube</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。具体step follow <span class="exturl"><a class="exturl__link"   href="https://www.youtube.com/watch?v=OwwGC3Gi_4g" >YouTube</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 视频。本文，只说一下，特别容易错的step。</li>
<li>follow <span class="exturl"><a class="exturl__link"   href="https://docs.getutm.app/guides/windows/" >getutm</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
<p>1.下载win11 arm 版ISO镜像，please refer <span class="exturl"><a class="exturl__link"   href="https://uupdump.net/known.php?q=windows+11+arm" >here</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>. </p>
<p>2.开始安装</p>
<center><img src="https://img-blog.csdnimg.cn/direct/c15b749a76404a83866f1bd101f5909a.png" width="60%"></center>

<p>3.会碰到这个问题。PC can’t run Windows11</p>
<center><img src="https://img-blog.csdnimg.cn/direct/372e7fa892324e5da44540e21877ec00.png" width="60%"></center>

<p>Follow: <span class="exturl"><a class="exturl__link"   href="https://docs.getutm.app/guides/windows/#this-pc-cant-run-windows-11" >This PC can’t run Windows 11</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> to fix your issue. </p>
<p>注意: shift + Fn + F10 打开terminal, 然后输入regedit打开注册表，修改后的注册表如下图：</p>
<center><img src="https://img-blog.csdnimg.cn/direct/59afd9ab73ef4753801f523fc1342439.png" width="60%"></center>

<p>修改完注册表后，再返回上一步，然后下一步，就可以看到如下图:</p>
<center><img src="https://img-blog.csdnimg.cn/direct/50e1d424ddfd4bff9373ad7b81e3068c.png" width="60%"></center>

<p>4.再会碰到如下问题。连接不了网络。</p>
<center><img src="https://img-blog.csdnimg.cn/direct/6da9d8d23e85411d855dcea4371e3f2f.png" width="60%"></center>

<p>如何解决呢：<br>shift + Fn + F10 打开terminal, 然后输入OOBE\BYPASSNRO，注意是大写的O，不是零。</p>
<center><img src="https://img-blog.csdnimg.cn/direct/6fbb283e1ecf4fbf93e10b769e83982c.png" width="60%"></center>

<p>然后系统会重新启动。</p>
<p>5.最后系统打开后，网络还是不能连接，原因是没有安装驱动。</p>
<p>打开drive image option: </p>
<center><img src="https://img-blog.csdnimg.cn/direct/3e40376a07f14ac5944f22865ddfb91f.png" width="60%"></center>

<p>点击change: 找到下载好的驱动，即可。驱动<span class="exturl"><a class="exturl__link"   href="https://docs.getutm.app/guest-support/windows/#download" >下载地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>
<center><img src="https://img-blog.csdnimg.cn/direct/c1a44ad21dd34c2f846d8f9b76ab0de8.png" width="60%"></center>

<p>都结束后就，重启VM，就可以正常连接网络。</p>
]]></content>
      <categories>
        <category>MacOS</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Test Article</title>
    <url>/posts/1c5fdd95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>Test</tag>
        <tag>WIP</tag>
      </tags>
  </entry>
</search>
